<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山芋头</title>
  
  <subtitle>记录和分享能创造价值</subtitle>
  <link href="https://bianchengme.gitee.io/bianchengme/atom.xml" rel="self"/>
  
  <link href="https://bianchengme.gitee.io/bianchengme/"/>
  <updated>2021-09-07T07:12:31.318Z</updated>
  <id>https://bianchengme.gitee.io/bianchengme/</id>
  
  <author>
    <name>jmme@foxmail.com</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM 逃逸分析优化</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2021/09/07/JVM-%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%BC%98%E5%8C%96/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2021/09/07/JVM-%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%BC%98%E5%8C%96/</id>
    <published>2021-09-07T02:52:06.000Z</published>
    <updated>2021-09-07T07:12:31.318Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“Java 中的对象是否都分配在堆内存中？”<br>——“不尽然”</p></blockquote><p>Java 中对象的创建一般会由堆内存去分配内存空间来进行存储，在堆内存空间不足的时候，GC 便会对堆内存进行垃圾回收，如果 GC 运行的次数过多，便会影响程序的性能,并且堆内存为所有线程共享，存再同步问题；所以 <strong>“逃逸分析”</strong> 由此诞生，它的目的就是判断哪些对象是可以存储在栈内存中而不用存储在堆内存中的，从而让其随着线程的消逝而消逝，进而减少了 GC 发生的频率，这也是常见的 JVM 优化技巧之一。</p><h1 id="什么是逃逸分析"><a href="#什么是逃逸分析" class="headerlink" title="什么是逃逸分析"></a>什么是逃逸分析</h1><p>逃逸分析（Escape Analysis）简单来讲就是，Java Hotspot 虚拟机可以分析新创建对象的使用范围，并决定是否在 Java 堆上分配内存的一项技术。</p><p>在方法中创建对象之后，如果这个对象 <strong>实例</strong> 除了在方法体中还在其它地方被引用了，此时如果方法执行完毕，由于该对象有被引用，所以 GC 有可能是无法立即回收的，此时便成为 <strong>内存逃逸现象</strong>。</p><h1 id="如何使用逃逸分析"><a href="#如何使用逃逸分析" class="headerlink" title="如何使用逃逸分析"></a>如何使用逃逸分析</h1><ul><li>开启逃逸分析：<code>-XX:+DoEscapeAnalysis</code></li><li>关闭逃逸分析：<code>-XX:-DoEscapeAnalysis</code></li><li>显示分析结果：<code>-XX:+PrintEscapeAnalysis</code></li></ul><p>逃逸分析的作用，就是筛选出没有发生逃逸的对象，从而对它们进行以下三方面的优化：</p><h3 id="同步消除（锁消除）"><a href="#同步消除（锁消除）" class="headerlink" title="同步消除（锁消除）"></a>同步消除（锁消除）</h3><p>因为同步锁是非常消耗性能的，所以当编译器确定一个对象没有发生逃逸时，它便会移除该对象的同步锁。</p><p>在 JDK1.8 中是默认开启的，但是要建立在已开启逃逸分析的基础之上。</p><ul><li>开启锁消除：<code>-XX:+EliminateLocks</code>（JDK8默认开启）</li><li>关闭锁消除：<code>-XX:-EliminateLocks</code></li></ul><h3 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h3><p>首先要明白标量和聚合量，基础类型和对象的引用可以理解为标量，它们不能被进一步分解。而能被进一步分解的量就是聚合量，比如：对象。</p><p>对象是聚合量，它又可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做标量替换。</p><p>这样，如果一个对象没有发生逃逸，那压根就不用创建它，只会在栈或者寄存器上创建它用到的成员标量，节省了内存空间，也提升了应用程序性能。</p><p>标量替换在 JDK1.8 中也是默认开启的，但是同样也要建立在已开启逃逸分析的基础之上。</p><ul><li>开启标量替换：<code>-XX:+EliminateAllocations</code></li><li>关闭标量替换：<code>-XX:-EliminateAllocations</code></li><li>显示标量替换详情：<code>-XX:+PrintEliminateAllocations</code></li></ul><h3 id="栈内存分配"><a href="#栈内存分配" class="headerlink" title="栈内存分配"></a>栈内存分配</h3><p>栈内存分配很好理解，在上文中提过，就是将原本分配在堆内存上的对象转而分配在栈内存上，这样就可以减少堆内存的占用，从而减少 GC 的频次。</p><h1 id="逃逸分析的优势"><a href="#逃逸分析的优势" class="headerlink" title="逃逸分析的优势"></a>逃逸分析的优势</h1><p>我们通过如下代码测试：</p><h4 id="Step-1：测试开启逃逸"><a href="#Step-1：测试开启逃逸" class="headerlink" title="Step 1：测试开启逃逸"></a>Step 1：测试开启逃逸</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: EscapeAnalysisTest</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EscapeAnalysisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> t1 = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            allot();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> t2 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(t2-t1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jet jet = <span class="keyword">new</span> Jet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Jet</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环境是 jdk1.8，默认开启了逃逸分析，所以直接运行，得到结果如下，程序耗时 3 毫秒：</p><p>我们观察下内存情况，发现堆内存中一共新建了 11 万个 Jet 对象。</p><h4 id="Step-2：测试关闭逃逸"><a href="#Step-2：测试关闭逃逸" class="headerlink" title="Step 2：测试关闭逃逸"></a>Step 2：测试关闭逃逸</h4><p>Step 3：测试标量替换</p><p>Step 4：测试锁消除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Jet jet = <span class="keyword">new</span> Jet();</span><br><span class="line">    <span class="keyword">synchronized</span> (jet) &#123;</span><br><span class="line">        jet.name = <span class="string">"jet Chen"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>逃逸分析的原理理解起来其实很简单，但 JVM 在实际应用过程中，还是有诸多因素需要考虑的。</p><p>比如，逃逸分析不能在静态编译时进行，必须在 JIT 里完成。原因大致是：与 Java 的动态性有冲突。因为你可以在运行时，通过动态代理改变一个类的行为，此时，逃逸分析是无法得知类已经变化了。总之就是：因为只有当收集到足够的运行数据时，JVM 才可以更好地判断对象是否发生了逃逸。（参考大佬的解释：<a href="https://www.zhihu.com/ques....）" target="_blank" rel="noopener">https://www.zhihu.com/ques....）</a></p><p>当然，逃逸分析并不是没有劣势的，因为逃逸分析是需要消耗一定的性能去执行分析的，所以说如果方法中的对象全都是处于逃逸状态，那么就没有起到优化的作用，从而就白白损失了这部分的性能消耗。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;“Java 中的对象是否都分配在堆内存中？”&lt;br&gt;——“不尽然”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java 中对象的创建一般会由堆内存去分配内存空间来进行存储，在堆内存空间不足的时候，GC 便会对堆内存进行垃圾回收，如果 GC 运行的次</summary>
      
    
    
    
    <category term="JAVA" scheme="https://bianchengme.gitee.io/bianchengme/categories/JAVA/"/>
    
    <category term="JVM" scheme="https://bianchengme.gitee.io/bianchengme/categories/JAVA/JVM/"/>
    
    
    <category term="JAVA" scheme="https://bianchengme.gitee.io/bianchengme/tags/JAVA/"/>
    
    <category term="JVM" scheme="https://bianchengme.gitee.io/bianchengme/tags/JVM/"/>
    
    <category term="优化" scheme="https://bianchengme.gitee.io/bianchengme/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Nacos通过Docke部署</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2021/07/02/Nacos%E9%80%9A%E8%BF%87Docke%E9%83%A8%E7%BD%B2/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2021/07/02/Nacos%E9%80%9A%E8%BF%87Docke%E9%83%A8%E7%BD%B2/</id>
    <published>2021-07-02T01:28:53.000Z</published>
    <updated>2021-07-02T01:46:47.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><h6 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure><h6 id="2-挂载目录"><a href="#2-挂载目录" class="headerlink" title="2.挂载目录"></a>2.挂载目录</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/data/nacos/logs/ ~/data/nacos/init.d/   <span class="comment">#创建目录          </span></span><br><span class="line">vim ~/data/nacos/init.d/application.properties        <span class="comment">#修改配置文件</span></span><br></pre></td></tr></table></figure><p>添加如下参数:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="meta">server.servlet.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8848</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://xx.xx.xx.x:3306/nacos_devtest_prod?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">user</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">nacos.cmdb.dumpTaskInterval</span>=<span class="string">3600</span></span><br><span class="line"><span class="meta">nacos.cmdb.eventTaskInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">nacos.cmdb.labelTaskInterval</span>=<span class="string">300</span></span><br><span class="line"><span class="meta">nacos.cmdb.loadDataAtStart</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">management.metrics.export.elastic.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">management.metrics.export.influx.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">server.tomcat.accesslog.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">server.tomcat.accesslog.pattern</span>=<span class="string">%h %l %u %t "%r" %s %b %D %&#123;User-Agent&#125;i</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">nacos.security.ignore.urls</span>=<span class="string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/login,/v1/console/health/**,/v1/cs/**,/v1/ns/**,/v1/cmdb/**,/actuator/**,/v1/console/server/**</span></span><br><span class="line"><span class="meta">nacos.naming.distro.taskDispatchThreadCount</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">nacos.naming.distro.taskDispatchPeriod</span>=<span class="string">200</span></span><br><span class="line"><span class="meta">nacos.naming.distro.batchSyncKeyCount</span>=<span class="string">1000</span></span><br><span class="line"><span class="meta">nacos.naming.distro.initDataRatio</span>=<span class="string">0.9</span></span><br><span class="line"><span class="meta">nacos.naming.distro.syncRetryDelay</span>=<span class="string">5000</span></span><br><span class="line"><span class="meta">nacos.naming.data.warmup</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">nacos.naming.expireInstance</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>:wq 保存退出</p><h6 id="3-启动容器"><a href="#3-启动容器" class="headerlink" title="3.启动容器"></a>3.启动容器</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker  run \</span><br><span class="line">--name nacos -d \</span><br><span class="line">-p <span class="number">8848</span>:<span class="number">8848</span> \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">--restart=always \</span><br><span class="line">-e JVM_XMS=<span class="number">256</span>m \</span><br><span class="line">-e JVM_XMX=<span class="number">256</span>m \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e PREFER_HOST_MODE=hostname \</span><br><span class="line">-v ~<span class="regexp">/data/</span>nacos/logs/:<span class="regexp">/home/</span>nacos/logs \</span><br><span class="line">-v ~<span class="regexp">/data/</span>nacos/init.d/application.properties:<span class="regexp">/home/</span>nacos/init.d/application.properties \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink&quot; title=&quot;方式一&quot;&gt;&lt;/a&gt;方式一&lt;/h2&gt;&lt;h6 id=&quot;1-拉取镜像&quot;&gt;&lt;a href=&quot;#1-拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;1.拉取镜像&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Docker" scheme="https://bianchengme.gitee.io/bianchengme/categories/Docker/"/>
    
    <category term="Nacos" scheme="https://bianchengme.gitee.io/bianchengme/categories/Docker/Nacos/"/>
    
    
    <category term="Docker" scheme="https://bianchengme.gitee.io/bianchengme/tags/Docker/"/>
    
    <category term="nacos" scheme="https://bianchengme.gitee.io/bianchengme/tags/nacos/"/>
    
    <category term="部署" scheme="https://bianchengme.gitee.io/bianchengme/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>openstack-horizon 快速本地运行</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2021/03/12/openstack-horizon-%E5%BF%AB%E9%80%9F%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2021/03/12/openstack-horizon-%E5%BF%AB%E9%80%9F%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C/</id>
    <published>2021-03-12T08:31:55.000Z</published>
    <updated>2021-03-12T10:14:39.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="horizon-简介"><a href="#horizon-简介" class="headerlink" title="horizon 简介"></a>horizon 简介</h2><p>Horizon 为 Openstack 提供一个 WEB 前端的管理界面 (UI 服务 )通过 Horizon 所提供的 DashBoard 服务 , 管理员可以使用通过 WEB UI 对 Openstack 整体云环境进行管理 , 并可直观看到各种操作结果与运行状态。那作为开发者怎样快速上手horizon？其实很简单，so easy！</p><h2 id="horizon本地运行"><a href="#horizon本地运行" class="headerlink" title="horizon本地运行"></a>horizon本地运行</h2><h3 id="1、准备本地环境"><a href="#1、准备本地环境" class="headerlink" title="1、准备本地环境"></a>1、准备本地环境</h3><p>安装python，不会自己百度搜吧 。。。。</p><h3 id="2、创建虚拟环境，推荐用virtualenvwrapper；"><a href="#2、创建虚拟环境，推荐用virtualenvwrapper；" class="headerlink" title="2、创建虚拟环境，推荐用virtualenvwrapper；"></a>2、创建虚拟环境，推荐用virtualenvwrapper；</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装</span><br><span class="line">pip install virtualenvwrapper-win</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* 默认创建的虚拟环境位于C:\Users\username\envs,可以通过环境变量 WORKON_HOME来定制。</span><br><span class="line">* 通过计算机--&gt;属性--&gt;高级系统设置--&gt;环境变量--&gt;在系统变量中新建“变量名”：WORKON_HOME,变量值：“你自定义的路径”。</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行此命令创建第一个虚拟环境:</span><br><span class="line">mkvirtualenv venv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 列出所有虚拟环境</span><br><span class="line">lsvirtualenv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 激活虚拟环境</span><br><span class="line">workon venv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 进入虚拟环境目录</span><br><span class="line">cdvirtualenv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 进入虚拟环境的site-packages目录</span><br><span class="line">cdsitepackages</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 列出site-packages目录的所有软件包</span><br><span class="line">lssitepackages</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 停止虚拟环境</span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 删除虚拟环境</span><br><span class="line">rmvitualenv venv</span><br></pre></td></tr></table></figure><h3 id="3、-获取项目代码"><a href="#3、-获取项目代码" class="headerlink" title="3、 获取项目代码"></a>3、 获取项目代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># github clone 地址</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;openstack&#x2F;horizon.git</span><br></pre></td></tr></table></figure><h3 id="4、安装依赖"><a href="#4、安装依赖" class="headerlink" title="4、安装依赖"></a>4、安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;项目目录下:</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="5、配置项目"><a href="#5、配置项目" class="headerlink" title="5、配置项目"></a>5、配置项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建配置文件</span><br><span class="line">cp openstack_dashboard&#x2F;local&#x2F;local_settings.py.example openstack_dashboard&#x2F;local&#x2F;local_settings.py</span><br></pre></td></tr></table></figure><h3 id="6、运行项目"><a href="#6、运行项目" class="headerlink" title="6、运行项目"></a>6、运行项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;访问localhost:8000 打开登录界面；OK</span><br></pre></td></tr></table></figure><h3 id="7、过程中遇到的问题"><a href="#7、过程中遇到的问题" class="headerlink" title="7、过程中遇到的问题"></a>7、过程中遇到的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Exception has occurred: FilePermissionError</span><br><span class="line">Insecure permissions on key file &#x2F;mnt&#x2F;f&#x2F;work&#x2F;openstack&#x2F;horizon&#x2F;openstack_dashboard&#x2F;local&#x2F;.secret_key_store, should be 0600</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可能是linux文件权限错误，搜索后发现，local_settings.py使用了该文件，修改权限后依然不行，可能是我用了wsl的原因吧。</span><br><span class="line">&#x2F;&#x2F; 暂时先屏蔽 horizon&#x2F;openstack_dashboard&#x2F;local&#x2F;local_settings.py中对.secret_key_store的使用</span><br><span class="line"># SECRET_KEY &#x3D; secret_key.generate_or_read_from_file(os.path.join(LOCAL_PATH, &#39;.secret_key_store&#39;))</span><br><span class="line">SECRET_KEY&#x3D;&#39;GUM4T1AwQbF536JpKNQk10Vq0EpOIIudUQ0hpoAPBdTvDkgvUuuuGagAE4xajUVx&#39;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;horizon-简介&quot;&gt;&lt;a href=&quot;#horizon-简介&quot; class=&quot;headerlink&quot; title=&quot;horizon 简介&quot;&gt;&lt;/a&gt;horizon 简介&lt;/h2&gt;&lt;p&gt;Horizon 为 Openstack 提供一个 WEB 前端的管理界面 (</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 生产力工具grep</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/07/28/Linux-%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7grep/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/07/28/Linux-%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7grep/</id>
    <published>2020-07-28T06:11:06.000Z</published>
    <updated>2020-07-28T06:11:06.939Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 切换启动图形界面为命令行界面</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/07/28/Linux-%E5%88%87%E6%8D%A2%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%B8%BA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/07/28/Linux-%E5%88%87%E6%8D%A2%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%B8%BA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2/</id>
    <published>2020-07-28T05:49:43.000Z</published>
    <updated>2020-07-28T05:49:43.112Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 修改网络配置</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/07/28/Linux-%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE-1/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/07/28/Linux-%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE-1/</id>
    <published>2020-07-28T05:43:35.000Z</published>
    <updated>2020-07-28T05:43:35.717Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 修改网络配置</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/07/28/Linux-%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/07/28/Linux-%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</id>
    <published>2020-07-28T05:42:56.000Z</published>
    <updated>2020-07-28T05:42:56.983Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>JS中的async和await的用法和理解</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/07/26/JS%E4%B8%AD%E7%9A%84async-await%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E7%90%86%E8%A7%A3/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/07/26/JS%E4%B8%AD%E7%9A%84async-await%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E7%90%86%E8%A7%A3/</id>
    <published>2020-07-26T13:31:47.000Z</published>
    <updated>2020-07-28T05:41:08.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先理解async的基本含义"><a href="#首先理解async的基本含义" class="headerlink" title="首先理解async的基本含义"></a>首先理解async的基本含义</h2><p>async 是一个修饰符，async 定义的函数会默认的返回一个Promise对象resolve的值，因此对async函数可以直接进行then操作,返回的值即为then方法的传入函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0. async基础用法测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun0().then( <span class="function"><span class="params">x</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(x) &#125;)  <span class="comment">//  输出结果 1， 1，</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">funa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'a'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funa().then( <span class="function"><span class="params">x</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(x) &#125;)  <span class="comment">//  输出结果a， a，</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">funo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(&#123;&#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funo().then( <span class="function"><span class="params">x</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(x) &#125;)   <span class="comment">// 输出结果 &#123;&#125;  &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">funp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Promise'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        resolve(<span class="string">'Promise'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funp().then( <span class="function"><span class="params">x</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(x) &#125;)   <span class="comment">// 输出promise  promise</span></span><br></pre></td></tr></table></figure><h3 id="await-也是一个修饰符"><a href="#await-也是一个修饰符" class="headerlink" title="await 也是一个修饰符"></a>await 也是一个修饰符</h3><p>await 关键字 只能放在 async 函数内部， await关键字的作用 就是获取 Promise中返回的内容， 获取的是Promise函数中resolve或者reject的值</p><blockquote><p>如果await 后面并不是一个Promise的返回值，则会按照同步程序返回值处理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  await 关键字 只能放在 async 函数内部， await关键字的作用 就是获取 Promise中返回的内容， 获取的是Promise函数中resolve或者reject的值</span></span><br><span class="line"><span class="comment">// 如果await 后面并不是一个Promise的返回值，则会按照同步程序返回值处理,为undefined</span></span><br><span class="line"><span class="keyword">const</span> bbb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="string">'string'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">funAsy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> a = <span class="keyword">await</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">const</span> b = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           resolve(<span class="string">'time'</span>)</span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">const</span> c = <span class="keyword">await</span> bbb()</span><br><span class="line">   <span class="built_in">console</span>.log(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funAsy()  <span class="comment">//  运行结果是 3秒钟之后 ，输出 1， time , string,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.如果不使用promise的方法的话</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log2</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(time)</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;, time)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="keyword">await</span> log2(<span class="number">5000</span>)</span><br><span class="line">    <span class="keyword">const</span> b = <span class="keyword">await</span> log2(<span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">const</span> c = log2(<span class="number">2000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上运行结果为： 立刻输出undefined   立刻输出1  2秒后输出2000  5秒后输出5000  10秒后输出10000</span></span><br></pre></td></tr></table></figure><h3 id="最后async-和-await的综合用法如下"><a href="#最后async-和-await的综合用法如下" class="headerlink" title="最后async 和 await的综合用法如下"></a>最后async 和 await的综合用法如下</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义一个或多个普通函数，函数必须返回Promise对象，如果返回其他类型的数据，将按照普通同步程序处理</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(time)</span><br><span class="line">           resolve()</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> log(<span class="number">5000</span>)</span><br><span class="line">    <span class="keyword">await</span> log(<span class="number">10000</span>)</span><br><span class="line">    log(<span class="number">1000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. async / await的重要应用 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asy = <span class="function"><span class="keyword">function</span>(<span class="params">x, time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(x)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="keyword">await</span> asy(<span class="number">3</span>, <span class="number">5000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">const</span> b = <span class="keyword">await</span> asy(<span class="number">4</span>, <span class="number">10000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">    <span class="keyword">const</span> c =  <span class="keyword">await</span> asy(<span class="number">5</span>, <span class="number">15000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c)</span><br><span class="line">    <span class="keyword">const</span> d = a + b +c  </span><br><span class="line">    <span class="built_in">console</span>.log(d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5秒后输出3  又10秒后输出4 又15秒后输出5  然后立刻输出3,4,5，然后输出12</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;首先理解async的基本含义&quot;&gt;&lt;a href=&quot;#首先理解async的基本含义&quot; class=&quot;headerlink&quot; title=&quot;首先理解async的基本含义&quot;&gt;&lt;/a&gt;首先理解async的基本含义&lt;/h2&gt;&lt;p&gt;async 是一个修饰符，async 定义的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue 插槽和作用域插槽</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/07/26/Vue-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/07/26/Vue-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/</id>
    <published>2020-07-26T11:45:11.000Z</published>
    <updated>2020-07-28T05:41:08.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先插槽（slot）的理解"><a href="#首先插槽（slot）的理解" class="headerlink" title="首先插槽（slot）的理解"></a>首先插槽（slot）的理解</h2><ul><li>插槽（Slot）是Vue提出来的一个概念，正如名字一样，插槽用于决定将所携带的内容，插入到指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。</li><li>插槽显不显示、怎样显示是由父组件来控制的，而插槽在哪里显示就由子组件来进行控制<h2 id="如何使用插槽"><a href="#如何使用插槽" class="headerlink" title="如何使用插槽"></a>如何使用插槽</h2><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3>父组件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">    &lt;slotOne1&gt;</span><br><span class="line">      &lt;p style&#x3D;&quot;color:red&quot;&gt;我是父组件插槽内容&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;slotOne1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在父组件引用的子组件中写入想要显示的内容（可以使用标签，也可以不用，也可以是组件）</p></blockquote></li></ul><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;slotOne1&quot;&gt;</span><br><span class="line">    &lt;div&gt;我是slotOne1组件&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在子组件中写入slot，slot所在的位置就是父组件要显示的内容</p></blockquote><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;slottwo&quot;&gt;</span><br><span class="line">    &lt;div&gt;slottwo&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;slot name&#x3D;&quot;header&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;slot name&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在子组件中定义了三个slot标签，其中有两个分别添加了name属性header和footer</p></blockquote><p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">    &lt;slot-two&gt;</span><br><span class="line">      &lt;p&gt;啦啦啦，啦啦啦，我是卖报的小行家&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;template slot&#x3D;&quot;header&quot;&gt;</span><br><span class="line">          &lt;p&gt;我是name为header的slot&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">      &lt;p slot&#x3D;&quot;footer&quot;&gt;我是name为footer的slot&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;slot-two&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在父组件中使用template并写入对应的slot值来指定该内容在子组件中现实的位置（当然也不用必须写到template），没有对应值的其他内容会被放到子组件中没有添加name属性的slot中</p></blockquote><h3 id="插槽的默认值"><a href="#插槽的默认值" class="headerlink" title="插槽的默认值"></a>插槽的默认值</h3><p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">    &lt;slot-two&gt;&lt;&#x2F;slot-two&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;slottwo&quot;&gt;</span><br><span class="line">    &lt;slot&gt;我不是卖报的小行家&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可以在子组件的slot标签中写入内容，当父组件没有写入内容时会显示子组件的默认内容，当父组件写入内容时，会替换子组件的默认内容.</p></blockquote><h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">    &lt;slot-two&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;slot-two&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name： &#39;Jack&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;slottwo&quot;&gt;</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>专业解释：父组件应用子组件可以给插槽填充内容，但一般只填充html标签，里边的数据信息要由插槽自己提供，这个过程称为作用域插槽。<br>个人理解：父组件在用子组件来填充插槽的时候需要用到子组件里面插槽的数据。子组件文件插槽上带的数据在父组件的子组件标签里 让一个标签 带有slot-scope=”xxx” 去接收 以便在下面进行调用。</p><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是作用域插槽的子组件</span><br><span class="line">    &lt;slot :data&#x3D;&quot;user&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;slotthree&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user: [</span><br><span class="line">        &#123;name: &#39;Jack&#39;, sex: &#39;boy&#39;&#125;,</span><br><span class="line">        &#123;name: &#39;Jone&#39;, sex: &#39;girl&#39;&#125;,</span><br><span class="line">        &#123;name: &#39;Tom&#39;, sex: &#39;boy&#39;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在子组件的slot标签上绑定需要的值</p></blockquote><p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是作用域插槽</span><br><span class="line">    &lt;slot-three&gt;</span><br><span class="line">      &lt;template slot-scope&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;(item, index) in user.data&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;&#x2F;slot-three&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在父组件上使用slot-scope属性，user.data就是子组件传过来的值</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;首先插槽（slot）的理解&quot;&gt;&lt;a href=&quot;#首先插槽（slot）的理解&quot; class=&quot;headerlink&quot; title=&quot;首先插槽（slot）的理解&quot;&gt;&lt;/a&gt;首先插槽（slot）的理解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;插槽（Slot）是Vue提出来的一个概念</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CALayer</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/05/19/CALayer/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/05/19/CALayer/</id>
    <published>2020-05-19T03:53:28.000Z</published>
    <updated>2020-07-28T05:41:08.577Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>vue学习笔记</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/05/18/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/05/18/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-18T03:13:40.000Z</published>
    <updated>2020-07-28T05:41:08.628Z</updated>
    
    <content type="html"><![CDATA[<p>el是element的缩写；</p><p> constructor 构造函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;el是element的缩写；&lt;/p&gt;
&lt;p&gt; constructor 构造函数&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue 学习计划</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/05/18/vue-%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/05/18/vue-%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</id>
    <published>2020-05-18T01:37:49.000Z</published>
    <updated>2020-07-28T05:41:08.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><input disabled="" type="checkbox"> 按照官方例子，使用<code>&lt;script&gt;</code>标签将官方教程（guide）写一遍，最终做个一个页面出来。（2d）</li><li><input disabled="" type="checkbox"> 根据官方的实例，自己写一个例子，比如编辑器。（1d）</li><li><input disabled="" type="checkbox"> 阅读官方进阶教程前半部分到自定义指令为止，着重理解vue的响应式机制和组件声明周期。『渲染函数（Render Function)』如果理解吃力可以先跳过。（1d）</li><li><input disabled="" type="checkbox"> 阅读教程里关于路由和状态管理的章节，然后根据需要学习vue-router和vuex。根据文档中的例子跟着即可。（1d）</li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li><input disabled="" type="checkbox"> <p>了解 JavaScript 背后的规范，ECMAScript 的历史和目前的规范制定方式。学习 ES2015/16 的新特性，理解 ES2015 modules，适当关注还未成为标准的提案，ES6以后是各个框架的标配，必须要学。（2d）</p></li><li><input disabled="" type="checkbox"> <p>命令行。(0.5d)</p></li><li><input disabled="" type="checkbox"> <p>nodejs基础。(0.5d)</p><blockquote><p>至少要了解 npm 的常用命令，npm scripts 如何使用，语义化版本号规则，CommonJS 模块规范（了解它和 ES2015 Modules 的异同），Node 包的解析规则，以及 Node 的常用 API。应当做到可以自己写一些基本的命令行程序。注意 Node (6+) 版本开始已经支持绝大部分 ES2015 的特性，可以借此巩固 ES2015。</p></blockquote></li><li><input disabled="" type="checkbox"> <p>了解如何使用 / 配置 Babel 来将 ES2015 编译到 ES5 用于浏览器环境。这个简单，看着Babel官网文档即可轻松配置。(0.5d)</p></li><li><input disabled="" type="checkbox"> <p>学习 Webpack。Webpack 是一个极其强大同时也复杂的工具，作为起步，理解它的『一切皆模块』的思想，并基本了解其常用配置选项和 loader 的概念/使用方法即可，比如如何搭配 Webpack 使用 Babel。(0.5d)</p><blockquote><p>学习 Webpack 的一个挑战在于其本身文档的混乱，建议多搜索搜索，应该还是有质量不错的第三方教程的。英文好的建议阅读 Webpack 2.0 的文档，比起 1.0 有极大的改善，但需要注意和 1.0 的不兼容之处。</p></blockquote><h2 id="Vue-进阶阶段"><a href="#Vue-进阶阶段" class="headerlink" title="Vue 进阶阶段"></a>Vue 进阶阶段</h2></li><li><input disabled="" type="checkbox"> <p>在 node 和 webpack 基础上，可以通过vue-cli来搭建基于webpack，并且支持单文件组件的项目了。建议使用webpick-simple这个模板开始，并阅读官方教程进阶篇剩余的内容以及vue-router的文档，了解一些进阶配置。可以自己亲手从零开始搭一个项目加深理解。(1d)</p></li><li><input disabled="" type="checkbox"> <p>根据 例子 尝试在 Webpack 模板基础上整合 vue-router 和 vuex。(1d)</p></li><li><input disabled="" type="checkbox"> <p>深入理解 Virtual DOM 和『渲染函数 (Render Functions)』这一章节（可选择性使用 JSX)，理解模板和渲染函数之间的对应关系，了解其使用方法和适用场景。(1d)</p></li><li><input disabled="" type="checkbox"> <p>可选）根据需求，了解服务端渲染的使用（需要配合 Node 服务器开发的知识）。介绍一下服务端渲染的概念。nuxt集合了 vue-router 和 vuex、webpack的搭建套餐，有SEO需要的可以着重了解下， 并不是必须要学，这只是一种场景方案。</p><blockquote><p>从头搭建一个服务端渲染的应用是相当复杂的。幸运的是，我们有一个优秀的社区项目 Nuxt.js 让这一切变得非常简单。Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染的 Vue 应用提供了极其便利的开发体验。更酷的是，你甚至可以用它来做为静态站生成器。推荐尝试。</p></blockquote></li><li><input disabled="" type="checkbox"> <p>阅读开源的 Vue 应用、组件、插件源码，自己尝试编写开源的 Vue 组件、插件。(2d)</p></li><li><input disabled="" type="checkbox"> <p>vue各种属性和概念如何结合react 组件混合用，也有必要了解一下，它们有些方案是可以通用的，比如jsx语法、vue用redux等。(2d)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; 按照官方例子，使用&lt;code&gt;&amp;lt;script&amp;gt</summary>
      
    
    
    
    <category term="vue" scheme="https://bianchengme.gitee.io/bianchengme/categories/vue/"/>
    
    
    <category term="vue" scheme="https://bianchengme.gitee.io/bianchengme/tags/vue/"/>
    
    <category term="学习计划" scheme="https://bianchengme.gitee.io/bianchengme/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>UICollectionView</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/05/13/UICollectionView/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/05/13/UICollectionView/</id>
    <published>2020-05-13T03:38:39.000Z</published>
    <updated>2020-07-28T05:41:08.581Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>自定义UITabBar样式</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/04/28/%E8%87%AA%E5%AE%9A%E4%B9%89UITabBar%E6%A0%B7%E5%BC%8F/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/04/28/%E8%87%AA%E5%AE%9A%E4%B9%89UITabBar%E6%A0%B7%E5%BC%8F/</id>
    <published>2020-04-28T01:19:31.000Z</published>
    <updated>2020-07-28T05:41:08.634Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Devops</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/04/27/Devops/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/04/27/Devops/</id>
    <published>2020-04-27T01:34:04.000Z</published>
    <updated>2020-07-28T05:41:08.577Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>iOS Xcode, 解决“Could not insert new outlet connection”的问题</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/04/25/iOS-Xcode-%E8%A7%A3%E5%86%B3%E2%80%9CCould-not-insert-new-outlet-connection%E2%80%9D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/04/25/iOS-Xcode-%E8%A7%A3%E5%86%B3%E2%80%9CCould-not-insert-new-outlet-connection%E2%80%9D%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-25T08:42:54.000Z</published>
    <updated>2020-07-28T05:41:08.584Z</updated>
    
    <content type="html"><![CDATA[<p>在Xcode中，我们能够在StoryBoard编辑界面或者是xib编辑界面中通过“Control键+拖拽“的方式将某个界面元素和相应的代码文件连接起来。在代码文件里创建outlet。</p><p>只是。假设你的运气不太好。运行以上操作的过程中你可能会遇到以下这种错误：</p><p><strong>Could not insert new outlet connection: Could not find any information for the class named “xxx”.</strong></p><p>假设你遇到这种问题。拿着上面的错误消息去百度一下会发现非常多相关的内容，有各种各样的解决方法，只是效果就众说纷纭，有人说这种方法好用，有人说那个方法好用，在这里就整理一下常见的一些情况和相应的解决方法。</p><p>首先第一种情况是最简单的，也是最easy被忽略的，就是你在新建类的时候没有选择将这个类增加到相应的“Target”中。</p><p>检查方法非常easy，选中你须要操作的类的.m文件。在“File inspector”界面的“Target Membership”中确认相应的“Target”有没有选中，假设没有选中就说明你在创建类的时候犯了各小小的错误。</p><p>改动方法非常easy，直接在“File inspector”界面的“Target Membership”中选上相应的target就好了。</p><p>假设你的情况和以上不符，有可能是你的项目Derive文件有点问题，解决方法有以下几种，原理都差点儿相同，就是尝试重建项目的一些后台文件。</p><ol><li>又一次将文件增加项目</li></ol><p>操作步骤就是选中出问题的.m和.h文件，点删除键，然后选“Remove Reference”，这样就不会真正删除文件。</p><p>接着选“File -&gt; Add Files to …”菜单，在文件选择界面选择刚才的.m文件和.h文件将他们又一次增加项目中。</p><ol start="2"><li>直接删除DeriveData</li></ol><p>操作步骤是关闭当前项目，然后关闭Xcode。然后通过Terminal或者是Finder找到以下的文件夹：</p><p><strong>~/Library/Developer/XCode/DerivedData</strong></p><p>在里面找到以你的项目开头的文件，将他们删除。</p><p>接着又一次启动Xcode</p><ol start="3"><li>在Organizer中删除项目的DeriveData</li></ol><p>假设你对Mac操作系统不了解。不知道假设操作第2种解决方法，有一个更加直接的方法，就是在Xcode中选择“Windows-&gt;Organizer”，然后选择“Projects”，选中你正在处理的项目，点击“DeriveData”相应的“Delete”button，Xcode会删除该项目的DeriveData。然后自己主动又一次生成一个。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Xcode中，我们能够在StoryBoard编辑界面或者是xib编辑界面中通过“Control键+拖拽“的方式将某个界面元素和相应的代码文件连接起来。在代码文件里创建outlet。&lt;/p&gt;
&lt;p&gt;只是。假设你的运气不太好。运行以上操作的过程中你可能会遇到以下这种错误：&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>iOS13修改status bar 的字体颜色</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/04/25/iOS13%E4%BF%AE%E6%94%B9status-bar-%E7%9A%84%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/04/25/iOS13%E4%BF%AE%E6%94%B9status-bar-%E7%9A%84%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/</id>
    <published>2020-04-25T07:36:27.000Z</published>
    <updated>2020-07-28T05:41:08.585Z</updated>
    
    <content type="html"><![CDATA[<p>StatusBarStyle定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, UIStatusBarStyle) &#123;</span><br><span class="line">UIStatusBarStyleDefault                                  &#x3D; 0, &#x2F;&#x2F; 根据用户交互样式自动选择状态条样式</span><br><span class="line">UIStatusBarStyleLightContent     API_AVAILABLE(ios(7.0)) &#x3D; 1, &#x2F;&#x2F; Light content, for use on dark backgrounds</span><br><span class="line">UIStatusBarStyleDarkContent     API_AVAILABLE(ios(13.0)) &#x3D; 3, &#x2F;&#x2F; Dark content, for use on light backgrounds</span><br><span class="line">UIStatusBarStyleBlackTranslucent NS_ENUM_DEPRECATED_IOS(2_0, 7_0, &quot;Use UIStatusBarStyleLightContent&quot;) &#x3D; 1,</span><br><span class="line">UIStatusBarStyleBlackOpaque      NS_ENUM_DEPRECATED_IOS(2_0, 7_0, &quot;Use UIStatusBarStyleLightContent&quot;) &#x3D; 2,</span><br><span class="line">&#125; API_UNAVAILABLE(tvos);</span><br></pre></td></tr></table></figure><p>定制状态条的样式 使用apple 推荐的这个系统方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ios 13.0 之后，这个方法已经失效了</span><br><span class="line">&#x2F;&#x2F; [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleDefault];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在UIViewController中重写方法</span><br><span class="line">- (UIStatusBarStyle)preferredStatusBarStyle &#123;</span><br><span class="line">    if (@available(iOS 13.0, *))&#123;</span><br><span class="line">        return UIStatusBarStyleDarkContent;</span><br><span class="line">    &#125;</span><br><span class="line">    return UIStatusBarStyleDefault;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你还是使用的Xcode 10 为了走过编译器这一步，可以使用预编译命令，这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#if defined(__IPHONE_13_0) &amp;&amp; __IPHONE_OS_VERSION_MAX_ALLOWED &gt;&#x3D; __IPHONE_13_0</span><br><span class="line">    if (@available(iOS 13.0, *)) &#123;</span><br><span class="line">        [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleDarkContent];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleDefault];</span><br><span class="line">    &#125;</span><br><span class="line">#else</span><br><span class="line">    [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleDefault];</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;StatusBarStyle定义：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="iOS" scheme="https://bianchengme.gitee.io/bianchengme/categories/iOS/"/>
    
    
    <category term="iOS" scheme="https://bianchengme.gitee.io/bianchengme/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>git 常用命令</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/04/25/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/04/25/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-04-25T01:34:59.000Z</published>
    <updated>2020-07-28T05:41:08.584Z</updated>
    
    <content type="html"><![CDATA[<p>提交git commit 的时候，发现一个文件无法被gitinore，猜测可能是已经提交过或者已经在git缓存里了，只有删除追踪和缓存才能被忽略。</p><p>1、先尝试取消git追踪文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index –assume-unchanged readme1.txt &#x2F;&#x2F;清除该文件的是索引</span><br></pre></td></tr></table></figure><ul><li>本地的当前分支取消了追踪</li><li>本文文件不删除， 远程仓库仍是存在此文件。</li><li>本次clone的所有分支都不追踪此文件。</li><li>重新git clone后此文件仍是会被追踪。</li><li>但是不能彻底消除追踪文件，因为可能本地git缓存中有该文件。</li></ul><p>2、删除git的缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached readme1.txt &#x2F;&#x2F;删除readme1.txt的git的缓存，并保留本地文件。</span><br></pre></td></tr></table></figure><ul><li>如果想本地缓存和文件一起删除 <code>git rm --f readme1.txt</code></li></ul><p>这时候再次 <code>git status</code>看看应该就不显示 readme1.txt了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;提交git commit 的时候，发现一个文件无法被gitinore，猜测可能是已经提交过或者已经在git缓存里了，只有删除追踪和缓存才能被忽略。&lt;/p&gt;
&lt;p&gt;1、先尝试取消git追踪文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl</summary>
      
    
    
    
    <category term="git" scheme="https://bianchengme.gitee.io/bianchengme/categories/git/"/>
    
    
    <category term="git" scheme="https://bianchengme.gitee.io/bianchengme/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Cocoapods CDN 错误</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/04/24/Cocoapods-CDN-%E9%94%99%E8%AF%AF/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/04/24/Cocoapods-CDN-%E9%94%99%E8%AF%AF/</id>
    <published>2020-04-24T07:48:35.000Z</published>
    <updated>2020-07-28T05:41:08.577Z</updated>
    
    <content type="html"><![CDATA[<p>最近Cocoapods升级到1.8.4后，install和update都没有问题，但是search的时候就遇到了问题，问题如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CDN: trunk URL couldn&#39;t be downloaded: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;CocoaPods&#x2F;Specs&#x2F;master&#x2F;Specs&#x2F;0&#x2F;a&#x2F;8&#x2F;YYModel@Haidora&#x2F;1.0.4&#x2F;YYModel@Haidora.podspec.json, </span><br><span class="line">error: Failed to open TCP connection to raw.githubusercontent.com:443 (Connection refused - connect(2) for &quot;raw.githubusercontent.com&quot; port 443)</span><br></pre></td></tr></table></figure><p>解决办法比较简单，<strong>在Podfile中添加source</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">source &#39;https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;Specs.git&#39;</span><br><span class="line"></span><br><span class="line">target &#39;XXXDemo&#39; do</span><br><span class="line"></span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  pod &#39;YYModel&#39;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><strong>移除trunk</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo remove trunk</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>为什么这样呢，很明显CDN的错误，这个问题如何解决呢，改日再找找…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近Cocoapods升级到1.8.4后，install和update都没有问题，但是search的时候就遇到了问题，问题如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    <category term="iOS" scheme="https://bianchengme.gitee.io/bianchengme/categories/iOS/"/>
    
    <category term="Xcode" scheme="https://bianchengme.gitee.io/bianchengme/categories/iOS/Xcode/"/>
    
    
    <category term="iOS" scheme="https://bianchengme.gitee.io/bianchengme/tags/iOS/"/>
    
    <category term="Xcode" scheme="https://bianchengme.gitee.io/bianchengme/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C之NS_ASSUME_NONNULL_BEGIN &amp; NS_ASSUME_NONNULL_END</title>
    <link href="https://bianchengme.gitee.io/bianchengme/2020/04/24/Objective-C%E4%B9%8BNS-ASSUME-NONNULL-BEGIN-NS-ASSUME-NONNULL-END/"/>
    <id>https://bianchengme.gitee.io/bianchengme/2020/04/24/Objective-C%E4%B9%8BNS-ASSUME-NONNULL-BEGIN-NS-ASSUME-NONNULL-END/</id>
    <published>2020-04-24T07:46:31.000Z</published>
    <updated>2020-07-28T05:41:08.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NS-ASSUME-NONNULL-BEGIN-amp-amp-NS-ASSUME-NONNULL-END"><a href="#NS-ASSUME-NONNULL-BEGIN-amp-amp-NS-ASSUME-NONNULL-END" class="headerlink" title="NS_ASSUME_NONNULL_BEGIN &amp;&amp; NS_ASSUME_NONNULL_END"></a>NS_ASSUME_NONNULL_BEGIN &amp;&amp; NS_ASSUME_NONNULL_END</h1><p>在Swift中存在Option类型，也就是使用？和！声明的变量。但是OC里面没有这个特征,因为在XCODE6.3之后出现新的关键词定义用于OC转SWIFT时候可以区分到底是什么类型</p><p><strong>nullable &amp;&amp; _</strong>nonnull<br>__nullable指代对象可以为NULL或者为NIL<br>__nonnull指代对象不能为null<br>当我们不遵循这一规则时，编译器就会给出警告。</p><p>我们来看看以下的实例，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@interface TestNullabilityClass ()</span><br><span class="line">@property (nonatomic, copy) NSArray * items;</span><br><span class="line">- (id)itemWithName:(NSString * __nonnull)name;</span><br><span class="line">@end</span><br><span class="line">@implementation TestNullabilityClass</span><br><span class="line">...</span><br><span class="line">- (void)testNullability &#123;</span><br><span class="line">    [self itemWithName:nil];    &#x2F;&#x2F; 编译器警告：Null passed to a callee that requires a non-null argument</span><br><span class="line">&#125;</span><br><span class="line">- (id)itemWithName:(NSString * __nonnull)name &#123;</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>事实上，在任何可以使用<code>const</code>关键字的地方都可以使用<code>__nullable</code>和<code>__nonnull</code>，不过这两个关键字仅限于使用在指针类型上。而在方法的声明中，我们还可以使用不带下划线的<code>nullable</code>和<code>nonnull</code>，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (nullable id)itemWithName:(NSString * nonnull)name</span><br></pre></td></tr></table></figure><p>在属性声明中，也增加了两个相应的特性，因此上例中的items属性可以如下声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, copy, nonnull) NSArray * items;</span><br></pre></td></tr></table></figure><p>当然也可以用以下这种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, copy) NSArray * __nonnull items;</span><br></pre></td></tr></table></figure><p>推荐使用<code>nonnul</code>l这种方式，这样可以让属性声明看起来更清晰。</p><p><code>Non null</code>区域设置(Audited Regions)</p><p>如果需要每个属性或每个方法都去指定<code>nonnull</code>和<code>nullable</code>，是一件非常繁琐的事。苹果为了减轻我们的工作量，专门提供了两个宏：<code>NS_ASSUME_NONNULL_BEGIN</code>和<code>NS_ASSUME_NONNULL_END</code>。在这两个宏之间的代码，所有简单指针对象都被假定为nonnull，因此我们只需要去指定那些nullable的指针。如下代码所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line">@interface TestNullabilityClass ()</span><br><span class="line">@property (nonatomic, copy) NSArray * items;</span><br><span class="line">- (id)itemWithName:(nullable NSString *)name;</span><br><span class="line">@end</span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure><p>在上面的代码中，items属性默认是<code>non null</code>的，itemWithName:方法的返回值也是<code>non null</code>，而参数是指定为<code>nullable</code>的。</p><p>不过，为了安全起见，苹果还制定了几条规则：</p><p>typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为<code>nonnulla</code>。<br> 复杂的指针类型(如id *)必须显示去指定是<code>nonnull</code>还是<code>nullable</code>。例如，指定一个指向<code>nullable</code>对象的<code>nonnull</code>指针，可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__nullable id * __nonnull</span><br></pre></td></tr></table></figure><p>我们经常使用的<code>NSError **</code>通常是被假定为一个指向<code>nullable NSError</code>对象的nullable指针。<br> 兼容性</p><p>因为Nullability Annotations是Xcode 6.3新加入的，所以我们需要考虑之前的老代码。实际上，苹果已以帮我们处理好了这种兼容问题，我们可以安全地使用它们：</p><p>老代码仍然能正常工作， 即使对<code>nonnull</code>对象使用了nil也没有问题。<br> 老代码在需要和swift混编时，在新的swift编译器下会给出一个警告。<br> <code>nonnull</code>不会影响性能。事实上，我们仍然可以在运行时去判断我们的对象是否为<code>nil</code>。<br> 事实上，我们可以将<code>nonnull/nullable</code>与我们的断言和异常一起看待，其需要处理的问题都是同一个：违反约定是一个程序员的错误。特别是，返回值是我们可控的东西，如果返回值是<code>nonnull</code>的，则我们不应该返回<code>nil</code>，除非是为了向后兼容。</p><h1 id="NS-ENUM-AVAILABLE-IOS"><a href="#NS-ENUM-AVAILABLE-IOS" class="headerlink" title="NS_ENUM_AVAILABLE_IOS"></a>NS_ENUM_AVAILABLE_IOS</h1><p>从单词的字面可以看出使用这个宏说明这个枚举开始IOS的版本</p><blockquote><p>IOS版本如下 7_0 代表7.0的版本.用_替换<br> 参数只有一个NS_ENUM_AVAILABLE_IOS(2_0) 代表&gt;=2.0开始</p></blockquote><h1 id="NS-ENUM-DEPRECATED-IOS"><a href="#NS-ENUM-DEPRECATED-IOS" class="headerlink" title="NS_ENUM_DEPRECATED_IOS"></a>NS_ENUM_DEPRECATED_IOS</h1><p>代表枚举类型已经过时的API 第一个参数是开始的时候，第二个参数是过时的时候</p><blockquote><p>NS_ENUM_DEPRECATED_IOS(2_0,7_0) 代表开始于IOS2.0废弃于IOS7.0 也就是&gt;=2.0 &lt;=7.0</p></blockquote><h1 id="TVOS-PROHIBITED"><a href="#TVOS-PROHIBITED" class="headerlink" title="__TVOS_PROHIBITED"></a>__TVOS_PROHIBITED</h1><blockquote><p>代表这个枚举或者类，方法，参数在TVOS系统上面不能使用</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIStatusBarStyle</span>) &#123;</span><br><span class="line">    <span class="built_in">UIStatusBarStyleDefault</span>                                     = <span class="number">0</span>, <span class="comment">// Dark content, for use on light backgrounds</span></span><br><span class="line">    <span class="built_in">UIStatusBarStyleLightContent</span>     <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">7</span>_0) = <span class="number">1</span>, <span class="comment">// Light content, for use on dark backgrounds</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIStatusBarStyleBlackTranslucent</span> <span class="built_in">NS_ENUM_DEPRECATED_IOS</span>(<span class="number">2</span>_0, <span class="number">7</span>_0, <span class="string">"Use UIStatusBarStyleLightContent"</span>) = <span class="number">1</span>,</span><br><span class="line">    <span class="built_in">UIStatusBarStyleBlackOpaque</span>      <span class="built_in">NS_ENUM_DEPRECATED_IOS</span>(<span class="number">2</span>_0, <span class="number">7</span>_0, <span class="string">"Use UIStatusBarStyleLightContent"</span>) = <span class="number">2</span>,</span><br><span class="line">&#125; __TVOS_PROHIBITED;</span><br></pre></td></tr></table></figure><h1 id="UIKIT-EXTERN"><a href="#UIKIT-EXTERN" class="headerlink" title="UIKIT_EXTERN"></a>UIKIT_EXTERN</h1><blockquote><p><code>extern</code>这个是定义字符串 变量 比<code>#define</code>更加的高效 .但是UIKIT_EXTERN是根据是否是C语言宏定义，根据语言区分 ，比extern更加的高效</p></blockquote><h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIApplicationInvalidInterfaceOrientationException</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码一般定义在.H 在.M实现 实现要去掉UIKIT_EXTERN.代表IOS6.0之后可以用，在TVOS系统不可用。</p></blockquote><h1 id="NS-CLASS-AVAILABLE-IOS"><a href="#NS-CLASS-AVAILABLE-IOS" class="headerlink" title="NS_CLASS_AVAILABLE_IOS"></a>NS_CLASS_AVAILABLE_IOS</h1><blockquote><p>代表类开始的API 和上面说的类似</p></blockquote><h6 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h6><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UIApplication</span> : <span class="title">UIResponder</span></span></span><br></pre></td></tr></table></figure><h1 id="NS-EXTENSION-UNAVAILABLE-IOS"><a href="#NS-EXTENSION-UNAVAILABLE-IOS" class="headerlink" title="NS_EXTENSION_UNAVAILABLE_IOS"></a>NS_EXTENSION_UNAVAILABLE_IOS</h1><blockquote><p>标记IOS插件不能使用这些API,后面有一个参数，可以作为提示，用什么API替换</p></blockquote><h6 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h6><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">UIApplication</span> *)sharedApplication <span class="built_in">NS_EXTENSION_UNAVAILABLE_IOS</span>(<span class="string">"Use view controller based solutions where appropriate instead."</span>);</span><br></pre></td></tr></table></figure><h1 id="kindof"><a href="#kindof" class="headerlink" title="__kindof"></a>__kindof</h1><blockquote><p>可以参考下面的连接 我就不多啰嗦了</p></blockquote><p><a href="https://link.jianshu.com?t=http://blog.csdn.net/leikezhu1981/article/details/47418011" target="_blank" rel="noopener">Xcode 7新的特性Lightweight Generics 轻量级泛型与__kindof修饰符</a></p><h1 id="NS-REQUIRES-SUPER"><a href="#NS-REQUIRES-SUPER" class="headerlink" title="NS_REQUIRES_SUPER"></a>NS_REQUIRES_SUPER</h1><blockquote><p>字面上必须继承父类的方法(有待考证)</p></blockquote><h1 id="SDK-HIDE-TIDE"><a href="#SDK-HIDE-TIDE" class="headerlink" title="SDK_HIDE_TIDE"></a>SDK_HIDE_TIDE</h1><blockquote><p>暂定 没查到干什么的 字面上是在SDK隐藏</p></blockquote><h1 id="NS-DESIGNATED-INITIALIZER"><a href="#NS-DESIGNATED-INITIALIZER" class="headerlink" title="NS_DESIGNATED_INITIALIZER"></a>NS_DESIGNATED_INITIALIZER</h1><blockquote><p>用来定义一些初始化方法只能过来这些标记的初始化</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NS-ASSUME-NONNULL-BEGIN-amp-amp-NS-ASSUME-NONNULL-END&quot;&gt;&lt;a href=&quot;#NS-ASSUME-NONNULL-BEGIN-amp-amp-NS-ASSUME-NONNULL-END&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="iOS" scheme="https://bianchengme.gitee.io/bianchengme/categories/iOS/"/>
    
    <category term="Objective-C" scheme="https://bianchengme.gitee.io/bianchengme/categories/iOS/Objective-C/"/>
    
    
    <category term="iOS" scheme="https://bianchengme.gitee.io/bianchengme/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://bianchengme.gitee.io/bianchengme/tags/Objective-C/"/>
    
  </entry>
  
</feed>
