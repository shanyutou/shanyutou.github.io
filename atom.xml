<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山芋头</title>
  
  <subtitle>记录和分享能创造价值</subtitle>
  <link href="https://shanyutou.github.io/atom.xml" rel="self"/>
  
  <link href="https://shanyutou.github.io/"/>
  <updated>2021-09-07T09:26:03.698Z</updated>
  <id>https://shanyutou.github.io/</id>
  
  <author>
    <name>jmme@foxmail.com</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM 逃逸分析优化</title>
    <link href="https://shanyutou.github.io/2021/09/07/JVM-%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%BC%98%E5%8C%96/"/>
    <id>https://shanyutou.github.io/2021/09/07/JVM-%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%BC%98%E5%8C%96/</id>
    <published>2021-09-07T02:52:06.000Z</published>
    <updated>2021-09-07T09:26:03.698Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“Java 中的对象是否都分配在堆内存中？”<br>——“不尽然”</p></blockquote><p>Java 中对象的创建一般会由堆内存去分配内存空间来进行存储，在堆内存空间不足的时候，GC 便会对堆内存进行垃圾回收，如果 GC 运行的次数过多，便会影响程序的性能,并且堆内存为所有线程共享，存再同步问题；所以 <strong>“逃逸分析”</strong> 由此诞生，它的目的就是判断哪些对象是可以存储在栈内存中而不用存储在堆内存中的，从而让其随着线程的消逝而消逝，进而减少了 GC 发生的频率，这也是常见的 JVM 优化技巧之一。</p><h1 id="什么是逃逸分析"><a href="#什么是逃逸分析" class="headerlink" title="什么是逃逸分析"></a>什么是逃逸分析</h1><p>逃逸分析（Escape Analysis）简单来讲就是，Java Hotspot 虚拟机可以分析新创建对象的使用范围，并决定是否在 Java 堆上分配内存的一项技术。</p><p>在方法中创建对象之后，如果这个对象 <strong>实例</strong> 除了在方法体中还在其它地方被引用了，此时如果方法执行完毕，由于该对象有被引用，所以 GC 有可能是无法立即回收的，此时便成为 <strong>内存逃逸现象</strong>。</p><h1 id="如何使用逃逸分析"><a href="#如何使用逃逸分析" class="headerlink" title="如何使用逃逸分析"></a>如何使用逃逸分析</h1><ul><li>开启逃逸分析：<code>-XX:+DoEscapeAnalysis</code></li><li>关闭逃逸分析：<code>-XX:-DoEscapeAnalysis</code></li><li>显示分析结果：<code>-XX:+PrintEscapeAnalysis</code></li></ul><p>逃逸分析的作用，就是筛选出没有发生逃逸的对象，从而对它们进行以下三方面的优化：</p><h3 id="同步消除（锁消除）"><a href="#同步消除（锁消除）" class="headerlink" title="同步消除（锁消除）"></a>同步消除（锁消除）</h3><p>因为同步锁是非常消耗性能的，所以当编译器确定一个对象没有发生逃逸时，它便会移除该对象的同步锁。</p><p>在 JDK1.8 中是默认开启的，但是要建立在已开启逃逸分析的基础之上。</p><ul><li>开启锁消除：<code>-XX:+EliminateLocks</code>（JDK8默认开启）</li><li>关闭锁消除：<code>-XX:-EliminateLocks</code></li></ul><h3 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h3><p>首先要明白标量和聚合量，基础类型和对象的引用可以理解为标量，它们不能被进一步分解。而能被进一步分解的量就是聚合量，比如：对象。</p><p>对象是聚合量，它又可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做标量替换。</p><p>这样，如果一个对象没有发生逃逸，那压根就不用创建它，只会在栈或者寄存器上创建它用到的成员标量，节省了内存空间，也提升了应用程序性能。</p><p>标量替换在 JDK1.8 中也是默认开启的，但是同样也要建立在已开启逃逸分析的基础之上。</p><ul><li>开启标量替换：<code>-XX:+EliminateAllocations</code></li><li>关闭标量替换：<code>-XX:-EliminateAllocations</code></li><li>显示标量替换详情：<code>-XX:+PrintEliminateAllocations</code></li></ul><h3 id="栈内存分配"><a href="#栈内存分配" class="headerlink" title="栈内存分配"></a>栈内存分配</h3><p>栈内存分配很好理解，在上文中提过，就是将原本分配在堆内存上的对象转而分配在栈内存上，这样就可以减少堆内存的占用，从而减少 GC 的频次。</p><h1 id="逃逸分析的优势"><a href="#逃逸分析的优势" class="headerlink" title="逃逸分析的优势"></a>逃逸分析的优势</h1><p>我们通过如下代码测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shanyutou.github.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: EscapeAnalysisTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: https://shanyutou.github.io 逸出分析测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/09/07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EscapeAnalysisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> t1 = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            allot();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> t2 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(t2-t1);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jet jet = <span class="keyword">new</span> Jet();</span><br><span class="line"><span class="comment">//        synchronized (jet) &#123;</span></span><br><span class="line"><span class="comment">//            jet.name = "jet Chen";</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Jet</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step-1：测试开启逃逸"><a href="#Step-1：测试开启逃逸" class="headerlink" title="Step 1：测试开启逃逸"></a>Step 1：测试开启逃逸</h4><p>环境是 jdk1.8，默认开启了逃逸分析，所以直接运行，得到结果如下，程序耗时 3 毫秒，没有发生GC。</p><p><img src="E:%5Chexo%5Chexo_boke%5Csource_posts%5CJVM-%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%BC%98%E5%8C%96%5C01.png" alt=""></p><h4 id="Step-2：测试关闭逃逸"><a href="#Step-2：测试关闭逃逸" class="headerlink" title="Step 2：测试关闭逃逸"></a>Step 2：测试关闭逃逸</h4><blockquote><p>-XX:-DoEscapeAnalysis</p></blockquote><p>得到结果如下，程序耗时 312 毫秒产生一次GC。</p><p><img src="E:%5Chexo%5Chexo_boke%5Csource_posts%5CJVM-%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%BC%98%E5%8C%96%5C02.png" alt=""></p><p>所以，从代码的执行时间（3 毫秒 VS 400 毫秒），还是从GC分析，在上述场景下，开启逃逸分析是有正向益的。</p><h4 id="Step-3：测试标量替换"><a href="#Step-3：测试标量替换" class="headerlink" title="Step 3：测试标量替换"></a>Step 3：测试标量替换</h4><blockquote><p>-XX:+DoEscapeAnalysis -XX:+EliminateAllocations  //耗时4<br>-XX:+DoEscapeAnalysis -XX:-EliminateAllocations  //耗时306<br>-XX:-DoEscapeAnalysis -XX:+EliminateAllocations  //耗时310<br>-XX:-DoEscapeAnalysis -XX:-EliminateAllocations  //耗时310</p></blockquote><p>在上述极端场景下，开启和关闭标量替换对于性能的影响也是满巨大的，另外，同时也验证了标量替换功能生效的前提是逃逸分析已经开启，否则没有意义。</p><h4 id="Step-4：测试锁消除"><a href="#Step-4：测试锁消除" class="headerlink" title="Step 4：测试锁消除"></a>Step 4：测试锁消除</h4><p>测试锁消除，我们需要简单调整下代码，即给 allot() 方法中的内容加锁处理，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Jet jet = <span class="keyword">new</span> Jet();</span><br><span class="line">    <span class="keyword">synchronized</span> (jet) &#123;</span><br><span class="line">        jet.name = <span class="string">"jet Chen"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>-XX:+DoEscapeAnalysis -XX:+EliminateLocks  //耗时4<br>-XX:+DoEscapeAnalysis -XX:-EliminateLocks  //耗时308<br>-XX:-DoEscapeAnalysis -XX:+EliminateLocks  //耗时1492<br>-XX:-DoEscapeAnalysis -XX:-EliminateLocks  //耗时1493<br>然后我们运行测试代码，测试结果也很明显，在上述场景下，开启和关闭锁消除对程序性能的影响也是巨大的。同时也验证了标量替换功能生效的前提是逃逸分析已经开启，否则没有意义。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>逃逸分析的原理理解起来其实很简单，但 JVM 在实际应用过程中，还是有诸多因素需要考虑的。</p><p>比如，逃逸分析不能在静态编译时进行，必须在 JIT 里完成。原因大致是：与 Java 的动态性有冲突。因为你可以在运行时，通过动态代理改变一个类的行为，此时，逃逸分析是无法得知类已经变化了。总之就是：因为只有当收集到足够的运行数据时，JVM 才可以更好地判断对象是否发生了逃逸。（参考大佬的解释：<a href="https://www.zhihu.com/ques....）" target="_blank" rel="noopener">https://www.zhihu.com/ques....）</a></p><p>当然，逃逸分析并不是没有劣势的，因为逃逸分析是需要消耗一定的性能去执行分析的，所以说如果方法中的对象全都是处于逃逸状态，那么就没有起到优化的作用，从而就白白损失了这部分的性能消耗。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;“Java 中的对象是否都分配在堆内存中？”&lt;br&gt;——“不尽然”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java 中对象的创建一般会由堆内存去分配内存空间来进行存储，在堆内存空间不足的时候，GC 便会对堆内存进行垃圾回收，如果 GC 运行的次</summary>
      
    
    
    
    <category term="JAVA" scheme="https://shanyutou.github.io/categories/JAVA/"/>
    
    <category term="JVM" scheme="https://shanyutou.github.io/categories/JAVA/JVM/"/>
    
    
    <category term="JAVA" scheme="https://shanyutou.github.io/tags/JAVA/"/>
    
    <category term="JVM" scheme="https://shanyutou.github.io/tags/JVM/"/>
    
    <category term="优化" scheme="https://shanyutou.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Nacos通过Docke部署</title>
    <link href="https://shanyutou.github.io/2021/07/02/Nacos%E9%80%9A%E8%BF%87Docke%E9%83%A8%E7%BD%B2/"/>
    <id>https://shanyutou.github.io/2021/07/02/Nacos%E9%80%9A%E8%BF%87Docke%E9%83%A8%E7%BD%B2/</id>
    <published>2021-07-02T01:28:53.000Z</published>
    <updated>2021-07-02T01:46:47.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><h6 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure><h6 id="2-挂载目录"><a href="#2-挂载目录" class="headerlink" title="2.挂载目录"></a>2.挂载目录</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/data/nacos/logs/ ~/data/nacos/init.d/   <span class="comment">#创建目录          </span></span><br><span class="line">vim ~/data/nacos/init.d/application.properties        <span class="comment">#修改配置文件</span></span><br></pre></td></tr></table></figure><p>添加如下参数:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="meta">server.servlet.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8848</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://xx.xx.xx.x:3306/nacos_devtest_prod?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">user</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">nacos.cmdb.dumpTaskInterval</span>=<span class="string">3600</span></span><br><span class="line"><span class="meta">nacos.cmdb.eventTaskInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">nacos.cmdb.labelTaskInterval</span>=<span class="string">300</span></span><br><span class="line"><span class="meta">nacos.cmdb.loadDataAtStart</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">management.metrics.export.elastic.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">management.metrics.export.influx.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">server.tomcat.accesslog.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">server.tomcat.accesslog.pattern</span>=<span class="string">%h %l %u %t "%r" %s %b %D %&#123;User-Agent&#125;i</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">nacos.security.ignore.urls</span>=<span class="string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/login,/v1/console/health/**,/v1/cs/**,/v1/ns/**,/v1/cmdb/**,/actuator/**,/v1/console/server/**</span></span><br><span class="line"><span class="meta">nacos.naming.distro.taskDispatchThreadCount</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">nacos.naming.distro.taskDispatchPeriod</span>=<span class="string">200</span></span><br><span class="line"><span class="meta">nacos.naming.distro.batchSyncKeyCount</span>=<span class="string">1000</span></span><br><span class="line"><span class="meta">nacos.naming.distro.initDataRatio</span>=<span class="string">0.9</span></span><br><span class="line"><span class="meta">nacos.naming.distro.syncRetryDelay</span>=<span class="string">5000</span></span><br><span class="line"><span class="meta">nacos.naming.data.warmup</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">nacos.naming.expireInstance</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>:wq 保存退出</p><h6 id="3-启动容器"><a href="#3-启动容器" class="headerlink" title="3.启动容器"></a>3.启动容器</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker  run \</span><br><span class="line">--name nacos -d \</span><br><span class="line">-p <span class="number">8848</span>:<span class="number">8848</span> \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">--restart=always \</span><br><span class="line">-e JVM_XMS=<span class="number">256</span>m \</span><br><span class="line">-e JVM_XMX=<span class="number">256</span>m \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e PREFER_HOST_MODE=hostname \</span><br><span class="line">-v ~<span class="regexp">/data/</span>nacos/logs/:<span class="regexp">/home/</span>nacos/logs \</span><br><span class="line">-v ~<span class="regexp">/data/</span>nacos/init.d/application.properties:<span class="regexp">/home/</span>nacos/init.d/application.properties \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink&quot; title=&quot;方式一&quot;&gt;&lt;/a&gt;方式一&lt;/h2&gt;&lt;h6 id=&quot;1-拉取镜像&quot;&gt;&lt;a href=&quot;#1-拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;1.拉取镜像&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Docker" scheme="https://shanyutou.github.io/categories/Docker/"/>
    
    <category term="Nacos" scheme="https://shanyutou.github.io/categories/Docker/Nacos/"/>
    
    
    <category term="Docker" scheme="https://shanyutou.github.io/tags/Docker/"/>
    
    <category term="nacos" scheme="https://shanyutou.github.io/tags/nacos/"/>
    
    <category term="部署" scheme="https://shanyutou.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装redis</title>
    <link href="https://shanyutou.github.io/2021/07/01/Docker%E5%AE%89%E8%A3%85redis/"/>
    <id>https://shanyutou.github.io/2021/07/01/Docker%E5%AE%89%E8%A3%85redis/</id>
    <published>2021-07-01T06:22:32.000Z</published>
    <updated>2021-09-08T01:56:10.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、拉取镜像"><a href="#1、拉取镜像" class="headerlink" title="1、拉取镜像"></a>1、拉取镜像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><h1 id="2、创建容器"><a href="#2、创建容器" class="headerlink" title="2、创建容器"></a>2、创建容器</h1><h2 id="创建本地环境映射"><a href="#创建本地环境映射" class="headerlink" title="创建本地环境映射"></a>创建本地环境映射</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~&#x2F;data&#x2F;redis&#x2F;dada ~&#x2F;data&#x2F;redis&#x2F;etc&#x2F;</span><br><span class="line">cd ~&#x2F;data&#x2F;redis&#x2F;etc&#x2F;</span><br><span class="line">vi redis.conf</span><br><span class="line"></span><br><span class="line">##文件内内容</span><br><span class="line">daemonize no</span><br><span class="line">requirepass 123456</span><br><span class="line">appendonly yes</span><br><span class="line">tcp-keepalive 300</span><br></pre></td></tr></table></figure><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 6379:6379 --name redis -v ~/data/redis/etc/redis.conf:/usr/local/etc/redis/redis.conf -v ~/data/redis/data:/data -d redis:6.2 redis-server /usr/local/etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure><blockquote><p><code>redis-server /usr/local/etc/redis/redis.conf --appendonly yes</code> 运行命令追加在最后</p></blockquote><p>-d, –detach=false， 指定容器运行于前台还是后台，默认为 false<br>-i, –interactive=false， 打开 STDIN，用于控制台交互<br>-t, –tty=false， 分配 tty 设备，该可以支持终端登录，默认为 false<br>-u, –user=””， 指定容器的用户<br>-a, –attach=[]， 登录容器（必须是以 docker run -d 启动的容器）<br>-w, –workdir=””， 指定容器的工作目录<br>-c, –cpu-shares=0， 设置容器 CPU 权重，在 CPU 共享场景使用<br>-e, –env=[]， 指定环境变量，容器中可以使用该环境变量<br>-m, –memory=””， 指定容器的内存上限<br>-P, –publish-all=false， 指定容器暴露的端口<br>-p, –publish=[]， 指定容器暴露的端口<br>-h, –hostname=””， 指定容器的主机名<br>-v, –volume=[]， 给容器挂载存储卷，挂载到容器的某个目录<br>–volumes-from=[]， 给容器挂载其他容器上的卷，挂载到容器的某个目录<br>–cap-add=[]， 添加权限，权限清单详见：<a href="http://linux.die.net/man/7/capabilities" target="_blank" rel="noopener">http://linux.die.net/man/7/capabilities</a><br>–cap-drop=[]， 删除权限，权限清单详见：<a href="http://linux.die.net/man/7/capabilities" target="_blank" rel="noopener">http://linux.die.net/man/7/capabilities</a><br>–cidfile=””， 运行容器后，在指定文件中写入容器 PID 值，一种典型的监控系统用法<br>–cpuset=””， 设置容器可以使用哪些 CPU，此参数可以用来容器独占 CPU<br>–device=[]， 添加主机设备给容器，相当于设备直通<br>–dns=[]， 指定容器的 dns 服务器<br>–dns-search=[]， 指定容器的 dns 搜索域名，写入到容器的/etc/resolv.conf 文件<br>–entrypoint=””， 覆盖 image 的入口点<br>–env-file=[]， 指定环境变量文件，文件格式为每行一个环境变量<br>–expose=[]， 指定容器暴露的端口，即修改镜像的暴露端口<br>–link=[]， 指定容器间的关联，使用其他容器的 IP、env 等信息<br>–lxc-conf=[]， 指定容器的配置文件，只有在指定–exec-driver=lxc 时使用<br>–name=””， 指定容器名字，后续可以通过名字进行容器管理，links 特性需要使用名字<br>–net=”bridge”， 容器网络设置:<br>bridge 使用 docker daemon 指定的网桥<br>host //容器使用主机的网络<br>container:NAME_or_ID &gt;//使用其他容器的网路，共享 IP 和 PORT 等网络资源<br>none 容器使用自己的网络（类似–net=bridge），但是不进行配置<br>–privileged=false， 指定容器是否为特权容器，特权容器拥有所有的 capabilities<br>–restart=”no”， 指定容器停止后的重启策略:<br>no：容器退出时不重启<br>on-failure：容器故障退出（返回值非零）时重启<br>always：容器退出时总是重启<br>–rm=false， 指定容器停止后自动删除容器(不支持以 docker run -d 启动的容器)<br>–sig-proxy=true， 设置由代理接受并处理信号，但是 SIGCHLD、SIGSTOP 和 SIGKILL 不能被代理</p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis /bin/bash</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、拉取镜像&quot;&gt;&lt;a href=&quot;#1、拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;1、拉取镜像&quot;&gt;&lt;/a&gt;1、拉取镜像&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="docker" scheme="https://shanyutou.github.io/categories/docker/"/>
    
    <category term="redis" scheme="https://shanyutou.github.io/categories/docker/redis/"/>
    
    
    <category term="docker" scheme="https://shanyutou.github.io/tags/docker/"/>
    
    <category term="redis" scheme="https://shanyutou.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装mysql5.7</title>
    <link href="https://shanyutou.github.io/2021/07/01/Docker%E5%AE%89%E8%A3%85mysql5-7/"/>
    <id>https://shanyutou.github.io/2021/07/01/Docker%E5%AE%89%E8%A3%85mysql5-7/</id>
    <published>2021-07-01T06:22:32.000Z</published>
    <updated>2021-09-08T01:55:52.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、拉取镜像"><a href="#1、拉取镜像" class="headerlink" title="1、拉取镜像"></a>1、拉取镜像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h1 id="2-创建-mysql-容器"><a href="#2-创建-mysql-容器" class="headerlink" title="2.创建 mysql 容器"></a>2.创建 mysql 容器</h1><h2 id="在本地创建-mysql-的映射目录"><a href="#在本地创建-mysql-的映射目录" class="headerlink" title="在本地创建 mysql 的映射目录"></a>在本地创建 mysql 的映射目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/ubuntu/data/mysql/mysql57/data /home/ubuntu/data/mysql/mysql57/logs /home/ubuntu/data/mysql/mysql57/conf</span><br><span class="line">cd /root/mysql/conf</span><br><span class="line">touch my.cnf  #修改配置再my.cnf中写即可</span><br></pre></td></tr></table></figure><h2 id="创建容器-将数据-日志-配置文件映射到本机"><a href="#创建容器-将数据-日志-配置文件映射到本机" class="headerlink" title="创建容器,将数据,日志,配置文件映射到本机"></a>创建容器,将数据,日志,配置文件映射到本机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -v &#x2F;home&#x2F;ubuntu&#x2F;data&#x2F;mysql&#x2F;mysql57&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d -v &#x2F;home&#x2F;ubuntu&#x2F;data&#x2F;mysql&#x2F;mysql57&#x2F;logs:&#x2F;logs -v &#x2F;home&#x2F;ubuntu&#x2F;data&#x2F;mysql&#x2F;mysql57&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;root -d mysql:5.7</span><br></pre></td></tr></table></figure><p>-d: 后台运行容器</p><p>-p 将容器的端口映射到本机的端口</p><p>-v 将主机目录挂载到容器的目录</p><p>-e 设置参数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、拉取镜像&quot;&gt;&lt;a href=&quot;#1、拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;1、拉取镜像&quot;&gt;&lt;/a&gt;1、拉取镜像&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="Docker" scheme="https://shanyutou.github.io/categories/Docker/"/>
    
    <category term="mysql" scheme="https://shanyutou.github.io/categories/Docker/mysql/"/>
    
    
    <category term="docker" scheme="https://shanyutou.github.io/tags/docker/"/>
    
    <category term="mysl" scheme="https://shanyutou.github.io/tags/mysl/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程-volatile关键字理解</title>
    <link href="https://shanyutou.github.io/2021/06/30/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-volatile%E5%85%B3%E9%94%AE%E5%AD%97%E7%90%86%E8%A7%A3/"/>
    <id>https://shanyutou.github.io/2021/06/30/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-volatile%E5%85%B3%E9%94%AE%E5%AD%97%E7%90%86%E8%A7%A3/</id>
    <published>2021-06-30T06:17:17.000Z</published>
    <updated>2021-09-08T01:57:21.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景与概念"><a href="#背景与概念" class="headerlink" title="背景与概念"></a>背景与概念</h1><p>理解volatile这个Java关键字之前，需要先了解几个关于内存模型与并发编程的概念：</p><h2 id="内存模型的相关概念"><a href="#内存模型的相关概念" class="headerlink" title="内存模型的相关概念"></a>内存模型的相关概念</h2><p>在计算机执行程序过程中，指令的执行有CPU完成；指令对应的数据的存储有物理内存完成；而cpu的执行速度要比物理内存的读写速度快很多；如果CPU每次都要直接和物理内存交互，就会大大降低CPU的执行效率。为了解决这一问题，在CPU中加入了高速缓存。</p><p>在程序执行过程中，会将运算需要的数据从物理内存复制一份到CPU的高度缓存中，CPU在计算时候直接读写高速缓存中的数据；当运算结束后，再将高速缓存的数据更新到物理内存中。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>程序执行过程中，会先从物理内存中读取a的值，并放到告诉缓存中，然后CPU执行指令从高速缓存中读取，并对a的值加1，然后写入高速缓存中，最后将高速缓存中的值刷新到物理内存中。</p><p>这种方式在单线程中没有任何问题，但是在多线程中就存在问题：在多核CPU中，多线程可能运行在多个CPU中，所有每个线程运行时都会有自己的高速缓存，（单核中多线程也存在相应问题，是以线程调度的形式来分别执行的，只不过多核更好理解）上面的例子在多核多线程中运行：</p><p>加入有两个线程，a的初始值是0在两个线程执行后，a的值我们期望的是2，事实如此吗？<br>在实际运行中可能存在：两个线程同时运行，分别从物理内存中读取a的初始值0到高速缓存中，经过CPU执行指令后，两个线程的高速缓存中的值都是1，然后又分别更新到物理内存中，结果就是最后物理内存中的值是1。这就是著名的缓存一致性问题。通常称这种被多个线程访问的变量为共享变量。</p><p>也就是说，如果一个变量在多个CPU中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题。为了解决缓存不一致性问题，通常来说有以下2种解决方法：</p><p>　　- 通过在总线加LOCK#锁的方式</p><p>　　- 通过缓存一致性协议</p><p>这2种方式都是硬件层面上提供的方式。</p><p>在早期的CPU当中，是通过在总线上加LOCK#锁的形式来解决缓存不一致的问题。因为CPU和其他部件进行通信都是通过总线来进行的，如果对总线加LOCK#锁的话，也就是说阻塞了其他CPU对其他部件访问（如内存），从而使得只能有一个CPU能使用这个变量的内存。比如上面例子中 如果一个线程在执行 a = a +1，如果在执行这段代码的过程中，在总线上发出了LCOK#锁的信号，那么只有等待这段代码完全执行完毕之后，其他CPU才能从变量i所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。</p><p>但是上面的方式会有一个问题，由于在锁住总线期间，其他CPU无法访问内存，导致效率低下。</p><p>所以就出现了缓存一致性协议。最出名的就是Intel 的MESI协议，MESI协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p><h2 id="并发编程的三个概念"><a href="#并发编程的三个概念" class="headerlink" title="并发编程的三个概念"></a>并发编程的三个概念</h2><p>使用多线程执行程序，经常面临并发编程的问题：原子性问题、可见性问题、有序性问题。</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>即一个操作或者多个操作要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行<br>举个最简单的例子，大家想一下假如为一个32位的变量赋值过程不具备原子性的话，会发生什么后果？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i &#x3D; 9;</span><br></pre></td></tr></table></figure><p>假若一个线程执行到这个语句时，我暂且假设为一个32位的变量赋值包括两个过程：为低16位赋值，为高16位赋值。<br>那么就可能发生一种情况：当将低16位数值写入之后，突然被中断，而此时又有一个线程去读取i的值，那么读取到的就是错误的数据。</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。<br>上文中的<code>a = a + 1;</code>在并发中，就是存在可见性问题；</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>有序性：即程序执行的顺序按照代码的先后顺序执行。<br>令重排序，一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。<br>处理器在进行重排序时是会考虑指令之间的数据依赖性，所以对单个线程无影响，但是并发编程有影响：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1:</span></span><br><span class="line">context = loadContext();   <span class="comment">//语句1</span></span><br><span class="line">inited = <span class="keyword">true</span>;             <span class="comment">//语句2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2:</span></span><br><span class="line"><span class="keyword">while</span>(!inited )&#123;</span><br><span class="line">  sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><p>上面代码中，由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时context并没有被初始化，就会导致程序出错。</p><p>也就是说，要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p><h2 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h2><p>在Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。那么Java内存模型规定了哪些东西呢，它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，在java内存模型中，也会存在原子性问题、缓存一致性问题和指令重排序的问题。</p><blockquote><p>Java内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。</p></blockquote><h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h2><p>　一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了在并发程序中两个特性：</p><ul><li>保证可见性；</li><li>禁止指令重排；<blockquote><p>注意并不能保证原子性；</p></blockquote></li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="可见性-1"><a href="#可见性-1" class="headerlink" title="可见性"></a>可见性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1</span></span><br><span class="line"><span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span>(!stop)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2</span></span><br><span class="line">stop = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p>这段代码是很典型的一段代码，很多人在中断线程时可能都会采用这种标记办法。但是事实上，这段代码会完全运行正确么？即一定会将线程中断么？不一定，也许在大多数时候，这个代码能够把线程中断，但是也有可能会导致无法中断线程（虽然这个可能性很小，但是只要一旦发生这种情况就会造成死循环了）。</p><p>下面解释一下这段代码为何有可能导致无法中断线程。在前面已经解释过，每个线程在运行过程中都有自己的工作内存，那么线程1在运行的时候，会将stop变量的值拷贝一份放在自己的工作内存当中。</p><p>那么当线程2更改了stop变量的值之后，但是还没来得及写入主存当中，线程2转去做其他事情了，那么线程1由于不知道线程2对stop变量的更改，因此还会一直循环下去。</p><p>但是用volatile修饰之后就变得不一样了：</p><p>第一：使用volatile关键字会强制将修改的值立即写入主存；</p><p>第二：使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量stop的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；</p><p>第三：由于线程1的工作内存中缓存变量stop的缓存行无效，所以线程1再次读取变量stop的值时会去主存读取。</p><p>那么在线程2修改stop值时（当然这里包括2个操作，修改线程2工作内存中的值，然后将修改后的值写入内存），会使得线程1的工作内存中缓存变量stop的缓存行无效，然后线程1读取时，发现自己的缓存行无效，它会等待缓存行对应的主存地址被更新之后，然后去对应的主存读取最新的值。</p><p>那么线程1读取到的就是最新的正确的值。</p><h2 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h2><p>在前面提到volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性。</p><p>volatile关键字禁止指令重排序有两层意思：</p><p>1）当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；</p><p>2）在进行指令优化时，不能将在对volatile变量访问的语句放在其后面执行，也不能把volatile变量后面的语句放到其前面执行。</p><p>可能上面说的比较绕，举个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x、y为非volatile变量</span></span><br><span class="line"><span class="comment">//flag为volatile变量</span></span><br><span class="line"> </span><br><span class="line">x = <span class="number">2</span>;        <span class="comment">//语句1</span></span><br><span class="line">y = <span class="number">0</span>;        <span class="comment">//语句2</span></span><br><span class="line">flag = <span class="keyword">true</span>;  <span class="comment">//语句3</span></span><br><span class="line">x = <span class="number">4</span>;         <span class="comment">//语句4</span></span><br><span class="line">y = -<span class="number">1</span>;       <span class="comment">//语句5</span></span><br></pre></td></tr></table></figure><p>由于flag变量为volatile变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。</p><p>并且volatile关键字能保证，执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。</p><p>那么我们回到前面举的一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1:</span></span><br><span class="line">context = loadContext();   <span class="comment">//语句1</span></span><br><span class="line">inited = <span class="keyword">true</span>;             <span class="comment">//语句2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2:</span></span><br><span class="line"><span class="keyword">while</span>(!inited )&#123;</span><br><span class="line">  sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><p>前面举这个例子的时候，提到有可能语句2会在语句1之前执行，那么久可能导致context还没被初始化，而线程2中就使用未初始化的context去进行操作，导致程序出错。</p><p>这里如果用volatile关键字对inited变量进行修饰，就不会出现这种问题了，因为当执行到语句2时，必定能保证context已经初始化完毕。</p><h2 id="原子性-1"><a href="#原子性-1" class="headerlink" title="原子性"></a>原子性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家想一下这段程序的输出结果是多少？也许有些朋友认为是10000。但是事实上运行它会发现每次运行结果都不一致，都是一个小于10000的数字。</p><p>可能有的朋友就会有疑问，不对啊，上面是对变量inc进行自增操作，由于volatile保证了可见性，那么在每个线程中对inc自增完之后，在其他线程中都能看到修改后的值啊，所以有10个线程分别进行了1000次操作，那么最终inc的值应该是1000*10=10000。</p><p>这里面就有一个误区了，volatile关键字能保证可见性没有错，但是上面的程序错在没能保证原子性。可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。</p><p>在前面已经提到过，自增操作是不具备原子性的，它包括读取变量的原始值、进行加1操作、写入工作内存。那么就是说自增操作的三个子操作可能会分割开执行，就有可能导致下面这种情况出现：</p><p>假如某个时刻变量inc的值为10，</p><p>线程1对变量进行自增操作，线程1先读取了变量inc的原始值，然后线程1被阻塞了；</p><p>然后线程2对变量进行自增操作，线程2也去读取变量inc的原始值，由于线程1只是对变量inc进行读取操作，而没有对变量进行修改操作，所以不会导致线程2的工作内存中缓存变量inc的缓存行无效，所以线程2会直接去主存读取inc的值，发现inc的值时10，然后进行加1操作，并把11写入工作内存，最后写入主存。</p><p>然后线程1接着进行加1操作，由于已经读取了inc的值，注意此时在线程1的工作内存中inc的值仍然为10，所以线程1对inc进行加1操作后inc的值为11，然后将11写入工作内存，最后写入主存。</p><p>那么两个线程分别进行了一次自增操作后，inc只增加了1。</p><p>解释到这里，可能有朋友会有疑问，不对啊，前面不是保证一个变量在修改volatile变量时，会让缓存行无效吗？然后其他线程去读就会读到新的值，对，这个没错。这个就是上面的happens-before规则中的volatile变量规则，但是要注意，线程1对变量进行读取操作之后，被阻塞了的话，并没有对inc值进行修改。然后虽然volatile能保证线程2对变量inc的值读取是从内存中读取的，但是线程1没有进行修改，所以线程2根本就不会看到修改的值。</p><p>根源就在这里，自增操作不是原子性操作，而且volatile也无法保证对变量的任何操作都是原子性的。</p><p>实际中解决原子性问题方法有多种：</p><p>采用synchronized：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用Lock：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inc++;</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用AtomicInteger：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  AtomicInteger inc = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在java 1.5的java.util.concurrent.atomic包下提供了一些原子操作类，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。atomic是利用CAS来实现原子性操作的（Compare And Swap），CAS实际上是利用处理器提供的CMPXCHG指令实现的，而处理器执行CMPXCHG指令是一个原子性操作。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。通常来说，使用volatile必须具备以下2个条件：</p><p>1）对变量的写操作不依赖于当前值</p><p>2）该变量没有包含在具有其他变量的不变式中</p><p>实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。</p><p>事实上，我的理解就是上面的2个条件需要保证操作是原子性操作，才能保证使用volatile关键字的程序在并发时能够正确执行。</p><p>下面列举几个Java中使用volatile的几个场景。</p><p>1.状态标记量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(!flag)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    flag = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> inited = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//线程1:</span></span><br><span class="line">context = loadContext();  </span><br><span class="line">inited = <span class="keyword">true</span>;            </span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2:</span></span><br><span class="line"><span class="keyword">while</span>(!inited )&#123;</span><br><span class="line">sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><p>2.double check(双端监测),线程安全的高效单例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景与概念&quot;&gt;&lt;a href=&quot;#背景与概念&quot; class=&quot;headerlink&quot; title=&quot;背景与概念&quot;&gt;&lt;/a&gt;背景与概念&lt;/h1&gt;&lt;p&gt;理解volatile这个Java关键字之前，需要先了解几个关于内存模型与并发编程的概念：&lt;/p&gt;
&lt;h2 id=&quot;内</summary>
      
    
    
    
    <category term="java" scheme="https://shanyutou.github.io/categories/java/"/>
    
    <category term="多线程" scheme="https://shanyutou.github.io/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="并发编程" scheme="https://shanyutou.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="volatile" scheme="https://shanyutou.github.io/tags/volatile/"/>
    
    <category term="java" scheme="https://shanyutou.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>centos7 安装mysql5.7</title>
    <link href="https://shanyutou.github.io/2021/05/09/centos7-%E5%AE%89%E8%A3%85mysql5-7/"/>
    <id>https://shanyutou.github.io/2021/05/09/centos7-%E5%AE%89%E8%A3%85mysql5-7/</id>
    <published>2021-05-09T12:12:54.000Z</published>
    <updated>2021-09-07T07:26:31.782Z</updated>
    
    <content type="html"><![CDATA[<ol><li>创建用户和组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql </span><br><span class="line">useradd -g mysql -s &#x2F;sbin&#x2F;nologin mysql</span><br></pre></td></tr></table></figure><ol start="2"><li><p>解压到指定目录并重命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#dev.mysql.com 下载 linux 通用二进制包</span><br><span class="line">tar xzvf XXX.tar.gz &#x2F;usr&#x2F;local&#x2F;mysql</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&quot; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></li><li><p>创建数据目录，并配置权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;data&#x2F;mysql&#x2F;&#123;data,binlogs,log,etc,run&#125;</span><br><span class="line"></span><br><span class="line">ln -s &#x2F;data&#x2F;mysql&#x2F;data  &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line"></span><br><span class="line">ln -s &#x2F;data&#x2F;mysql&#x2F;binlogs  &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;binlogs</span><br><span class="line"></span><br><span class="line">ln -s &#x2F;data&#x2F;mysql&#x2F;log  &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;log</span><br><span class="line"></span><br><span class="line">ln -s &#x2F;data&#x2F;mysql&#x2F;etc  &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;etc</span><br><span class="line"></span><br><span class="line">ln -s &#x2F;data&#x2F;mysql&#x2F;run  &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;run</span><br><span class="line"></span><br><span class="line">chown -R mysql.mysql   &#x2F;data&#x2F;mysql&#x2F;  # 设置文件夹为第一步创建的用户组、用户的权限</span><br><span class="line"></span><br><span class="line">chown -R mysql.mysql   &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;&#123;data,binlogs,log,etc,run&#125; # 设置文件夹为第一步创建的用户组、用户</span><br></pre></td></tr></table></figure></li><li><p>删除系统自带的my.cnf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f &#x2F;etc&#x2F;my.cnf</span><br></pre></td></tr></table></figure></li><li><p>在/usr/local/mysql/etc/下创建my.cnf文件，加入如下参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port &#x3D; 3306</span><br><span class="line">socket &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;run&#x2F;mysql.sock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">pid_file &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;run&#x2F;mysql.pid</span><br><span class="line">datadir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line">socket &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;run&#x2F;mysql.sock</span><br><span class="line">max_connections &#x3D; 2048</span><br><span class="line">open_files_limit &#x3D; 65535</span><br><span class="line">skip-name-resolve</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">character-set-server &#x3D; utf8mb4</span><br><span class="line">collation-server &#x3D; utf8mb4_unicode_ci</span><br><span class="line">init_connect&#x3D;&#39;SET NAMES utf8mb4&#39;</span><br><span class="line">innodb_buffer_pool_size &#x3D; 1024M</span><br><span class="line">innodb_log_file_size &#x3D; 2048M</span><br><span class="line">innodb_file_per_table &#x3D; 1</span><br><span class="line">innodb_flush_log_at_trx_commit &#x3D; 0</span><br><span class="line">key_buffer_size &#x3D; 64M</span><br><span class="line">log-error &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;log&#x2F;mysql_error.log</span><br><span class="line">log-bin &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;binlogs&#x2F;mysql-bin</span><br><span class="line">slow_query_log &#x3D; 1</span><br><span class="line">slow_query_log_file &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;log&#x2F;mysql_slow_query.log</span><br><span class="line">long_query_time &#x3D; 5   </span><br><span class="line">tmp_table_size &#x3D; 32M</span><br><span class="line">max_heap_table_size &#x3D; 32M</span><br><span class="line">query_cache_type &#x3D; 0</span><br><span class="line">query_cache_size &#x3D; 0</span><br><span class="line">server-id&#x3D;1</span><br></pre></td></tr></table></figure></li><li><p>初始化mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --user&#x3D;mysql --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br></pre></td></tr></table></figure></li><li><p>记住生成的root密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#39;temporary password&#39; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;log&#x2F;mysql_error.log</span><br></pre></td></tr></table></figure></li></ol><ol start="9"><li><p>生成ssl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_ssl_rsa_setup --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>配置系统服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system </span><br><span class="line">touch mysqld.service #并加入以下内容</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;MySQL Server</span><br><span class="line">Documentation&#x3D;man:mysqld(8)</span><br><span class="line">Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">After&#x3D;syslog.target</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;mysql</span><br><span class="line">Group&#x3D;mysql</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">PIDFile&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;run&#x2F;mysqld.pid    </span><br><span class="line">\# Disable service start and stop timeout logic of systemd for mysqld service.</span><br><span class="line">TimeoutSec&#x3D;0</span><br><span class="line">\# Execute pre and post scripts as root</span><br><span class="line">PermissionsStartOnly&#x3D;true</span><br><span class="line">\# Needed to create system tables</span><br><span class="line">\#ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;mysqld_pre_systemd</span><br><span class="line">\# Start main service</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqld --daemonize --pid-file&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;run&#x2F;mysqld.pid $MYSQLD_OPTS</span><br><span class="line">\# Use this to switch malloc implementation</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;sysconfig&#x2F;mysql</span><br><span class="line">\# Sets open_files_limit</span><br><span class="line">LimitNOFILE &#x3D; 65535    </span><br><span class="line">Restart&#x3D;on-failure    </span><br><span class="line">RestartPreventExitStatus&#x3D;1    </span><br><span class="line">PrivateTmp&#x3D;false</span><br></pre></td></tr></table></figure></li><li><p>启动mysql服务以及开机自启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure></li><li><p>用步骤8中的root密码进行登录，第一次登陆需要设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;root&#39; # 只能通过该方法修改；</span><br></pre></td></tr></table></figure></li><li><p>过程中遇到错误</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;run&#x2F;mysql.sock&#39; (2)</span><br></pre></td></tr></table></figure><p>分析：在/usr/local/mysql/run/mysql.sock 位置没有找到mysql.sock；通过命令 <code>find / -name mysqld.sock</code> , 发现mysql。sock 位置不对，不是my.cnf配置位置，shy?  </p><p>一番尝试发现 my.cnf,可以发现问题源头,不光[client] 中配置socket地址，[mysqld]中也要配置socket地址（上文已经更正错误），还是没有理解配置。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;创建用户和组&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="mysql" scheme="https://shanyutou.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://shanyutou.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>openstack-horizon 快速本地运行</title>
    <link href="https://shanyutou.github.io/2021/03/12/openstack-horizon-%E5%BF%AB%E9%80%9F%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C/"/>
    <id>https://shanyutou.github.io/2021/03/12/openstack-horizon-%E5%BF%AB%E9%80%9F%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C/</id>
    <published>2021-03-12T08:31:55.000Z</published>
    <updated>2021-03-12T10:14:39.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="horizon-简介"><a href="#horizon-简介" class="headerlink" title="horizon 简介"></a>horizon 简介</h2><p>Horizon 为 Openstack 提供一个 WEB 前端的管理界面 (UI 服务 )通过 Horizon 所提供的 DashBoard 服务 , 管理员可以使用通过 WEB UI 对 Openstack 整体云环境进行管理 , 并可直观看到各种操作结果与运行状态。那作为开发者怎样快速上手horizon？其实很简单，so easy！</p><h2 id="horizon本地运行"><a href="#horizon本地运行" class="headerlink" title="horizon本地运行"></a>horizon本地运行</h2><h3 id="1、准备本地环境"><a href="#1、准备本地环境" class="headerlink" title="1、准备本地环境"></a>1、准备本地环境</h3><p>安装python，不会自己百度搜吧 。。。。</p><h3 id="2、创建虚拟环境，推荐用virtualenvwrapper；"><a href="#2、创建虚拟环境，推荐用virtualenvwrapper；" class="headerlink" title="2、创建虚拟环境，推荐用virtualenvwrapper；"></a>2、创建虚拟环境，推荐用virtualenvwrapper；</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装</span><br><span class="line">pip install virtualenvwrapper-win</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* 默认创建的虚拟环境位于C:\Users\username\envs,可以通过环境变量 WORKON_HOME来定制。</span><br><span class="line">* 通过计算机--&gt;属性--&gt;高级系统设置--&gt;环境变量--&gt;在系统变量中新建“变量名”：WORKON_HOME,变量值：“你自定义的路径”。</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行此命令创建第一个虚拟环境:</span><br><span class="line">mkvirtualenv venv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 列出所有虚拟环境</span><br><span class="line">lsvirtualenv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 激活虚拟环境</span><br><span class="line">workon venv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 进入虚拟环境目录</span><br><span class="line">cdvirtualenv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 进入虚拟环境的site-packages目录</span><br><span class="line">cdsitepackages</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 列出site-packages目录的所有软件包</span><br><span class="line">lssitepackages</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 停止虚拟环境</span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 删除虚拟环境</span><br><span class="line">rmvitualenv venv</span><br></pre></td></tr></table></figure><h3 id="3、-获取项目代码"><a href="#3、-获取项目代码" class="headerlink" title="3、 获取项目代码"></a>3、 获取项目代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># github clone 地址</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;openstack&#x2F;horizon.git</span><br></pre></td></tr></table></figure><h3 id="4、安装依赖"><a href="#4、安装依赖" class="headerlink" title="4、安装依赖"></a>4、安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;项目目录下:</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="5、配置项目"><a href="#5、配置项目" class="headerlink" title="5、配置项目"></a>5、配置项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建配置文件</span><br><span class="line">cp openstack_dashboard&#x2F;local&#x2F;local_settings.py.example openstack_dashboard&#x2F;local&#x2F;local_settings.py</span><br></pre></td></tr></table></figure><h3 id="6、运行项目"><a href="#6、运行项目" class="headerlink" title="6、运行项目"></a>6、运行项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;访问localhost:8000 打开登录界面；OK</span><br></pre></td></tr></table></figure><h3 id="7、过程中遇到的问题"><a href="#7、过程中遇到的问题" class="headerlink" title="7、过程中遇到的问题"></a>7、过程中遇到的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Exception has occurred: FilePermissionError</span><br><span class="line">Insecure permissions on key file &#x2F;mnt&#x2F;f&#x2F;work&#x2F;openstack&#x2F;horizon&#x2F;openstack_dashboard&#x2F;local&#x2F;.secret_key_store, should be 0600</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可能是linux文件权限错误，搜索后发现，local_settings.py使用了该文件，修改权限后依然不行，可能是我用了wsl的原因吧。</span><br><span class="line">&#x2F;&#x2F; 暂时先屏蔽 horizon&#x2F;openstack_dashboard&#x2F;local&#x2F;local_settings.py中对.secret_key_store的使用</span><br><span class="line"># SECRET_KEY &#x3D; secret_key.generate_or_read_from_file(os.path.join(LOCAL_PATH, &#39;.secret_key_store&#39;))</span><br><span class="line">SECRET_KEY&#x3D;&#39;GUM4T1AwQbF536JpKNQk10Vq0EpOIIudUQ0hpoAPBdTvDkgvUuuuGagAE4xajUVx&#39;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;horizon-简介&quot;&gt;&lt;a href=&quot;#horizon-简介&quot; class=&quot;headerlink&quot; title=&quot;horizon 简介&quot;&gt;&lt;/a&gt;horizon 简介&lt;/h2&gt;&lt;p&gt;Horizon 为 Openstack 提供一个 WEB 前端的管理界面 (</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>用npm安装sass教程和常见错误</title>
    <link href="https://shanyutou.github.io/2020/10/11/%E7%94%A8npm%E5%AE%89%E8%A3%85sass%E6%95%99%E7%A8%8B%E5%92%8C%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    <id>https://shanyutou.github.io/2020/10/11/%E7%94%A8npm%E5%AE%89%E8%A3%85sass%E6%95%99%E7%A8%8B%E5%92%8C%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</id>
    <published>2020-10-11T08:41:39.000Z</published>
    <updated>2021-09-07T07:26:31.786Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>用npm安装sass经常出错，原因是安装包比较大，并且源在国外，所以网络不好情况下容易安装失败；另外还依赖python环境，缺乏python环境也会安装失败。</p></blockquote><p>为保障安装成功，做一些配置即可安装成功：</p><p>方法一：使用淘宝源, 这样使用 npm install 安装 node-sass、electron 和 phantomjs 时都能自动从淘宝源上下载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm config set sass_binary_site&#x3D;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node-sass&#x2F;</span><br><span class="line">npm config set phantomjs_cdnurl&#x3D;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;phantomjs&#x2F;</span><br><span class="line">npm config set electron_mirror&#x3D;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;electron&#x2F;</span><br><span class="line">npm config set registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>方法二：安装cnpm &gt;&gt;&gt;  也是淘宝源的做法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p>方法三：使用VPN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm config set proxy (http:&#x2F;&#x2F;127.0.0.1:1080) #此处是VPN的代理地址</span><br><span class="line">npm i node-sass</span><br><span class="line"># 下载完成后删除 http 代理</span><br><span class="line">npm config delete proxy</span><br></pre></td></tr></table></figure><blockquote><p>在安装过程中注意查看全部报错信息，比如会提示找不到 Python、找不到某个版本等等错误。按照问题分析解决即可：</p></blockquote><h4 id="提示没有Python环境"><a href="#提示没有Python环境" class="headerlink" title="提示没有Python环境"></a>提示没有Python环境</h4><p>这个很好解决，安装Pyhon，并确保配置好环境变量即可。</p><h4 id="提示找不到某个版本"><a href="#提示找不到某个版本" class="headerlink" title="提示找不到某个版本"></a>提示找不到某个版本</h4><p>安装的时候如果指定了某个版本，可能淘宝源上没有指定要的版本，访问<a href="https://npm.taobao.org/mirrors/node-sass/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node-sass/</a> 看存在哪些版本切换为相近版本即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;用npm安装sass经常出错，原因是安装包比较大，并且源在国外，所以网络不好情况下容易安装失败；另外还依赖python环境，缺乏python环境也会安装失败。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为保障安装成功，做一些配置即可安装成功：&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>项目基线目录-方便项目管理与交接</title>
    <link href="https://shanyutou.github.io/2020/10/11/%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%BA%BF%E7%9B%AE%E5%BD%95-%E6%96%B9%E4%BE%BF%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BA%A4%E6%8E%A5/"/>
    <id>https://shanyutou.github.io/2020/10/11/%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%BA%BF%E7%9B%AE%E5%BD%95-%E6%96%B9%E4%BE%BF%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BA%A4%E6%8E%A5/</id>
    <published>2020-10-11T06:57:25.000Z</published>
    <updated>2021-09-07T07:26:31.786Z</updated>
    
    <content type="html"><![CDATA[<p><strong>基线 (Baseline)</strong> 说起 .  基线是软件文档或源码 ( 或其它产出物 ) 的一个稳定版本 , 它是进一步开发的基础 . 所以 , 当基线形成后 , 项目负责 SCM 的人需要通知相关人员基线已经形成 , 并且哪儿可以找到这基线了的版本 . 这个过程可被认为内部的发布 . 至于对外的正式发布 , 更是应当从基线了的版本中发布 .  </p><p>​    基线是项目储存库中每个工件版本在特定时期的一个 “ 快照 ” 。它提供一个正式标准，随后的工作基于此标准，并且只有经过授权后才能变更这个标准。建立一个初始基线后，以后每次对其进行的变更都将记录为一个差值，直到建成下一个基线。</p><p>​    参与项目的开发人员将基线所代表的各版本的目录和文件填入他们的工作区。随着工作的进展，基线将合并自从上次建立基线以来开发人员已经交付的工作。变更一旦并入基线，开发人员就采用新的基线，以与项目中的变更保持同步。调整基线将把集成工作区中的文件并入开发工作区。</p><p>​    建立基线的三大原因是：<strong>重现性、可追踪性和报告。</strong></p><p>​    重现性是指及时返回并重新生成软件系统给定发布版的能力，或者是在项目中的早些时候重新生成开发环境的能力。可追踪性建立项目工件之间的前后继承关系。其目的在于确保设计满足要求、代码实施设计以及用正确代码编译可执行文件。报告来源于一个基线内容同另一个基线内容的比较。基线比较有助于调试并生成发布说明。</p><p>​    建立基线后，需要标注所有组成构件和基线，以便能够对其进行识别和重新建立。</p><blockquote><p>建立基线有以下几个优点：</p></blockquote><ul><li>基线为开发工件提供了一个定点和快照。  </li><li>新项目可以从基线提供的定点之中建立。作为一个单独分支，新项目将与随后对原始项目（在主要分支上）所进行的变更进行隔离。  </li><li>各开发人员可以将建有基线的构件作为他在隔离的私有工作区中进行更新的基础。  </li><li>当认为更新不稳定或不可信时，基线为团队提供一种取消变更的方法。  </li><li>您可以利用基线重新建立基于某个特定发布版本的配置，这样也可以重现已报告的错误。  </li></ul><blockquote><p>使用  </p></blockquote><p>​    定期建立基线以确保各开发人员的工作保持同步。但是，在项目过程中，应该在每次迭代结束点（次要里程碑），以及与生命周期各阶段结束点相关联的主要里程碑处定期建立基线：</p><p>​    生命周期目标里程碑（先启阶段）<br>​    生命周期构架里程碑（精化阶段）<br>​    初始操作性能里程碑（构建阶段）<br>​    产品发布里程碑（产品化阶段）</p><blockquote><p>基线目录结构</p></blockquote><p>​    <img src="img1.png" alt="项目目录结构"></p><p>克隆地址 <a href="https://github.com/shanyutou/Project-Baseline-Catalogue.git" target="_blank" rel="noopener">https://github.com/shanyutou/Project-Baseline-Catalogue.git</a></p><p>项目中同时不断积累各种文档模板与画图方法，目的在于提高程序员的文档能力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;基线 (Baseline)&lt;/strong&gt; 说起 .  基线是软件文档或源码 ( 或其它产出物 ) 的一个稳定版本 , 它是进一步开发的基础 . 所以 , 当基线形成后 , 项目负责 SCM 的人需要通知相关人员基线已经形成 , 并且哪儿可以找到这基线了的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring boot api 生成工具 apiDoc vs swagger and JApiDocs</title>
    <link href="https://shanyutou.github.io/2020/09/09/Spring-boot-api-%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7-apiDoc-vs-swagger-and-JApiDocs/"/>
    <id>https://shanyutou.github.io/2020/09/09/Spring-boot-api-%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7-apiDoc-vs-swagger-and-JApiDocs/</id>
    <published>2020-09-09T14:19:23.000Z</published>
    <updated>2021-09-07T07:26:31.782Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>曾经看过这样一个笑话：程序员最讨厌写文档，比这个还讨厌的事情就是，别人居然不写文档。</p></blockquote><p>文档的确是个令猿头疼的东西哇，但是文档的重要性也是不言而喻。这里就给大家安利两款比较好用的接口文档生成工具：</p><ul><li>apidoc 比较好用的静态生成工具，生成静态api文档非常合适；</li><li>swagger功能强大的动态api工具，带有调试功能，knife4j是对swaggerUI封装的优化，更适合国人风格；</li><li>Japidocs 新开源的静态生成工具用的人虽然没有上面两个多，但是只需要java环境即可，也是不错的api生成工具，值得尝试。</li></ul><h3 id="1-apidoc"><a href="#1-apidoc" class="headerlink" title="1. apidoc"></a>1. apidoc</h3><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>apidoc是一款可以由源代码中的注释直接自动生成api接口文档的工具，它几乎支持目前主流的所有风格的注释。</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>首先你的环境必须要安装了node.js.然后通过以下的命令安装apidoc：</p><blockquote><p>npm install apidoc -g</p></blockquote><p>在你的项目根目录下添加apidoc.json文件，这个文件主要包含一些项目的描述信息，例如标题、介绍、版本等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;example&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;apiDoc basic example&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;Custom apiDoc browser title&quot;,</span><br><span class="line">  &quot;url&quot; : &quot;https:&#x2F;&#x2F;api.github.com&#x2F;v1&quot;</span><br><span class="line">&#125;</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><p>在你的代码注释里加入apidoc的注解，例如这样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    &#x2F;**</span><br><span class="line">     * @apiGroup Product</span><br><span class="line">     * @api &#123;GET&#125; &#x2F;product&#x2F;&#123;id&#125;  查询一个产品</span><br><span class="line">     * @apiDescription 指定产品id , 删除产品的全部信息，包括关联的schema</span><br><span class="line">     * @apiParam &#123;String&#125; id 产品id(必填*)</span><br><span class="line">     * @apiSuccessExample SuccessExample</span><br><span class="line">     * HTTP&#x2F;1.1 200</span><br><span class="line">     * &#123;</span><br><span class="line">     * id: &#39;xxx&#39;,</span><br><span class="line">     * modelId: &#39;xxxxx&#39;,</span><br><span class="line">     * name: &#39;xxx&#39;,</span><br><span class="line">     * intro: &#39;xxxx&#39;</span><br><span class="line">     * &#125;</span><br><span class="line">     * @apiErrorExample ErrorExample</span><br><span class="line">     * HTTP&#x2F;1.1 600</span><br><span class="line">     * 具体的异常信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @GetMapping(&quot;&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public Product getOneProduct(@PathVariable String id)</span><br><span class="line">    &#123;</span><br><span class="line">        return productServ.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line">12345678910111213141516171819202122</span><br></pre></td></tr></table></figure><p>常用的一些注解如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@api 定义API的请求方法、路径和名字</span><br><span class="line">@apiDescription 定义API的描述</span><br><span class="line">@apiGroup 定义API的分组</span><br><span class="line">@apiParam 定义API的参数</span><br><span class="line">@apiParamExample 参数请求的事例</span><br><span class="line">@apiVersion 版本</span><br><span class="line">@apiErrorExample API错误示例</span><br><span class="line">@apiSuccessExample API正常示例</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><p>然后就可以利用apidoc的命令来生成接口文档了：<br><img src="https://note.youdao.com/yws/api/personal/file/3E3A42C7488F4B28A55A571E547E667E?method=download&shareKey=f4cb66a4dda2c461904f3d17ac6d480f" alt="img"></p><p>然后当前目录下会生成一个新的apidoc目录，就是新生成的接口文档文件。<br><img src="https://note.youdao.com/yws/api/personal/file/A32C6142B85F4DF5B6573298C86676F8?method=download&shareKey=0473103f88076c2f2e8890f7fca8a8f9" alt="img"></p><p>打开 index.html 即可看到生成的接口文档：<br><img src="https://note.youdao.com/yws/api/personal/file/953F265590674B73989A418C301FFE67?method=download&shareKey=09939a1241d68066e42a2e3a3faec42b" alt="img"></p><h3 id="2-swagger"><a href="#2-swagger" class="headerlink" title="2. swagger"></a>2. swagger</h3><p>在这里俺用 springBoot 整合swagger2 做了个Restful Api 的接口小demo</p><p><a href="https://github.com/caigoumiao/springboot-swagger" target="_blank" rel="noopener">github 源码传送门☛☛☛</a></p><p>首先项目中得添加swagger2的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;io.springfox&#x2F;springfox-swagger2 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;io.springfox&#x2F;springfox-swagger-ui --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">123456789101112</span><br></pre></td></tr></table></figure><p>创建swagger2 的配置类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class SwaggerConfig</span><br><span class="line">&#123;</span><br><span class="line">    public Docket createApi()&#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.miao.springbootswagger&quot;))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建api的基本信息</span><br><span class="line">    private ApiInfo apiInfo()&#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;springBoot 整合 Swagger2 实例&quot;)</span><br><span class="line">                .description(&quot;更多技术内容分享见博客：https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_24871519&quot;)</span><br><span class="line">                .termsOfServiceUrl(&quot;https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_24871519&quot;)</span><br><span class="line">                .version(&quot;1.0&quot;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">1234567891011121314151617181920212223</span><br></pre></td></tr></table></figure><p>为接口添加swagger的注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">public class UserController</span><br><span class="line">&#123;</span><br><span class="line">    private static Map&lt;String, User&gt; users&#x3D;new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value &#x3D; &quot;添加用户&quot;, notes &#x3D; &quot;添加一条用户信息&quot;)</span><br><span class="line">    @ApiImplicitParam(name &#x3D; &quot;user&quot;, value &#x3D; &quot;用户详细实体user&quot;, required &#x3D; true, dataType &#x3D; &quot;User&quot;)</span><br><span class="line">    @PostMapping(&quot;&#x2F;add&quot;)</span><br><span class="line">    public User add(User user)&#123;</span><br><span class="line">        String id&#x3D;UUID();</span><br><span class="line">        while(users.containsKey(id))&#123;</span><br><span class="line">            id&#x3D;UUID();</span><br><span class="line">        &#125;</span><br><span class="line">        user.setId(id);</span><br><span class="line">        users.put(id, user);</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value &#x3D; &quot;获取一个用户&quot;, notes &#x3D; &quot;根据用户id获取用户信息&quot;)</span><br><span class="line">    @ApiImplicitParam(name &#x3D; &quot;id&quot;, value &#x3D; &quot;用户ID&quot;, required &#x3D; true, dataType &#x3D; &quot;String&quot;)</span><br><span class="line">    @GetMapping(&quot;&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public User getOne(@PathVariable String id)&#123;</span><br><span class="line">        if(!users.containsKey(id))&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value &#x3D; &quot;获取所有用户信息列表&quot;)</span><br><span class="line">    @GetMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    public List&lt;User&gt; getUsers()&#123;</span><br><span class="line">        return new ArrayList&lt;&gt;(users.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value &#x3D; &quot;更新用户信息&quot;)</span><br><span class="line">    @ApiImplicitParam(name &#x3D; &quot;user&quot;, value &#x3D; &quot;用户信息实体&quot;,required &#x3D; true, dataType &#x3D; &quot;User&quot;)</span><br><span class="line">    @PutMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    public User updateOne(User u)&#123;</span><br><span class="line">        User tmp &#x3D; users.get(u.getId());</span><br><span class="line">        if(tmp &#x3D;&#x3D; null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if(u.getName()!&#x3D;null)&#123;</span><br><span class="line">            tmp.setName(u.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        if(u.getAge() !&#x3D; null)&#123;</span><br><span class="line">            tmp.setAge(u.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        return tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(value &#x3D; &quot;删除用户&quot;)</span><br><span class="line">    @ApiImplicitParam(name &#x3D; &quot;id&quot;, value &#x3D; &quot;用户ID&quot;, required &#x3D; true, dataType &#x3D; &quot;String&quot;)</span><br><span class="line">    @DeleteMapping(&quot;&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public void delete(@PathVariable String id)&#123;</span><br><span class="line">        if(users.containsKey(id))&#123;</span><br><span class="line">            users.remove(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String UUID()&#123;</span><br><span class="line">        return UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465</span><br></pre></td></tr></table></figure><p>上述都完成后，启动springBoot 项目，访问 <a href="http://localhost/">http://localhost</a>:/swagger-ui.html 即可访问接口文档页面，具体页面如下：<br><img src="https://note.youdao.com/yws/api/personal/file/8D095CF9E7CA47259ACB4DA34075E844?method=download&shareKey=9c3d003719cc502734c3739bbd6d5221" alt="img"></p><p><img src="https://note.youdao.com/yws/api/personal/file/1C94F35AE9A24495A8E2D1699C376FF2?method=download&shareKey=f5202a26d0dfa4e0e7e3a84d1804703c" alt="img"></p><h3 id="3、JApiDocs是一个无需额外注解、开箱即用的SpringBoot接口文档生成工具"><a href="#3、JApiDocs是一个无需额外注解、开箱即用的SpringBoot接口文档生成工具" class="headerlink" title="3、JApiDocs是一个无需额外注解、开箱即用的SpringBoot接口文档生成工具"></a>3、JApiDocs是一个无需额外注解、开箱即用的SpringBoot接口文档生成工具</h3><p>JApiDocs是一个无需额外注解、开箱即用的SpringBoot接口文档生成工具。</p><p>编写和维护API文档这个事情，对于后端程序员来说，是一件恼人但又不得不做的事情，我们都不喜欢写文档，但除非项目前后端代码都是自己写的，否则API文档将是前后端协作中一个不可或缺的沟通界面。</p><p>既然不可避免，那就想办法弄个轮子吧。人生苦短，必须偷懒。</p><p>相比Swagger要写一堆注解，Spring RestDocs需要写测试用例，才能生成API文档。JApiDocs 具有无痛集成的特点，你只需花几分钟就能知道它怎么用了。</p><p>快速开始</p><p>要使得JApiDcos正确工作，你写的代码应该是像下面的样子的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 用户接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/user/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"></span><br><span class="line">publicclassUserController&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * 用户列表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*<span class="doctag">@paramlistForm</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path =<span class="string">"list"</span>, method = &#123;RequestMethod.GET,  RequestMethod.POST&#125;  )</span><br><span class="line"></span><br><span class="line">publicApiResult&gt; list(UserListForm listForm)&#123;</span><br><span class="line"></span><br><span class="line">returnnull;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * 保存用户</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*<span class="doctag">@paramuserForm</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(path =<span class="string">"save"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function">publicApiResult <span class="title">saveUser</span><span class="params">(@RequestBodyUserForm userForm)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">returnnull;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们给Controller类和方法加上必要的注释，给接口方法返回相关的对象类型。是的，这样JApiDocs就能解析到相关的接口信息了，就跟我们平时写的代码是差不多的，但要注意，你要通过@param来告诉JApiDocs接口的参数，但在IDE的帮助下，这个工作将是轻松愉悦的：</p><p>然后你在任意一个main入口方法执行下面的代码就可以生成文档了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DocsConfigconfig&#x3D; new DocsConfig();</span><br><span class="line"></span><br><span class="line">config.setProjectPath(&quot;your springboot project path&quot;); &#x2F;&#x2F; 项目根目录</span><br><span class="line"></span><br><span class="line">config.setProjectName(&quot;ProjectName&quot;); &#x2F;&#x2F; 项目名称</span><br><span class="line"></span><br><span class="line">config.setApiVersion(&quot;V1.0&quot;);      &#x2F;&#x2F; 声明该API的版本</span><br><span class="line"></span><br><span class="line">config.setDocsPath(&quot;your api docs path&quot;); &#x2F;&#x2F; 生成API 文档所在目录</span><br><span class="line"></span><br><span class="line">config.setAutoGenerate(Boolean.TRUE);  &#x2F;&#x2F; 配置自动生成</span><br><span class="line"></span><br><span class="line">Docs.buildHtmlDocs(config); &#x2F;&#x2F; 执行生成文档</span><br></pre></td></tr></table></figure><p>接下来你只管好好写代码，生成Api文档的工作就可以交给JApiDocs了，你不需要再为额外编写和维护文档而烦恼。</p><p>功能特性</p><p>1、代码即文档</p><p>JApiDocs是通过直接解析SpringBoot的源码语法来工作的，所以只要Controller的语法符合一定的代码规范，有合理的注释，就可以直接导出文档。</p><p>2、支持导出HTML</p><p>便捷的导航和接口查看界面；可本地预览，或者部署到HTTP服务器。推荐部署到服务器，方便前后端展开协作。</p><p>3、同步导出客户端Model代码</p><p>支持导出Android端的 Java 和iOS端的 Object C Model代码，减少前端程序员的重复编码工作。</p><p>4、更多特性</p><p>支持接口搜索；支持不同版本和英文文档；自定义扩展等。</p><p>简洁的文档</p><p>再好用的东西，如果没有文档说明，别人也无从入手。为了让大家尽快上手，JApiDocs准备了一份极简的文档说明，确保你在几分钟就能用上JApiDocs。</p><p>花5分钟不到就能认识一个提高工作效率的工具，让你把更多的时间花在更加有价值的事情上，你确认不看一下吗？</p><p>“</p><p>仓库地址：</p><p><a href="https://github.com/YeDaxia/JApiDocs" target="_blank" rel="noopener">https://github.com/YeDaxia/JApiDocs</a></p><p>中文文档：</p><p><a href="https://japidocs.agilestudio.cn/#/zh-cn/" target="_blank" rel="noopener">https://japidocs.agilestudio.cn/#/zh-cn/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;曾经看过这样一个笑话：程序员最讨厌写文档，比这个还讨厌的事情就是，别人居然不写文档。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文档的确是个令猿头疼的东西哇，但是文档的重要性也是不言而喻。这里就给大家安利两款比较好用的接口文档生成工具：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java enum常见的用法</title>
    <link href="https://shanyutou.github.io/2020/08/09/Java-enum%E5%B8%B8%E8%A7%81%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://shanyutou.github.io/2020/08/09/Java-enum%E5%B8%B8%E8%A7%81%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2020-08-09T03:00:12.000Z</published>
    <updated>2021-09-07T07:26:31.780Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-常量定义"><a href="#一-常量定义" class="headerlink" title="一,常量定义"></a>一,常量定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> WeekDay &#123;</span><br><span class="line">    SUN, MON, TUE, WED, THT, FRI, SAT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-swich"><a href="#二-swich" class="headerlink" title="二,swich"></a>二,swich</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> WeekDay &#123;</span><br><span class="line">    SUN, MON, TUE, WED, THT, FRI, SAT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectDay</span></span>&#123;</span><br><span class="line">    WeekDay weekday = WeekDay.SUN;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(weekday)&#123;</span><br><span class="line">            <span class="keyword">case</span> SUN:</span><br><span class="line">                weekday = WeekDay.SUN;</span><br><span class="line">                bread;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-向枚举添加新方法"><a href="#三-向枚举添加新方法" class="headerlink" title="三,向枚举添加新方法"></a>三,向枚举添加新方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;  </span><br><span class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员变量  </span></span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">        <span class="keyword">this</span>.index = index;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">for</span> (Color c : Color.values()) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (c.getIndex() == index) &#123;  </span><br><span class="line">                <span class="keyword">return</span> c.name;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// get set 方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> index;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.index = index;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-覆盖枚举方法"><a href="#四-覆盖枚举方法" class="headerlink" title="四,覆盖枚举方法"></a>四,覆盖枚举方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="keyword">private</span> <span class="keyword">int</span> index; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="keyword">this</span>.index = index; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//覆盖方法 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.index+<span class="string">"_"</span>+<span class="keyword">this</span>.name; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-实现接口"><a href="#五-实现接口" class="headerlink" title="五,实现接口"></a>五,实现接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Behaviour</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color implements Behaviour&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员变量 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="keyword">this</span>.index = index; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口方法 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口方法 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.index+<span class="string">":"</span>+<span class="keyword">this</span>.name); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六-接口组织枚举"><a href="#六-接口组织枚举" class="headerlink" title="六,接口组织枚举"></a>六,接口组织枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> Coffee implements Food&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        BLACK_COFFEE,DECAF_COFFEE,LATTE,CAPPUCCINO </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> Dessert implements Food&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        FRUIT, CAKE, GELATO </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七-枚举集合"><a href="#七-枚举集合" class="headerlink" title="七,枚举集合"></a>七,枚举集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        EnumSet&lt;WeekDay&gt; week = EnumSet.noneOf(WeekDay<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        week.add(WeekDay.MON);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"EnumSet中的元素："</span> + week);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        week.remove(WeekDay.MON);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"EnumSet中的元素："</span> + week);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        week.addAll(EnumSet.complementOf(week));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"EnumSet中的元素："</span> + week);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        week.removeAll(EnumSet.range(WeekDay.FRI, WeekDay.SAT));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"EnumSet中的元素："</span> + week);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-常量定义&quot;&gt;&lt;a href=&quot;#一-常量定义&quot; class=&quot;headerlink&quot; title=&quot;一,常量定义&quot;&gt;&lt;/a&gt;一,常量定义&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>@Autowired与@Resource的区别</title>
    <link href="https://shanyutou.github.io/2020/08/08/Autowired%E4%B8%8E-Resource%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://shanyutou.github.io/2020/08/08/Autowired%E4%B8%8E-Resource%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-08-08T13:57:31.000Z</published>
    <updated>2021-09-07T07:26:31.780Z</updated>
    
    <content type="html"><![CDATA[<p>参考博文：</p><p><a href="http://www.cnblogs.com/happyyang/articles/3553687.html" target="_blank" rel="noopener">http://www.cnblogs.com/happyyang/articles/3553687.html</a></p><p><a href="http://blog.csdn.net/revent/article/details/49203619" target="_blank" rel="noopener">http://blog.csdn.net/revent/article/details/49203619</a></p><p><a href="http://blog.csdn.net/ad921012/article/details/49679745" target="_blank" rel="noopener">http://blog.csdn.net/ad921012/article/details/49679745</a></p><p><a href="http://lib.csdn.net/base/javaee" target="_blank" rel="noopener">spring</a>不但支持自己定义的@Autowired注解，还支持几个由JSR-250规范定义的注解，它们分别是@Resource、@PostConstruct以及@PreDestroy。<br>　　@Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按 byName自动注入罢了。@Resource有两个属性是比较重要的，分是name和type，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。<br>　　@Resource装配顺序<br>　　1. 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常<br>　　2. 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常<br>　　3. 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常<br>　　4. 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；</p><p>@Autowired 与@Resource的区别：</p><p>1、 @Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。</p><p>2、 @Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Autowired&#96;&#96;()&#96;&#96;@Qualifier&#96;&#96;(&#96;&#96;&quot;baseDao&quot;&#96;&#96;)&#96;&#96;private&#96;&#96;BaseDao baseDao;</span><br></pre></td></tr></table></figure><p>3、@Resource（这个注解属于J2EE的），默认按照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行安装名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Resource&#96;&#96;(name&#x3D;&#96;&#96;&quot;baseDao&quot;&#96;&#96;)&#96;&#96;private&#96;&#96;BaseDao baseDao;</span><br></pre></td></tr></table></figure><p>推荐使用：@Resource注解在字段上，这样就不用写setter方法了，并且这个注解是属于J2EE的，减少了与spring的耦合。这样代码看起就比较优雅。</p><p><a href="http://blog.csdn.net/clerk0324/article/details/25198457" target="_blank" rel="noopener">spring @Qualifier注解</a></p><p>@Autowired是根据类型进行自动装配的。如果当Spring上下文中存在不止一个UserDao类型的bean时，就会抛出BeanCreationException异常;如果Spring上下文中不存在UserDao类型的bean，也会抛出BeanCreationException异常。我们可以使用@Qualifier配合@Autowired来解决这些问题。如下：</p><p>①可能存在多个UserDao实例</p><p>[java]<a href="http://blog.csdn.net/clerk0324/article/details/25198457#" target="_blank" rel="noopener">view plain</a><a href="http://blog.csdn.net/clerk0324/article/details/25198457#" target="_blank" rel="noopener">copy</a><a href="https://code.csdn.net/snippets/331452" target="_blank" rel="noopener"><img src="https://code.csdn.net/assets/CODE_ico.png" alt="在CODE上查看代码片"></a><a href="https://code.csdn.net/snippets/331452/fork" target="_blank" rel="noopener"><img src="https://code.csdn.net/assets/ico_fork.svg" alt="派生到我的代码片"></a></p><ol><li>@Autowired  </li><li>@Qualifier(“userServiceImpl”)  </li><li><strong>public IUserService userService;</strong>  </li></ol><p>或者</p><p>[java]<a href="http://blog.csdn.net/clerk0324/article/details/25198457#" target="_blank" rel="noopener">view plain</a><a href="http://blog.csdn.net/clerk0324/article/details/25198457#" target="_blank" rel="noopener">copy</a><a href="https://code.csdn.net/snippets/331452" target="_blank" rel="noopener"><img src="https://code.csdn.net/assets/CODE_ico.png" alt="在CODE上查看代码片"></a><a href="https://code.csdn.net/snippets/331452/fork" target="_blank" rel="noopener"><img src="https://code.csdn.net/assets/ico_fork.svg" alt="派生到我的代码片"></a></p><ol><li>@Autowired  </li><li><strong>public \</strong>void setUserDao(@Qualifier(“userDao”) UserDao userDao) {****  </li><li><strong>this.userDao = userDao;</strong>  </li><li>} </li></ol><p>这样Spring会找到id为userServiceImpl和userDao的bean进行装配。</p><p>②可能不存在UserDao实例</p><p>[java]<a href="http://blog.csdn.net/clerk0324/article/details/25198457#" target="_blank" rel="noopener">view plain</a><a href="http://blog.csdn.net/clerk0324/article/details/25198457#" target="_blank" rel="noopener">copy</a><a href="https://code.csdn.net/snippets/331452" target="_blank" rel="noopener"><img src="https://code.csdn.net/assets/CODE_ico.png" alt="在CODE上查看代码片"></a><a href="https://code.csdn.net/snippets/331452/fork" target="_blank" rel="noopener"><img src="https://code.csdn.net/assets/ico_fork.svg" alt="派生到我的代码片"></a></p><ol><li>@Autowired(required = <strong>false)</strong>  </li><li><strong>public IUserService userService</strong> </li><li></li></ol><p>个人总结：</p><p>@Autowired//默认按type注入<br>@Qualifier(“cusInfoService”)//一般作为@Autowired()的修饰用<br>@Resource(name=”cusInfoService”)//默认按name注入，可以通过name和type属性进行选择性注入</p><p>一般@Autowired和@Qualifier一起用，@Resource单独用。</p><p>当然没有冲突的话@Autowired也可以单独用</p><p>———–常用注解——–</p><p>–定义Bean的注解</p><p>@Controller</p><p>@Controller(“Bean的名称”)</p><p>定义控制层Bean,如Action</p><p>@Service      </p><p>@Service(“Bean的名称”)</p><p>定义业务层Bean</p><p>@Repository  </p><p>@Repository(“Bean的名称”)</p><p>定义DAO层Bean</p><p>@Component  </p><p>定义Bean, 不好归类时使用.</p><p>–自动装配Bean （选用一种注解就可以）</p><p>@Autowired  (Srping提供的)</p><p>默认按类型匹配,自动装配(Srping提供的)，可以写在成员属性上,或写在setter方法上</p><p>@Autowired(required=true)  </p><p>一定要找到匹配的Bean，否则抛异常。 默认值就是true </p><p>@Autowired</p><p>@Qualifier(“bean的名字”) </p><p>按名称装配Bean,与@Autowired组合使用，解决按类型匹配找到多个Bean问题。</p><p>@Resource  JSR-250提供的</p><p>默认按名称装配,当找不到名称匹配的bean再按类型装配.</p><p>可以写在成员属性上,或写在setter方法上</p><p>可以通过@Resource(name=”beanName”) 指定被注入的bean的名称, 要是未指定name属性, 默认使用成员属性的变量名,一般不用写name属性.</p><p>@Resource(name=”beanName”)指定了name属性,按名称注入但没找到bean, 就不会再按类型装配了.</p><p>@Inject  是JSR-330提供的</p><p>按类型装配，功能比@Autowired少，没有使用的必要。</p><p>–定义Bean的作用域和生命过程</p><p>@Scope(“prototype”)</p><p>值有:singleton,prototype,session,request,session,globalSession</p><p>@PostConstruct </p><p>相当于init-method,使用在方法上，当Bean初始化时执行。</p><p>@PreDestroy </p><p>相当于destory-method，使用在方法上，当Bean销毁时执行。</p><p>–声明式事务</p><p>@Transactional  </p><p>@Autowired @Resource @Qualifier的区别</p><p>实用理解：@Autowired @Resource 二选其一，看中哪个就用哪个。</p><p>简单理解：</p><p>@Autowired 根据类型注入， </p><p>@Resource 默认根据名字注入，其次按照类型搜索</p><p>@Autowired @Qualifie(“userService”) 两个结合起来可以根据名字和类型注入</p><p>复杂理解：</p><p>比如你有这么一个Bean</p><p>@Service(“UserService”)</p><p>public Class UserServiceImpl implements UserService｛｝;</p><p>现在你想在UserController 里面使用这个UserServiceImpl </p><p>public Class UserController ｛</p><p>@AutoWire  //当使用这个注入的时候上面的 UserServiceImpl 只需要这样写 @Service，这样就会自动找到UserService这个类型以及他的子类型。UserServiceImpl 实现了UserService，所以能够找到它。不过这样有一个缺点，就是当UserService实现类有两个以上的时候，这个时候会找哪一个呢，这就造成了冲突，所以要用@AutoWire注入的时候要确保UserService只有一个实现类。</p><p>@Resource 默认情况下是按照名称进行匹配，如果没有找到相同名称的Bean，则会按照类型进行匹配，有人可能会想了，这下好了，用这个是万能的了，不用管名字了，也不用管类型了，但这里还是有缺点。首先，根据这个注解的匹配效果可以看出，它进行了两次匹配，也就是说，如果你在UserService这个类上面这样写注解，@Service,它会怎么找呢，首先是找相同名字的，如果没有找到，再找相同类型的，而这里的@Service没有写名字，这个时候就进行了两次搜索，显然，速度就下降了许多。也许你还会问，这里的@Service本来就没有名字，肯定是直接进行类型搜索啊。其实不是这样的，UserServiceImpl 上面如果有@Service默认的名字 是这个userServiceImpl，注意看，就是把类名前面的大写变成小写，就是默认的Bean的名字了。 @Resource根据名字搜索是这样写@Resource(“userService”)，如果你写了这个名字叫userService，那么UserServiceImpl上面必须也是这个名字，不然还是会报错。</p><p>@Autowired @Qualifie(“userService”) 是直接按照名字进行搜索，也就是说，对于UserServiceImpl 上面@Service注解必须写名字，不写就会报错，而且名字必须是@Autowired @Qualifie(“userService”) 保持一致。如果@Service上面写了名字，而@Autowired @Qualifie() ，一样会报错。</p><p>private UserService userService;</p><p>｝</p><p>说了这么多，可能你有些说晕了，那么怎么用这三个呢，要实际的工作是根据实际情况来使用的，通常使用AutoWire和@Resource多一些，bean的名字不用写，而UserServiceImpl上面能会这样写 @Service(“userService”)。这里的实际工作情况，到底是什么情况呢？说白了就是整个项目设计时候考虑的情况，如果你的<a href="http://lib.csdn.net/base/architecture" target="_blank" rel="noopener">架构</a>设计师考虑的比较精细，要求比较严格，要求项目上线后的访问速度比较好，通常是考虑速度了。这个时候@AutoWire没有@Resource好用，因为@Resource可以根据名字来搜索，是这样写的@Resource(“userService”)。这个@Autowired @Qualifie(“userService”) 也可以用名字啊，为什么不用呢，原因很简单，这个有点长，不喜欢，增加工作量。因为根据名字搜索是最快的，就好像查<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">数据库</a>一样，根据Id查找最快。因为这里的名字与数据库里面的ID是一样的作用。这个时候，就要求你多写几个名字，工作量自然就增加了。而如果你不用注解，用xml文件的时候，对于注入Bean的时候要求写一个Id，xml文件时候的id就相当于这里的名字。</p><p>说了那么多没用，你能做的就是简单直接，什么最方便就用什么，</p><p>你就直接用@Resource得了，如果你喜欢用@AutoWire也行，不用写名字。</p><p>通常情况一个Bean的注解写错了，会报下面这些错误，最为常见，</p><p>No bean named ‘user’ is defined，这个表示没有找到被命名为user的Bean，通俗的说，就是名字为user的类型，以及它的子类型，出现这个错误的原因就是注入时候的类型名字为user，而搜索的时候找不到，也就是说可能那个搜索的类型，并没有命令为user，解决办法就是找到这个类型，去命令为user，</p><p>下面这个错误也常见，</p><p>No qualifying bean of type [com.service.UserService] found for dependency:</p><p>这个错误的原因就是类型上面没有加@Service这个注入，不仅仅是@Service，如果是其他层也会出现这个错误，这里我是以Service为例子说明，如果是DAO层就是没有加@Repository，Controller层，则是没有加@Controller。</p><p>还有，如果你还是想再简单点，无论是DAO,Controller，Service三个层，都可以用这个注解，@Component，这个注解通用所有的Bean，这个时候你可能会说了，有通常的为什么用的人少呢，那是因为MVC这个分层的设计原则，用@Repository,@Service，@Controller，这个可以区别MVC原则中的DAO,Service，Controller。便于识别。</p><p>博客2：</p><p><a href="http://www.iteye.com/blogs/tag/spring" target="_blank" rel="noopener">spring</a><a href="http://www.iteye.com/blogs/tag/autowired" target="_blank" rel="noopener">autowired</a><a href="http://www.iteye.com/blogs/tag/qualifier" target="_blank" rel="noopener">qualifier</a><a href="http://www.iteye.com/blogs/tag/bytype" target="_blank" rel="noopener">bytype</a><a href="http://www.iteye.com/blogs/tag/byname" target="_blank" rel="noopener">byname</a> </p><p>　在使用Spring框架中@Autowired标签时默认情况下使用</p><p>Java代码 </p><ol><li>@Autowired </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br></pre></td></tr></table></figure><p>注释进行自动注入时，Spring 容器中匹配的候选 Bean 数目必须有且仅有一个。当找不到一个匹配的 Bean 时，Spring 容器将抛出 BeanCreationException 异常，并指出必须至少拥有一个匹配的 Bean。</p><p>@Autowired 默认是按照byType进行注入的，如果发现找到多个bean，则，又按照byName方式比对，如果还有多个，则报出异常。</p><p>例子：</p><p>@Autowired<br>private ExamUserMapper examUserMapper; - ExamUserMapper是一个接口</p><p>\1. spring先找类型为ExamUserMapper的bean</p><p>\2. 如果存在且唯一，则OK；</p><p>\3. 如果不唯一，在结果集里，寻找name为examUserMapper的bean。因为bean的name有唯一性，所以，到这里应该能确定是否存在满足要求的bean了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired也可以手动指定按照byName方式注入，使用@Qualifier标签，例如：</span><br><span class="line">@Autowired&#96; &#96;() &#96;&#96;@Qualifier&#96; &#96;(&#96; &#96;&quot;baseDao&quot;&#96; &#96;)</span><br></pre></td></tr></table></figure><p>　　Spring 允许我们通过</p><p>Java代码 </p><ol><li>@Qualifier </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br></pre></td></tr></table></figure><p>注释指定注入 Bean 的名称，这样歧义就消除了，可以通过下面的方法解决异常。 </p><p>Java代码 </p><ol><li>@Qualifier(“XXX”) </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"XXX"</span>)</span><br></pre></td></tr></table></figure><p>中的 XX是 Bean 的名称，所以 @Autowired 和 @Qualifier 结合使用时，自动注入的策略就从 byType 转变成 byName 了。 </p><p>　　@Autowired 可以对成员变量、方法以及构造函数进行注释，而 @Qualifier 的标注对象是成员变量、方法入参、构造函数入参。 </p><p>  Spring不但支持自己定义的@Autowired注解，还支持几个由JSR-250规范定义的注解，它们分别是@Resource、@PostConstruct以及@PreDestroy。 </p><p>Java代码 </p><ol><li>@Resource </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br></pre></td></tr></table></figure><p>的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按 byName自动注入罢了。@Resource有两个属性是比较重要的，分是name和type，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。 </p><p>　　@Resource装配顺序<br>　　1. 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常<br>　　2. 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常<br>　　3. 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常<br>　　4. 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考博文：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/happyyang/articles/3553687.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cnblogs.com/happy</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SOAP 协议请求和调试</title>
    <link href="https://shanyutou.github.io/2020/08/07/SOAP-%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82%E5%92%8C%E8%B0%83%E8%AF%95/"/>
    <id>https://shanyutou.github.io/2020/08/07/SOAP-%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82%E5%92%8C%E8%B0%83%E8%AF%95/</id>
    <published>2020-08-07T14:01:37.000Z</published>
    <updated>2021-09-07T07:26:31.781Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Maven 分析项目依赖关系</title>
    <link href="https://shanyutou.github.io/2020/08/07/Maven-%E5%88%86%E6%9E%90%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/"/>
    <id>https://shanyutou.github.io/2020/08/07/Maven-%E5%88%86%E6%9E%90%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/</id>
    <published>2020-08-07T12:50:48.000Z</published>
    <updated>2021-09-07T07:26:31.781Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>通过控制台查看：<br>输入命令：mvn dependency:tree</p></li><li><p>如果要输出到文件，找到pom文件的位置 进入命令行<br>输入命令： mvn dependency:tree &gt;d:/tree.txt</p></li><li><p>只查看关系的jar包<br>mvn dependency:tree -Dverbose -Dincludes=groupId:artifactId:version<br>输入命令：？？？？<br>mvn dependency:tree -Dverbose -Dincludes=org.springframework.boot:spring-boot-starter-jdbc</p></li><li><p>对结果筛选</p><p>mvn dependency:tree | grep jdbc -A5</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过控制台查看：&lt;br&gt;输入命令：mvn dependency:tree&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果要输出到文件，找到pom文件的位置 进入命令行&lt;br&gt;输入命令： mvn dependency:tree &amp;gt;d:/tree.txt&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java lambda表达式-箭头函数</title>
    <link href="https://shanyutou.github.io/2020/08/02/Java-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>https://shanyutou.github.io/2020/08/02/Java-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-02T05:40:50.000Z</published>
    <updated>2021-09-07T07:26:31.781Z</updated>
    
    <content type="html"><![CDATA[<p>jdk8+以上引入了箭头函数，即J8的lambda表达式。</p><p>Lambda表达式的本质只是一个”<a href="http://zh.wikipedia.org/wiki/语法糖" target="_blank" rel="noopener"><strong>语法糖</strong></a>“，由编译器推断并帮你转换包装为常规的代码，因此你可以使用更少的代码来实现同样的功能。</p><blockquote><p>本人建议不要乱用,因为这就和某些很高级的黑客写的代码一样,简洁,难懂,难以调试,维护人员想骂娘，哈哈</p></blockquote><p>下面是例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 不需要参数,返回值为 5  </span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class="line">(x, y) -&gt; x – y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////// 用法 //////////////</span></span><br><span class="line"></span><br><span class="line">String[] atp = &#123;<span class="string">"Rafael Nadal"</span>, <span class="string">"Novak Djokovic"</span>,  </span><br><span class="line">       <span class="string">"Stanislas Wawrinka"</span>,  </span><br><span class="line">       <span class="string">"David Ferrer"</span>,<span class="string">"Roger Federer"</span>,  </span><br><span class="line">       <span class="string">"Andy Murray"</span>,<span class="string">"Tomas Berdych"</span>,  </span><br><span class="line">       <span class="string">"Juan Martin Del Potro"</span>&#125;;  </span><br><span class="line">List&lt;String&gt; players =  Arrays.asList(atp);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 以前的循环方式  </span></span><br><span class="line"><span class="keyword">for</span> (String player : players) &#123;  </span><br><span class="line">     System.out.print(player + <span class="string">"; "</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 使用 lambda 表达式以及函数操作(functional operation)  </span></span><br><span class="line">players.forEach((player) -&gt; System.out.print(player + <span class="string">"; "</span>));  </span><br><span class="line">   </span><br><span class="line"><span class="comment">// 在 Java 8 中使用双冒号操作符(double colon operator)  </span></span><br><span class="line">players.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String[] players = &#123;<span class="string">"Rafael Nadal"</span>, <span class="string">"Novak Djokovic"</span>,   </span><br><span class="line">    <span class="string">"Stanislas Wawrinka"</span>, <span class="string">"David Ferrer"</span>,  </span><br><span class="line">    <span class="string">"Roger Federer"</span>, <span class="string">"Andy Murray"</span>,  </span><br><span class="line">    <span class="string">"Tomas Berdych"</span>, <span class="string">"Juan Martin Del Potro"</span>,  </span><br><span class="line">    <span class="string">"Richard Gasquet"</span>, <span class="string">"John Isner"</span>&#125;;  </span><br><span class="line">   </span><br><span class="line"><span class="comment">// 1.1 使用匿名内部类根据 name 排序 players  </span></span><br><span class="line">Arrays.sort(players, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (s1.compareTo(s2));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 使用 lambda expression 排序 players  </span></span><br><span class="line">Comparator&lt;String&gt; sortByName = (String s1, String s2) -&gt; (s1.compareTo(s2));  </span><br><span class="line">Arrays.sort(players, sortByName);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 1.3 也可以采用如下形式:  </span></span><br><span class="line">Arrays.sort(players, (String s1, String s2) -&gt; (s1.compareTo(s2)));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;jdk8+以上引入了箭头函数，即J8的lambda表达式。&lt;/p&gt;
&lt;p&gt;Lambda表达式的本质只是一个”&lt;a href=&quot;http://zh.wikipedia.org/wiki/语法糖&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;语</summary>
      
    
    
    
    <category term="java" scheme="https://shanyutou.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://shanyutou.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot的优点</title>
    <link href="https://shanyutou.github.io/2020/07/30/Spring-boot%E7%9A%84%E4%BC%98%E7%82%B9/"/>
    <id>https://shanyutou.github.io/2020/07/30/Spring-boot%E7%9A%84%E4%BC%98%E7%82%B9/</id>
    <published>2020-07-30T13:58:48.000Z</published>
    <updated>2021-09-07T07:26:31.782Z</updated>
    
    <content type="html"><![CDATA[<ul><li>快速创建独立运行的Spring项目以及与主流框架集成；</li><li>使用嵌入式的Servelet容器，应用无需打包成WAR包；</li><li>starters自动依赖与版本控制；</li><li>大量的自动配置，简化开发，也可修改默认值；</li><li>无需配置XML，无代码生成，开箱即用；</li><li>准生产环境的运行时应用监控；</li><li>与云计算的天然集成；</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;快速创建独立运行的Spring项目以及与主流框架集成；&lt;/li&gt;
&lt;li&gt;使用嵌入式的Servelet容器，应用无需打包成WAR包；&lt;/li&gt;
&lt;li&gt;starters自动依赖与版本控制；&lt;/li&gt;
&lt;li&gt;大量的自动配置，简化开发，也可修改默认值；&lt;/li&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 生产力工具grep</title>
    <link href="https://shanyutou.github.io/2020/07/28/Linux-%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7grep/"/>
    <id>https://shanyutou.github.io/2020/07/28/Linux-%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7grep/</id>
    <published>2020-07-28T06:11:06.000Z</published>
    <updated>2020-07-28T06:11:06.939Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 切换启动图形界面为命令行界面</title>
    <link href="https://shanyutou.github.io/2020/07/28/Linux-%E5%88%87%E6%8D%A2%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%B8%BA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2/"/>
    <id>https://shanyutou.github.io/2020/07/28/Linux-%E5%88%87%E6%8D%A2%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%B8%BA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2/</id>
    <published>2020-07-28T05:49:43.000Z</published>
    <updated>2020-07-28T05:49:43.112Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 修改网络配置</title>
    <link href="https://shanyutou.github.io/2020/07/28/Linux-%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE-1/"/>
    <id>https://shanyutou.github.io/2020/07/28/Linux-%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE-1/</id>
    <published>2020-07-28T05:43:35.000Z</published>
    <updated>2020-07-28T05:43:35.717Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 修改网络配置</title>
    <link href="https://shanyutou.github.io/2020/07/28/Linux-%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>https://shanyutou.github.io/2020/07/28/Linux-%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</id>
    <published>2020-07-28T05:42:56.000Z</published>
    <updated>2020-07-28T05:42:56.983Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
