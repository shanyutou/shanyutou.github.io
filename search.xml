<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JVM 逃逸分析优化</title>
      <link href="/bianchengme/2021/09/07/JVM-%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%BC%98%E5%8C%96/"/>
      <url>/bianchengme/2021/09/07/JVM-%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“Java 中的对象是否都分配在堆内存中？”<br>——“不尽然”</p></blockquote><p>Java 中对象的创建一般会由堆内存去分配内存空间来进行存储，在堆内存空间不足的时候，GC 便会对堆内存进行垃圾回收，如果 GC 运行的次数过多，便会影响程序的性能,并且堆内存为所有线程共享，存再同步问题；所以 <strong>“逃逸分析”</strong> 由此诞生，它的目的就是判断哪些对象是可以存储在栈内存中而不用存储在堆内存中的，从而让其随着线程的消逝而消逝，进而减少了 GC 发生的频率，这也是常见的 JVM 优化技巧之一。</p><h1 id="什么是逃逸分析"><a href="#什么是逃逸分析" class="headerlink" title="什么是逃逸分析"></a>什么是逃逸分析</h1><p>逃逸分析（Escape Analysis）简单来讲就是，Java Hotspot 虚拟机可以分析新创建对象的使用范围，并决定是否在 Java 堆上分配内存的一项技术。</p><p>在方法中创建对象之后，如果这个对象 <strong>实例</strong> 除了在方法体中还在其它地方被引用了，此时如果方法执行完毕，由于该对象有被引用，所以 GC 有可能是无法立即回收的，此时便成为 <strong>内存逃逸现象</strong>。</p><h1 id="如何使用逃逸分析"><a href="#如何使用逃逸分析" class="headerlink" title="如何使用逃逸分析"></a>如何使用逃逸分析</h1><ul><li>开启逃逸分析：<code>-XX:+DoEscapeAnalysis</code></li><li>关闭逃逸分析：<code>-XX:-DoEscapeAnalysis</code></li><li>显示分析结果：<code>-XX:+PrintEscapeAnalysis</code></li></ul><p>逃逸分析的作用，就是筛选出没有发生逃逸的对象，从而对它们进行以下三方面的优化：</p><h3 id="同步消除（锁消除）"><a href="#同步消除（锁消除）" class="headerlink" title="同步消除（锁消除）"></a>同步消除（锁消除）</h3><p>因为同步锁是非常消耗性能的，所以当编译器确定一个对象没有发生逃逸时，它便会移除该对象的同步锁。</p><p>在 JDK1.8 中是默认开启的，但是要建立在已开启逃逸分析的基础之上。</p><ul><li>开启锁消除：<code>-XX:+EliminateLocks</code>（JDK8默认开启）</li><li>关闭锁消除：<code>-XX:-EliminateLocks</code></li></ul><h3 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h3><p>首先要明白标量和聚合量，基础类型和对象的引用可以理解为标量，它们不能被进一步分解。而能被进一步分解的量就是聚合量，比如：对象。</p><p>对象是聚合量，它又可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做标量替换。</p><p>这样，如果一个对象没有发生逃逸，那压根就不用创建它，只会在栈或者寄存器上创建它用到的成员标量，节省了内存空间，也提升了应用程序性能。</p><p>标量替换在 JDK1.8 中也是默认开启的，但是同样也要建立在已开启逃逸分析的基础之上。</p><ul><li>开启标量替换：<code>-XX:+EliminateAllocations</code></li><li>关闭标量替换：<code>-XX:-EliminateAllocations</code></li><li>显示标量替换详情：<code>-XX:+PrintEliminateAllocations</code></li></ul><h3 id="栈内存分配"><a href="#栈内存分配" class="headerlink" title="栈内存分配"></a>栈内存分配</h3><p>栈内存分配很好理解，在上文中提过，就是将原本分配在堆内存上的对象转而分配在栈内存上，这样就可以减少堆内存的占用，从而减少 GC 的频次。</p><h1 id="逃逸分析的优势"><a href="#逃逸分析的优势" class="headerlink" title="逃逸分析的优势"></a>逃逸分析的优势</h1><p>我们通过如下代码测试：</p><h4 id="Step-1：测试开启逃逸"><a href="#Step-1：测试开启逃逸" class="headerlink" title="Step 1：测试开启逃逸"></a>Step 1：测试开启逃逸</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: EscapeAnalysisTest</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EscapeAnalysisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> t1 = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            allot();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> t2 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(t2-t1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jet jet = <span class="keyword">new</span> Jet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Jet</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环境是 jdk1.8，默认开启了逃逸分析，所以直接运行，得到结果如下，程序耗时 3 毫秒：</p><p>我们观察下内存情况，发现堆内存中一共新建了 11 万个 Jet 对象。</p><h4 id="Step-2：测试关闭逃逸"><a href="#Step-2：测试关闭逃逸" class="headerlink" title="Step 2：测试关闭逃逸"></a>Step 2：测试关闭逃逸</h4><p>Step 3：测试标量替换</p><p>Step 4：测试锁消除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Jet jet = <span class="keyword">new</span> Jet();</span><br><span class="line">    <span class="keyword">synchronized</span> (jet) &#123;</span><br><span class="line">        jet.name = <span class="string">"jet Chen"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>逃逸分析的原理理解起来其实很简单，但 JVM 在实际应用过程中，还是有诸多因素需要考虑的。</p><p>比如，逃逸分析不能在静态编译时进行，必须在 JIT 里完成。原因大致是：与 Java 的动态性有冲突。因为你可以在运行时，通过动态代理改变一个类的行为，此时，逃逸分析是无法得知类已经变化了。总之就是：因为只有当收集到足够的运行数据时，JVM 才可以更好地判断对象是否发生了逃逸。（参考大佬的解释：<a href="https://www.zhihu.com/ques....）" target="_blank" rel="noopener">https://www.zhihu.com/ques....）</a></p><p>当然，逃逸分析并不是没有劣势的，因为逃逸分析是需要消耗一定的性能去执行分析的，所以说如果方法中的对象全都是处于逃逸状态，那么就没有起到优化的作用，从而就白白损失了这部分的性能消耗。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> JVM </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos通过Docke部署</title>
      <link href="/bianchengme/2021/07/02/Nacos%E9%80%9A%E8%BF%87Docke%E9%83%A8%E7%BD%B2/"/>
      <url>/bianchengme/2021/07/02/Nacos%E9%80%9A%E8%BF%87Docke%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><h6 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure><h6 id="2-挂载目录"><a href="#2-挂载目录" class="headerlink" title="2.挂载目录"></a>2.挂载目录</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/data/nacos/logs/ ~/data/nacos/init.d/   <span class="comment">#创建目录          </span></span><br><span class="line">vim ~/data/nacos/init.d/application.properties        <span class="comment">#修改配置文件</span></span><br></pre></td></tr></table></figure><p>添加如下参数:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="meta">server.servlet.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8848</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://xx.xx.xx.x:3306/nacos_devtest_prod?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">user</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">nacos.cmdb.dumpTaskInterval</span>=<span class="string">3600</span></span><br><span class="line"><span class="meta">nacos.cmdb.eventTaskInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">nacos.cmdb.labelTaskInterval</span>=<span class="string">300</span></span><br><span class="line"><span class="meta">nacos.cmdb.loadDataAtStart</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">management.metrics.export.elastic.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">management.metrics.export.influx.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">server.tomcat.accesslog.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">server.tomcat.accesslog.pattern</span>=<span class="string">%h %l %u %t "%r" %s %b %D %&#123;User-Agent&#125;i</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">nacos.security.ignore.urls</span>=<span class="string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/login,/v1/console/health/**,/v1/cs/**,/v1/ns/**,/v1/cmdb/**,/actuator/**,/v1/console/server/**</span></span><br><span class="line"><span class="meta">nacos.naming.distro.taskDispatchThreadCount</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">nacos.naming.distro.taskDispatchPeriod</span>=<span class="string">200</span></span><br><span class="line"><span class="meta">nacos.naming.distro.batchSyncKeyCount</span>=<span class="string">1000</span></span><br><span class="line"><span class="meta">nacos.naming.distro.initDataRatio</span>=<span class="string">0.9</span></span><br><span class="line"><span class="meta">nacos.naming.distro.syncRetryDelay</span>=<span class="string">5000</span></span><br><span class="line"><span class="meta">nacos.naming.data.warmup</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">nacos.naming.expireInstance</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>:wq 保存退出</p><h6 id="3-启动容器"><a href="#3-启动容器" class="headerlink" title="3.启动容器"></a>3.启动容器</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker  run \</span><br><span class="line">--name nacos -d \</span><br><span class="line">-p <span class="number">8848</span>:<span class="number">8848</span> \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">--restart=always \</span><br><span class="line">-e JVM_XMS=<span class="number">256</span>m \</span><br><span class="line">-e JVM_XMX=<span class="number">256</span>m \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e PREFER_HOST_MODE=hostname \</span><br><span class="line">-v ~<span class="regexp">/data/</span>nacos/logs/:<span class="regexp">/home/</span>nacos/logs \</span><br><span class="line">-v ~<span class="regexp">/data/</span>nacos/init.d/application.properties:<span class="regexp">/home/</span>nacos/init.d/application.properties \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Nacos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> nacos </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openstack-horizon 快速本地运行</title>
      <link href="/bianchengme/2021/03/12/openstack-horizon-%E5%BF%AB%E9%80%9F%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C/"/>
      <url>/bianchengme/2021/03/12/openstack-horizon-%E5%BF%AB%E9%80%9F%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="horizon-简介"><a href="#horizon-简介" class="headerlink" title="horizon 简介"></a>horizon 简介</h2><p>Horizon 为 Openstack 提供一个 WEB 前端的管理界面 (UI 服务 )通过 Horizon 所提供的 DashBoard 服务 , 管理员可以使用通过 WEB UI 对 Openstack 整体云环境进行管理 , 并可直观看到各种操作结果与运行状态。那作为开发者怎样快速上手horizon？其实很简单，so easy！</p><h2 id="horizon本地运行"><a href="#horizon本地运行" class="headerlink" title="horizon本地运行"></a>horizon本地运行</h2><h3 id="1、准备本地环境"><a href="#1、准备本地环境" class="headerlink" title="1、准备本地环境"></a>1、准备本地环境</h3><p>安装python，不会自己百度搜吧 。。。。</p><h3 id="2、创建虚拟环境，推荐用virtualenvwrapper；"><a href="#2、创建虚拟环境，推荐用virtualenvwrapper；" class="headerlink" title="2、创建虚拟环境，推荐用virtualenvwrapper；"></a>2、创建虚拟环境，推荐用virtualenvwrapper；</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装</span><br><span class="line">pip install virtualenvwrapper-win</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* 默认创建的虚拟环境位于C:\Users\username\envs,可以通过环境变量 WORKON_HOME来定制。</span><br><span class="line">* 通过计算机--&gt;属性--&gt;高级系统设置--&gt;环境变量--&gt;在系统变量中新建“变量名”：WORKON_HOME,变量值：“你自定义的路径”。</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行此命令创建第一个虚拟环境:</span><br><span class="line">mkvirtualenv venv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 列出所有虚拟环境</span><br><span class="line">lsvirtualenv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 激活虚拟环境</span><br><span class="line">workon venv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 进入虚拟环境目录</span><br><span class="line">cdvirtualenv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 进入虚拟环境的site-packages目录</span><br><span class="line">cdsitepackages</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 列出site-packages目录的所有软件包</span><br><span class="line">lssitepackages</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 停止虚拟环境</span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 删除虚拟环境</span><br><span class="line">rmvitualenv venv</span><br></pre></td></tr></table></figure><h3 id="3、-获取项目代码"><a href="#3、-获取项目代码" class="headerlink" title="3、 获取项目代码"></a>3、 获取项目代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># github clone 地址</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;openstack&#x2F;horizon.git</span><br></pre></td></tr></table></figure><h3 id="4、安装依赖"><a href="#4、安装依赖" class="headerlink" title="4、安装依赖"></a>4、安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;项目目录下:</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="5、配置项目"><a href="#5、配置项目" class="headerlink" title="5、配置项目"></a>5、配置项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建配置文件</span><br><span class="line">cp openstack_dashboard&#x2F;local&#x2F;local_settings.py.example openstack_dashboard&#x2F;local&#x2F;local_settings.py</span><br></pre></td></tr></table></figure><h3 id="6、运行项目"><a href="#6、运行项目" class="headerlink" title="6、运行项目"></a>6、运行项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;访问localhost:8000 打开登录界面；OK</span><br></pre></td></tr></table></figure><h3 id="7、过程中遇到的问题"><a href="#7、过程中遇到的问题" class="headerlink" title="7、过程中遇到的问题"></a>7、过程中遇到的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Exception has occurred: FilePermissionError</span><br><span class="line">Insecure permissions on key file &#x2F;mnt&#x2F;f&#x2F;work&#x2F;openstack&#x2F;horizon&#x2F;openstack_dashboard&#x2F;local&#x2F;.secret_key_store, should be 0600</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可能是linux文件权限错误，搜索后发现，local_settings.py使用了该文件，修改权限后依然不行，可能是我用了wsl的原因吧。</span><br><span class="line">&#x2F;&#x2F; 暂时先屏蔽 horizon&#x2F;openstack_dashboard&#x2F;local&#x2F;local_settings.py中对.secret_key_store的使用</span><br><span class="line"># SECRET_KEY &#x3D; secret_key.generate_or_read_from_file(os.path.join(LOCAL_PATH, &#39;.secret_key_store&#39;))</span><br><span class="line">SECRET_KEY&#x3D;&#39;GUM4T1AwQbF536JpKNQk10Vq0EpOIIudUQ0hpoAPBdTvDkgvUuuuGagAE4xajUVx&#39;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 生产力工具grep</title>
      <link href="/bianchengme/2020/07/28/Linux-%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7grep/"/>
      <url>/bianchengme/2020/07/28/Linux-%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7grep/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 切换启动图形界面为命令行界面</title>
      <link href="/bianchengme/2020/07/28/Linux-%E5%88%87%E6%8D%A2%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%B8%BA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2/"/>
      <url>/bianchengme/2020/07/28/Linux-%E5%88%87%E6%8D%A2%E5%90%AF%E5%8A%A8%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%B8%BA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 修改网络配置</title>
      <link href="/bianchengme/2020/07/28/Linux-%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE-1/"/>
      <url>/bianchengme/2020/07/28/Linux-%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 修改网络配置</title>
      <link href="/bianchengme/2020/07/28/Linux-%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/bianchengme/2020/07/28/Linux-%E4%BF%AE%E6%94%B9%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS中的async和await的用法和理解</title>
      <link href="/bianchengme/2020/07/26/JS%E4%B8%AD%E7%9A%84async-await%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E7%90%86%E8%A7%A3/"/>
      <url>/bianchengme/2020/07/26/JS%E4%B8%AD%E7%9A%84async-await%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="首先理解async的基本含义"><a href="#首先理解async的基本含义" class="headerlink" title="首先理解async的基本含义"></a>首先理解async的基本含义</h2><p>async 是一个修饰符，async 定义的函数会默认的返回一个Promise对象resolve的值，因此对async函数可以直接进行then操作,返回的值即为then方法的传入函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0. async基础用法测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun0().then( <span class="function"><span class="params">x</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(x) &#125;)  <span class="comment">//  输出结果 1， 1，</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">funa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'a'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funa().then( <span class="function"><span class="params">x</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(x) &#125;)  <span class="comment">//  输出结果a， a，</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">funo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(&#123;&#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funo().then( <span class="function"><span class="params">x</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(x) &#125;)   <span class="comment">// 输出结果 &#123;&#125;  &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">funp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Promise'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        resolve(<span class="string">'Promise'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funp().then( <span class="function"><span class="params">x</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(x) &#125;)   <span class="comment">// 输出promise  promise</span></span><br></pre></td></tr></table></figure><h3 id="await-也是一个修饰符"><a href="#await-也是一个修饰符" class="headerlink" title="await 也是一个修饰符"></a>await 也是一个修饰符</h3><p>await 关键字 只能放在 async 函数内部， await关键字的作用 就是获取 Promise中返回的内容， 获取的是Promise函数中resolve或者reject的值</p><blockquote><p>如果await 后面并不是一个Promise的返回值，则会按照同步程序返回值处理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  await 关键字 只能放在 async 函数内部， await关键字的作用 就是获取 Promise中返回的内容， 获取的是Promise函数中resolve或者reject的值</span></span><br><span class="line"><span class="comment">// 如果await 后面并不是一个Promise的返回值，则会按照同步程序返回值处理,为undefined</span></span><br><span class="line"><span class="keyword">const</span> bbb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="string">'string'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">funAsy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> a = <span class="keyword">await</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">const</span> b = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           resolve(<span class="string">'time'</span>)</span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">const</span> c = <span class="keyword">await</span> bbb()</span><br><span class="line">   <span class="built_in">console</span>.log(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funAsy()  <span class="comment">//  运行结果是 3秒钟之后 ，输出 1， time , string,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.如果不使用promise的方法的话</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log2</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(time)</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;, time)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="keyword">await</span> log2(<span class="number">5000</span>)</span><br><span class="line">    <span class="keyword">const</span> b = <span class="keyword">await</span> log2(<span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">const</span> c = log2(<span class="number">2000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上运行结果为： 立刻输出undefined   立刻输出1  2秒后输出2000  5秒后输出5000  10秒后输出10000</span></span><br></pre></td></tr></table></figure><h3 id="最后async-和-await的综合用法如下"><a href="#最后async-和-await的综合用法如下" class="headerlink" title="最后async 和 await的综合用法如下"></a>最后async 和 await的综合用法如下</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义一个或多个普通函数，函数必须返回Promise对象，如果返回其他类型的数据，将按照普通同步程序处理</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(time)</span><br><span class="line">           resolve()</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> log(<span class="number">5000</span>)</span><br><span class="line">    <span class="keyword">await</span> log(<span class="number">10000</span>)</span><br><span class="line">    log(<span class="number">1000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. async / await的重要应用 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asy = <span class="function"><span class="keyword">function</span>(<span class="params">x, time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(x)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="keyword">await</span> asy(<span class="number">3</span>, <span class="number">5000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">const</span> b = <span class="keyword">await</span> asy(<span class="number">4</span>, <span class="number">10000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">    <span class="keyword">const</span> c =  <span class="keyword">await</span> asy(<span class="number">5</span>, <span class="number">15000</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c)</span><br><span class="line">    <span class="keyword">const</span> d = a + b +c  </span><br><span class="line">    <span class="built_in">console</span>.log(d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5秒后输出3  又10秒后输出4 又15秒后输出5  然后立刻输出3,4,5，然后输出12</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 插槽和作用域插槽</title>
      <link href="/bianchengme/2020/07/26/Vue-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/"/>
      <url>/bianchengme/2020/07/26/Vue-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="首先插槽（slot）的理解"><a href="#首先插槽（slot）的理解" class="headerlink" title="首先插槽（slot）的理解"></a>首先插槽（slot）的理解</h2><ul><li>插槽（Slot）是Vue提出来的一个概念，正如名字一样，插槽用于决定将所携带的内容，插入到指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。</li><li>插槽显不显示、怎样显示是由父组件来控制的，而插槽在哪里显示就由子组件来进行控制<h2 id="如何使用插槽"><a href="#如何使用插槽" class="headerlink" title="如何使用插槽"></a>如何使用插槽</h2><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3>父组件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">    &lt;slotOne1&gt;</span><br><span class="line">      &lt;p style&#x3D;&quot;color:red&quot;&gt;我是父组件插槽内容&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;slotOne1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在父组件引用的子组件中写入想要显示的内容（可以使用标签，也可以不用，也可以是组件）</p></blockquote></li></ul><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;slotOne1&quot;&gt;</span><br><span class="line">    &lt;div&gt;我是slotOne1组件&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在子组件中写入slot，slot所在的位置就是父组件要显示的内容</p></blockquote><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;slottwo&quot;&gt;</span><br><span class="line">    &lt;div&gt;slottwo&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;slot name&#x3D;&quot;header&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;slot name&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在子组件中定义了三个slot标签，其中有两个分别添加了name属性header和footer</p></blockquote><p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">    &lt;slot-two&gt;</span><br><span class="line">      &lt;p&gt;啦啦啦，啦啦啦，我是卖报的小行家&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;template slot&#x3D;&quot;header&quot;&gt;</span><br><span class="line">          &lt;p&gt;我是name为header的slot&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">      &lt;p slot&#x3D;&quot;footer&quot;&gt;我是name为footer的slot&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;slot-two&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在父组件中使用template并写入对应的slot值来指定该内容在子组件中现实的位置（当然也不用必须写到template），没有对应值的其他内容会被放到子组件中没有添加name属性的slot中</p></blockquote><h3 id="插槽的默认值"><a href="#插槽的默认值" class="headerlink" title="插槽的默认值"></a>插槽的默认值</h3><p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">    &lt;slot-two&gt;&lt;&#x2F;slot-two&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;slottwo&quot;&gt;</span><br><span class="line">    &lt;slot&gt;我不是卖报的小行家&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可以在子组件的slot标签中写入内容，当父组件没有写入内容时会显示子组件的默认内容，当父组件写入内容时，会替换子组件的默认内容.</p></blockquote><h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">    &lt;slot-two&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;slot-two&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name： &#39;Jack&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;slottwo&quot;&gt;</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>专业解释：父组件应用子组件可以给插槽填充内容，但一般只填充html标签，里边的数据信息要由插槽自己提供，这个过程称为作用域插槽。<br>个人理解：父组件在用子组件来填充插槽的时候需要用到子组件里面插槽的数据。子组件文件插槽上带的数据在父组件的子组件标签里 让一个标签 带有slot-scope=”xxx” 去接收 以便在下面进行调用。</p><p>子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是作用域插槽的子组件</span><br><span class="line">    &lt;slot :data&#x3D;&quot;user&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;slotthree&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user: [</span><br><span class="line">        &#123;name: &#39;Jack&#39;, sex: &#39;boy&#39;&#125;,</span><br><span class="line">        &#123;name: &#39;Jone&#39;, sex: &#39;girl&#39;&#125;,</span><br><span class="line">        &#123;name: &#39;Tom&#39;, sex: &#39;boy&#39;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在子组件的slot标签上绑定需要的值</p></blockquote><p>父组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是作用域插槽</span><br><span class="line">    &lt;slot-three&gt;</span><br><span class="line">      &lt;template slot-scope&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;(item, index) in user.data&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;&#x2F;slot-three&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在父组件上使用slot-scope属性，user.data就是子组件传过来的值</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CALayer</title>
      <link href="/bianchengme/2020/05/19/CALayer/"/>
      <url>/bianchengme/2020/05/19/CALayer/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue学习笔记</title>
      <link href="/bianchengme/2020/05/18/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/bianchengme/2020/05/18/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>el是element的缩写；</p><p> constructor 构造函数</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue 学习计划</title>
      <link href="/bianchengme/2020/05/18/vue-%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/bianchengme/2020/05/18/vue-%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><input disabled="" type="checkbox"> 按照官方例子，使用<code>&lt;script&gt;</code>标签将官方教程（guide）写一遍，最终做个一个页面出来。（2d）</li><li><input disabled="" type="checkbox"> 根据官方的实例，自己写一个例子，比如编辑器。（1d）</li><li><input disabled="" type="checkbox"> 阅读官方进阶教程前半部分到自定义指令为止，着重理解vue的响应式机制和组件声明周期。『渲染函数（Render Function)』如果理解吃力可以先跳过。（1d）</li><li><input disabled="" type="checkbox"> 阅读教程里关于路由和状态管理的章节，然后根据需要学习vue-router和vuex。根据文档中的例子跟着即可。（1d）</li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li><input disabled="" type="checkbox"> <p>了解 JavaScript 背后的规范，ECMAScript 的历史和目前的规范制定方式。学习 ES2015/16 的新特性，理解 ES2015 modules，适当关注还未成为标准的提案，ES6以后是各个框架的标配，必须要学。（2d）</p></li><li><input disabled="" type="checkbox"> <p>命令行。(0.5d)</p></li><li><input disabled="" type="checkbox"> <p>nodejs基础。(0.5d)</p><blockquote><p>至少要了解 npm 的常用命令，npm scripts 如何使用，语义化版本号规则，CommonJS 模块规范（了解它和 ES2015 Modules 的异同），Node 包的解析规则，以及 Node 的常用 API。应当做到可以自己写一些基本的命令行程序。注意 Node (6+) 版本开始已经支持绝大部分 ES2015 的特性，可以借此巩固 ES2015。</p></blockquote></li><li><input disabled="" type="checkbox"> <p>了解如何使用 / 配置 Babel 来将 ES2015 编译到 ES5 用于浏览器环境。这个简单，看着Babel官网文档即可轻松配置。(0.5d)</p></li><li><input disabled="" type="checkbox"> <p>学习 Webpack。Webpack 是一个极其强大同时也复杂的工具，作为起步，理解它的『一切皆模块』的思想，并基本了解其常用配置选项和 loader 的概念/使用方法即可，比如如何搭配 Webpack 使用 Babel。(0.5d)</p><blockquote><p>学习 Webpack 的一个挑战在于其本身文档的混乱，建议多搜索搜索，应该还是有质量不错的第三方教程的。英文好的建议阅读 Webpack 2.0 的文档，比起 1.0 有极大的改善，但需要注意和 1.0 的不兼容之处。</p></blockquote><h2 id="Vue-进阶阶段"><a href="#Vue-进阶阶段" class="headerlink" title="Vue 进阶阶段"></a>Vue 进阶阶段</h2></li><li><input disabled="" type="checkbox"> <p>在 node 和 webpack 基础上，可以通过vue-cli来搭建基于webpack，并且支持单文件组件的项目了。建议使用webpick-simple这个模板开始，并阅读官方教程进阶篇剩余的内容以及vue-router的文档，了解一些进阶配置。可以自己亲手从零开始搭一个项目加深理解。(1d)</p></li><li><input disabled="" type="checkbox"> <p>根据 例子 尝试在 Webpack 模板基础上整合 vue-router 和 vuex。(1d)</p></li><li><input disabled="" type="checkbox"> <p>深入理解 Virtual DOM 和『渲染函数 (Render Functions)』这一章节（可选择性使用 JSX)，理解模板和渲染函数之间的对应关系，了解其使用方法和适用场景。(1d)</p></li><li><input disabled="" type="checkbox"> <p>可选）根据需求，了解服务端渲染的使用（需要配合 Node 服务器开发的知识）。介绍一下服务端渲染的概念。nuxt集合了 vue-router 和 vuex、webpack的搭建套餐，有SEO需要的可以着重了解下， 并不是必须要学，这只是一种场景方案。</p><blockquote><p>从头搭建一个服务端渲染的应用是相当复杂的。幸运的是，我们有一个优秀的社区项目 Nuxt.js 让这一切变得非常简单。Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染的 Vue 应用提供了极其便利的开发体验。更酷的是，你甚至可以用它来做为静态站生成器。推荐尝试。</p></blockquote></li><li><input disabled="" type="checkbox"> <p>阅读开源的 Vue 应用、组件、插件源码，自己尝试编写开源的 Vue 组件、插件。(2d)</p></li><li><input disabled="" type="checkbox"> <p>vue各种属性和概念如何结合react 组件混合用，也有必要了解一下，它们有些方案是可以通用的，比如jsx语法、vue用redux等。(2d)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UICollectionView</title>
      <link href="/bianchengme/2020/05/13/UICollectionView/"/>
      <url>/bianchengme/2020/05/13/UICollectionView/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义UITabBar样式</title>
      <link href="/bianchengme/2020/04/28/%E8%87%AA%E5%AE%9A%E4%B9%89UITabBar%E6%A0%B7%E5%BC%8F/"/>
      <url>/bianchengme/2020/04/28/%E8%87%AA%E5%AE%9A%E4%B9%89UITabBar%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Devops</title>
      <link href="/bianchengme/2020/04/27/Devops/"/>
      <url>/bianchengme/2020/04/27/Devops/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS Xcode, 解决“Could not insert new outlet connection”的问题</title>
      <link href="/bianchengme/2020/04/25/iOS-Xcode-%E8%A7%A3%E5%86%B3%E2%80%9CCould-not-insert-new-outlet-connection%E2%80%9D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/bianchengme/2020/04/25/iOS-Xcode-%E8%A7%A3%E5%86%B3%E2%80%9CCould-not-insert-new-outlet-connection%E2%80%9D%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在Xcode中，我们能够在StoryBoard编辑界面或者是xib编辑界面中通过“Control键+拖拽“的方式将某个界面元素和相应的代码文件连接起来。在代码文件里创建outlet。</p><p>只是。假设你的运气不太好。运行以上操作的过程中你可能会遇到以下这种错误：</p><p><strong>Could not insert new outlet connection: Could not find any information for the class named “xxx”.</strong></p><p>假设你遇到这种问题。拿着上面的错误消息去百度一下会发现非常多相关的内容，有各种各样的解决方法，只是效果就众说纷纭，有人说这种方法好用，有人说那个方法好用，在这里就整理一下常见的一些情况和相应的解决方法。</p><p>首先第一种情况是最简单的，也是最easy被忽略的，就是你在新建类的时候没有选择将这个类增加到相应的“Target”中。</p><p>检查方法非常easy，选中你须要操作的类的.m文件。在“File inspector”界面的“Target Membership”中确认相应的“Target”有没有选中，假设没有选中就说明你在创建类的时候犯了各小小的错误。</p><p>改动方法非常easy，直接在“File inspector”界面的“Target Membership”中选上相应的target就好了。</p><p>假设你的情况和以上不符，有可能是你的项目Derive文件有点问题，解决方法有以下几种，原理都差点儿相同，就是尝试重建项目的一些后台文件。</p><ol><li>又一次将文件增加项目</li></ol><p>操作步骤就是选中出问题的.m和.h文件，点删除键，然后选“Remove Reference”，这样就不会真正删除文件。</p><p>接着选“File -&gt; Add Files to …”菜单，在文件选择界面选择刚才的.m文件和.h文件将他们又一次增加项目中。</p><ol start="2"><li>直接删除DeriveData</li></ol><p>操作步骤是关闭当前项目，然后关闭Xcode。然后通过Terminal或者是Finder找到以下的文件夹：</p><p><strong>~/Library/Developer/XCode/DerivedData</strong></p><p>在里面找到以你的项目开头的文件，将他们删除。</p><p>接着又一次启动Xcode</p><ol start="3"><li>在Organizer中删除项目的DeriveData</li></ol><p>假设你对Mac操作系统不了解。不知道假设操作第2种解决方法，有一个更加直接的方法，就是在Xcode中选择“Windows-&gt;Organizer”，然后选择“Projects”，选中你正在处理的项目，点击“DeriveData”相应的“Delete”button，Xcode会删除该项目的DeriveData。然后自己主动又一次生成一个。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS13修改status bar 的字体颜色</title>
      <link href="/bianchengme/2020/04/25/iOS13%E4%BF%AE%E6%94%B9status-bar-%E7%9A%84%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/"/>
      <url>/bianchengme/2020/04/25/iOS13%E4%BF%AE%E6%94%B9status-bar-%E7%9A%84%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<p>StatusBarStyle定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, UIStatusBarStyle) &#123;</span><br><span class="line">UIStatusBarStyleDefault                                  &#x3D; 0, &#x2F;&#x2F; 根据用户交互样式自动选择状态条样式</span><br><span class="line">UIStatusBarStyleLightContent     API_AVAILABLE(ios(7.0)) &#x3D; 1, &#x2F;&#x2F; Light content, for use on dark backgrounds</span><br><span class="line">UIStatusBarStyleDarkContent     API_AVAILABLE(ios(13.0)) &#x3D; 3, &#x2F;&#x2F; Dark content, for use on light backgrounds</span><br><span class="line">UIStatusBarStyleBlackTranslucent NS_ENUM_DEPRECATED_IOS(2_0, 7_0, &quot;Use UIStatusBarStyleLightContent&quot;) &#x3D; 1,</span><br><span class="line">UIStatusBarStyleBlackOpaque      NS_ENUM_DEPRECATED_IOS(2_0, 7_0, &quot;Use UIStatusBarStyleLightContent&quot;) &#x3D; 2,</span><br><span class="line">&#125; API_UNAVAILABLE(tvos);</span><br></pre></td></tr></table></figure><p>定制状态条的样式 使用apple 推荐的这个系统方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ios 13.0 之后，这个方法已经失效了</span><br><span class="line">&#x2F;&#x2F; [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleDefault];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在UIViewController中重写方法</span><br><span class="line">- (UIStatusBarStyle)preferredStatusBarStyle &#123;</span><br><span class="line">    if (@available(iOS 13.0, *))&#123;</span><br><span class="line">        return UIStatusBarStyleDarkContent;</span><br><span class="line">    &#125;</span><br><span class="line">    return UIStatusBarStyleDefault;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你还是使用的Xcode 10 为了走过编译器这一步，可以使用预编译命令，这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#if defined(__IPHONE_13_0) &amp;&amp; __IPHONE_OS_VERSION_MAX_ALLOWED &gt;&#x3D; __IPHONE_13_0</span><br><span class="line">    if (@available(iOS 13.0, *)) &#123;</span><br><span class="line">        [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleDarkContent];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleDefault];</span><br><span class="line">    &#125;</span><br><span class="line">#else</span><br><span class="line">    [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleDefault];</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 常用命令</title>
      <link href="/bianchengme/2020/04/25/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/bianchengme/2020/04/25/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>提交git commit 的时候，发现一个文件无法被gitinore，猜测可能是已经提交过或者已经在git缓存里了，只有删除追踪和缓存才能被忽略。</p><p>1、先尝试取消git追踪文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index –assume-unchanged readme1.txt &#x2F;&#x2F;清除该文件的是索引</span><br></pre></td></tr></table></figure><ul><li>本地的当前分支取消了追踪</li><li>本文文件不删除， 远程仓库仍是存在此文件。</li><li>本次clone的所有分支都不追踪此文件。</li><li>重新git clone后此文件仍是会被追踪。</li><li>但是不能彻底消除追踪文件，因为可能本地git缓存中有该文件。</li></ul><p>2、删除git的缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached readme1.txt &#x2F;&#x2F;删除readme1.txt的git的缓存，并保留本地文件。</span><br></pre></td></tr></table></figure><ul><li>如果想本地缓存和文件一起删除 <code>git rm --f readme1.txt</code></li></ul><p>这时候再次 <code>git status</code>看看应该就不显示 readme1.txt了。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocoapods CDN 错误</title>
      <link href="/bianchengme/2020/04/24/Cocoapods-CDN-%E9%94%99%E8%AF%AF/"/>
      <url>/bianchengme/2020/04/24/Cocoapods-CDN-%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>最近Cocoapods升级到1.8.4后，install和update都没有问题，但是search的时候就遇到了问题，问题如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CDN: trunk URL couldn&#39;t be downloaded: https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;CocoaPods&#x2F;Specs&#x2F;master&#x2F;Specs&#x2F;0&#x2F;a&#x2F;8&#x2F;YYModel@Haidora&#x2F;1.0.4&#x2F;YYModel@Haidora.podspec.json, </span><br><span class="line">error: Failed to open TCP connection to raw.githubusercontent.com:443 (Connection refused - connect(2) for &quot;raw.githubusercontent.com&quot; port 443)</span><br></pre></td></tr></table></figure><p>解决办法比较简单，<strong>在Podfile中添加source</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">source &#39;https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;Specs.git&#39;</span><br><span class="line"></span><br><span class="line">target &#39;XXXDemo&#39; do</span><br><span class="line"></span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  pod &#39;YYModel&#39;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><strong>移除trunk</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo remove trunk</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>为什么这样呢，很明显CDN的错误，这个问题如何解决呢，改日再找找…</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Xcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Objective-C之NS_ASSUME_NONNULL_BEGIN &amp; NS_ASSUME_NONNULL_END</title>
      <link href="/bianchengme/2020/04/24/Objective-C%E4%B9%8BNS-ASSUME-NONNULL-BEGIN-NS-ASSUME-NONNULL-END/"/>
      <url>/bianchengme/2020/04/24/Objective-C%E4%B9%8BNS-ASSUME-NONNULL-BEGIN-NS-ASSUME-NONNULL-END/</url>
      
        <content type="html"><![CDATA[<h1 id="NS-ASSUME-NONNULL-BEGIN-amp-amp-NS-ASSUME-NONNULL-END"><a href="#NS-ASSUME-NONNULL-BEGIN-amp-amp-NS-ASSUME-NONNULL-END" class="headerlink" title="NS_ASSUME_NONNULL_BEGIN &amp;&amp; NS_ASSUME_NONNULL_END"></a>NS_ASSUME_NONNULL_BEGIN &amp;&amp; NS_ASSUME_NONNULL_END</h1><p>在Swift中存在Option类型，也就是使用？和！声明的变量。但是OC里面没有这个特征,因为在XCODE6.3之后出现新的关键词定义用于OC转SWIFT时候可以区分到底是什么类型</p><p><strong>nullable &amp;&amp; _</strong>nonnull<br>__nullable指代对象可以为NULL或者为NIL<br>__nonnull指代对象不能为null<br>当我们不遵循这一规则时，编译器就会给出警告。</p><p>我们来看看以下的实例，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@interface TestNullabilityClass ()</span><br><span class="line">@property (nonatomic, copy) NSArray * items;</span><br><span class="line">- (id)itemWithName:(NSString * __nonnull)name;</span><br><span class="line">@end</span><br><span class="line">@implementation TestNullabilityClass</span><br><span class="line">...</span><br><span class="line">- (void)testNullability &#123;</span><br><span class="line">    [self itemWithName:nil];    &#x2F;&#x2F; 编译器警告：Null passed to a callee that requires a non-null argument</span><br><span class="line">&#125;</span><br><span class="line">- (id)itemWithName:(NSString * __nonnull)name &#123;</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>事实上，在任何可以使用<code>const</code>关键字的地方都可以使用<code>__nullable</code>和<code>__nonnull</code>，不过这两个关键字仅限于使用在指针类型上。而在方法的声明中，我们还可以使用不带下划线的<code>nullable</code>和<code>nonnull</code>，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (nullable id)itemWithName:(NSString * nonnull)name</span><br></pre></td></tr></table></figure><p>在属性声明中，也增加了两个相应的特性，因此上例中的items属性可以如下声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, copy, nonnull) NSArray * items;</span><br></pre></td></tr></table></figure><p>当然也可以用以下这种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, copy) NSArray * __nonnull items;</span><br></pre></td></tr></table></figure><p>推荐使用<code>nonnul</code>l这种方式，这样可以让属性声明看起来更清晰。</p><p><code>Non null</code>区域设置(Audited Regions)</p><p>如果需要每个属性或每个方法都去指定<code>nonnull</code>和<code>nullable</code>，是一件非常繁琐的事。苹果为了减轻我们的工作量，专门提供了两个宏：<code>NS_ASSUME_NONNULL_BEGIN</code>和<code>NS_ASSUME_NONNULL_END</code>。在这两个宏之间的代码，所有简单指针对象都被假定为nonnull，因此我们只需要去指定那些nullable的指针。如下代码所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line">@interface TestNullabilityClass ()</span><br><span class="line">@property (nonatomic, copy) NSArray * items;</span><br><span class="line">- (id)itemWithName:(nullable NSString *)name;</span><br><span class="line">@end</span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure><p>在上面的代码中，items属性默认是<code>non null</code>的，itemWithName:方法的返回值也是<code>non null</code>，而参数是指定为<code>nullable</code>的。</p><p>不过，为了安全起见，苹果还制定了几条规则：</p><p>typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为<code>nonnulla</code>。<br> 复杂的指针类型(如id *)必须显示去指定是<code>nonnull</code>还是<code>nullable</code>。例如，指定一个指向<code>nullable</code>对象的<code>nonnull</code>指针，可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__nullable id * __nonnull</span><br></pre></td></tr></table></figure><p>我们经常使用的<code>NSError **</code>通常是被假定为一个指向<code>nullable NSError</code>对象的nullable指针。<br> 兼容性</p><p>因为Nullability Annotations是Xcode 6.3新加入的，所以我们需要考虑之前的老代码。实际上，苹果已以帮我们处理好了这种兼容问题，我们可以安全地使用它们：</p><p>老代码仍然能正常工作， 即使对<code>nonnull</code>对象使用了nil也没有问题。<br> 老代码在需要和swift混编时，在新的swift编译器下会给出一个警告。<br> <code>nonnull</code>不会影响性能。事实上，我们仍然可以在运行时去判断我们的对象是否为<code>nil</code>。<br> 事实上，我们可以将<code>nonnull/nullable</code>与我们的断言和异常一起看待，其需要处理的问题都是同一个：违反约定是一个程序员的错误。特别是，返回值是我们可控的东西，如果返回值是<code>nonnull</code>的，则我们不应该返回<code>nil</code>，除非是为了向后兼容。</p><h1 id="NS-ENUM-AVAILABLE-IOS"><a href="#NS-ENUM-AVAILABLE-IOS" class="headerlink" title="NS_ENUM_AVAILABLE_IOS"></a>NS_ENUM_AVAILABLE_IOS</h1><p>从单词的字面可以看出使用这个宏说明这个枚举开始IOS的版本</p><blockquote><p>IOS版本如下 7_0 代表7.0的版本.用_替换<br> 参数只有一个NS_ENUM_AVAILABLE_IOS(2_0) 代表&gt;=2.0开始</p></blockquote><h1 id="NS-ENUM-DEPRECATED-IOS"><a href="#NS-ENUM-DEPRECATED-IOS" class="headerlink" title="NS_ENUM_DEPRECATED_IOS"></a>NS_ENUM_DEPRECATED_IOS</h1><p>代表枚举类型已经过时的API 第一个参数是开始的时候，第二个参数是过时的时候</p><blockquote><p>NS_ENUM_DEPRECATED_IOS(2_0,7_0) 代表开始于IOS2.0废弃于IOS7.0 也就是&gt;=2.0 &lt;=7.0</p></blockquote><h1 id="TVOS-PROHIBITED"><a href="#TVOS-PROHIBITED" class="headerlink" title="__TVOS_PROHIBITED"></a>__TVOS_PROHIBITED</h1><blockquote><p>代表这个枚举或者类，方法，参数在TVOS系统上面不能使用</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIStatusBarStyle</span>) &#123;</span><br><span class="line">    <span class="built_in">UIStatusBarStyleDefault</span>                                     = <span class="number">0</span>, <span class="comment">// Dark content, for use on light backgrounds</span></span><br><span class="line">    <span class="built_in">UIStatusBarStyleLightContent</span>     <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">7</span>_0) = <span class="number">1</span>, <span class="comment">// Light content, for use on dark backgrounds</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIStatusBarStyleBlackTranslucent</span> <span class="built_in">NS_ENUM_DEPRECATED_IOS</span>(<span class="number">2</span>_0, <span class="number">7</span>_0, <span class="string">"Use UIStatusBarStyleLightContent"</span>) = <span class="number">1</span>,</span><br><span class="line">    <span class="built_in">UIStatusBarStyleBlackOpaque</span>      <span class="built_in">NS_ENUM_DEPRECATED_IOS</span>(<span class="number">2</span>_0, <span class="number">7</span>_0, <span class="string">"Use UIStatusBarStyleLightContent"</span>) = <span class="number">2</span>,</span><br><span class="line">&#125; __TVOS_PROHIBITED;</span><br></pre></td></tr></table></figure><h1 id="UIKIT-EXTERN"><a href="#UIKIT-EXTERN" class="headerlink" title="UIKIT_EXTERN"></a>UIKIT_EXTERN</h1><blockquote><p><code>extern</code>这个是定义字符串 变量 比<code>#define</code>更加的高效 .但是UIKIT_EXTERN是根据是否是C语言宏定义，根据语言区分 ，比extern更加的高效</p></blockquote><h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIApplicationInvalidInterfaceOrientationException</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码一般定义在.H 在.M实现 实现要去掉UIKIT_EXTERN.代表IOS6.0之后可以用，在TVOS系统不可用。</p></blockquote><h1 id="NS-CLASS-AVAILABLE-IOS"><a href="#NS-CLASS-AVAILABLE-IOS" class="headerlink" title="NS_CLASS_AVAILABLE_IOS"></a>NS_CLASS_AVAILABLE_IOS</h1><blockquote><p>代表类开始的API 和上面说的类似</p></blockquote><h6 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h6><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UIApplication</span> : <span class="title">UIResponder</span></span></span><br></pre></td></tr></table></figure><h1 id="NS-EXTENSION-UNAVAILABLE-IOS"><a href="#NS-EXTENSION-UNAVAILABLE-IOS" class="headerlink" title="NS_EXTENSION_UNAVAILABLE_IOS"></a>NS_EXTENSION_UNAVAILABLE_IOS</h1><blockquote><p>标记IOS插件不能使用这些API,后面有一个参数，可以作为提示，用什么API替换</p></blockquote><h6 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h6><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">UIApplication</span> *)sharedApplication <span class="built_in">NS_EXTENSION_UNAVAILABLE_IOS</span>(<span class="string">"Use view controller based solutions where appropriate instead."</span>);</span><br></pre></td></tr></table></figure><h1 id="kindof"><a href="#kindof" class="headerlink" title="__kindof"></a>__kindof</h1><blockquote><p>可以参考下面的连接 我就不多啰嗦了</p></blockquote><p><a href="https://link.jianshu.com?t=http://blog.csdn.net/leikezhu1981/article/details/47418011" target="_blank" rel="noopener">Xcode 7新的特性Lightweight Generics 轻量级泛型与__kindof修饰符</a></p><h1 id="NS-REQUIRES-SUPER"><a href="#NS-REQUIRES-SUPER" class="headerlink" title="NS_REQUIRES_SUPER"></a>NS_REQUIRES_SUPER</h1><blockquote><p>字面上必须继承父类的方法(有待考证)</p></blockquote><h1 id="SDK-HIDE-TIDE"><a href="#SDK-HIDE-TIDE" class="headerlink" title="SDK_HIDE_TIDE"></a>SDK_HIDE_TIDE</h1><blockquote><p>暂定 没查到干什么的 字面上是在SDK隐藏</p></blockquote><h1 id="NS-DESIGNATED-INITIALIZER"><a href="#NS-DESIGNATED-INITIALIZER" class="headerlink" title="NS_DESIGNATED_INITIALIZER"></a>NS_DESIGNATED_INITIALIZER</h1><blockquote><p>用来定义一些初始化方法只能过来这些标记的初始化</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> Objective-C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用clang编译Objective-C对象，理解运行时机制</title>
      <link href="/bianchengme/2020/04/19/%E7%94%A8clang%E7%BC%96%E8%AF%91Objective-C%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%90%86%E8%A7%A3%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/bianchengme/2020/04/19/%E7%94%A8clang%E7%BC%96%E8%AF%91Objective-C%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%90%86%E8%A7%A3%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>我们知道<code>Objective-C</code>的类可以通过<code>clang</code>编译器转换为<code>C++</code>的结构体，也就是说，<code>Objective-C</code>对象的本质就是结构体，下面通过实践来证明。</p><p>创建一个命令行项目（<a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fnchkdxlq%2FClassDemo" target="_blank" rel="noopener">这里</a>可以找到），在main.m文件添加如下的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line">@interface Person: NSObject &#123;</span><br><span class="line">    int _age;</span><br><span class="line">    double _height;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        &#x2F;&#x2F; insert code here...</span><br><span class="line">        NSLog(@&quot;Hello, World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用<code>clang</code>编译器重写<code>main.m</code>文件，可指定平台iOS和架构arm64，在main.m所在的文件夹执行如下命令</p><p><code>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o main-arm64.cpp</code> </p><p>会得到一个main-arm64.cpp的文件，可看到<code>Person</code>类转换为<code>struct Person_IMPL</code>结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person_IMPL</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NSObject_IMPL</span> <span class="title">NSObject_IVARS</span>;</span></span><br><span class="line">    <span class="keyword">int</span> _age;</span><br><span class="line">    <span class="keyword">double</span> _height;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>存在上面定义<code>Person</code>类时声明的<code>_age</code>和<code>_height</code>成员变量，发现第一个成员变量是<code>struct NSObject_IMPL</code>结构体，这是<code>NSObject</code>被<code>clang</code>编译器重写后对应的结构体，在<code>main-arm64.cpp</code>文件中可找到声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NSObject_IMPL</span> &#123;</span></span><br><span class="line">    Class isa;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实例对象（instance）"><a href="#实例对象（instance）" class="headerlink" title="实例对象（instance）"></a>实例对象（instance）</h2><p><code>Objictive-C</code><strong>实例对象</strong>是通过<strong>类对象</strong>创建</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person *p1 = [Person <span class="keyword">new</span>];</span><br><span class="line">Person *p2 = [[Person alloc] init];</span><br></pre></td></tr></table></figure><p><strong>实例对象</strong>分配在<strong>堆空间</strong>，所以<strong>p1、p2</strong>指向的内存地址都在<strong>堆</strong>上；每次创建的都是不同的对象，所以在内存中会存在很多个实例对象。</p><p>把<code>struct NSObject_IMPL</code>与<code>struct Person_IMPL</code>合并一下得到下面的结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person_IMPL</span> &#123;</span></span><br><span class="line">    Class isa;</span><br><span class="line">    <span class="keyword">int</span> _age;</span><br><span class="line">    <span class="keyword">double</span> _height;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这也是<code>Person</code>实例对象在内存中的布局情况。</p><p>总结一下实例对象中包含信息</p><ul><li><strong>isa</strong>指针，指向类对象</li><li>成员变量，其实<strong>isa</strong>也是成员变量，只不过比较特殊，它指向这个实例对象的类对象。</li></ul><h2 id="类对象（class）"><a href="#类对象（class）" class="headerlink" title="类对象（class）"></a>类对象（class）</h2><p>类对象是对实例对象的描述，描述这个类实例对象有哪些成员变量、属性、对象方法、类方法，那这些信息存储在什么地方呢？（下面提及的数据类型<a href="https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fnchkdxlq%2Fobjc-runtime%2Ftree%2Fmaster%2Fruntime" target="_blank" rel="noopener">这里</a>可以找到）</p><p>类对象声明为<code>typedef struct objc_class *Class;</code>，再看看<code>struct objc_class</code>结构体，截取一些关键的信息看看</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> :</span> objc_object &#123;</span><br><span class="line">    <span class="comment">// Class ISA;</span></span><br><span class="line">    Class superclass;</span><br><span class="line">    <span class="keyword">cache_t</span> cache;             <span class="comment">// formerly cache pointer and vtable</span></span><br><span class="line">    <span class="keyword">class_data_bits_t</span> bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></span><br><span class="line">    <span class="function"><span class="keyword">class_rw_t</span> *<span class="title">data</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> bits.data();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 还有很多方法，略去</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p><code>superclass</code>指向父类，其他的信息存储在<code>class_rw_t</code>的结构体中，定义如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">class_rw_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">class_ro_t</span> *ro; <span class="comment">// 实例变量信息</span></span><br><span class="line">    <span class="keyword">method_array_t</span> methods; <span class="comment">// 对象方法信息</span></span><br><span class="line">    <span class="keyword">property_array_t</span> properties; <span class="comment">// 属性信息</span></span><br><span class="line">    <span class="keyword">protocol_array_t</span> protocols; <span class="comment">// 协议信息</span></span><br><span class="line">     <span class="comment">// ... 省略其他信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>runtime</code>提供这些信息函数如下</p><p>获取实例变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ivar *</span><br><span class="line">class_copyIvarList(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br></pre></td></tr></table></figure><p>获取属性信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">objc_property_t</span> * </span><br><span class="line">class_copyPropertyList(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br></pre></td></tr></table></figure><p>获取对象方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数是 *类对象*，返回的是*对象方法*；如果是参数*元类对象*，返回的是*对象方法*</span></span><br><span class="line">Method *</span><br><span class="line">class_copyMethodList(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br></pre></td></tr></table></figure><p>获取协议信息</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Protocol * __<span class="keyword">unsafe_unretained</span> * </span><br><span class="line">class_copyProtocolList(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br></pre></td></tr></table></figure><p><code>struct objc_class</code>继承<code>objc_object</code>，<code>struct objc_object</code>结构如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_object</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">isa_t</span> isa;</span><br><span class="line">    <span class="comment">// ...省略方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那<code>isa_t</code>是联合体，结构如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">isa_t</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">isa_t</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">isa_t</span>(<span class="keyword">uintptr_t</span> value) : bits(value) &#123; &#125;</span><br><span class="line">    Class cls;</span><br><span class="line">    <span class="keyword">uintptr_t</span> bits;</span><br><span class="line">     <span class="comment">// ...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面有个 <code>cls</code>成员，这个就是<code>class</code>指向<code>mata-class</code>的指针。</p><p>总结一下<strong>类对象（class）</strong>中存储的信息</p><ul><li><strong>isa</strong>指针，指向<strong>元类</strong>的指针</li><li><strong>superclass</strong>指向<strong>父类</strong>的指针</li><li><strong>成员变量（Ivar）</strong>的描述信息</li><li><strong>属性（property）</strong>的描述信息</li><li><strong>对象方法（Instance Method）</strong>的描述信息</li><li><strong>遵循协议（protocol）</strong>的描述信息</li></ul><h2 id="元类对象（meta-class）"><a href="#元类对象（meta-class）" class="headerlink" title="元类对象（meta-class）"></a>元类对象（meta-class）</h2><p>上面可以看出，<strong>meta-class</strong>也是一个<strong>Class \</strong>类型，与*<em>类对象*</em>的数据类型时一样的，只不过存储的信息不同。<br> <strong>元类对象（meta-class）</strong>存储的信息有</p><ul><li><strong>isa</strong>指针，指向基类（NSObject）<strong>元类（meta-class）</strong>的指针，所有<strong>元类（meta-class）</strong>的<strong>isa</strong>指针都指向<strong>NSObject</strong>元类的指针。</li><li><strong>superclass</strong>指向父类的<strong>元类（meta-class）</strong>的指针</li><li><strong>类方法（class Method）</strong>的描述信息</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面讲了<strong>实例对象</strong>的内存布局，以及<strong>实例对象（instance）</strong>、<strong>类对象（class）</strong>、<strong>元类对象（meta-class）</strong>之间的关系，最后用一张图来说明它们之间的关系。</p><p><img src="/Users/guagua/program/hexo/xinghaizi/source/_posts/%E7%94%A8clang%E7%BC%96%E8%AF%91Objective-C%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%90%86%E8%A7%A3%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9C%BA%E5%88%B6/01.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm ERR! code EINTEGRITY</title>
      <link href="/bianchengme/2020/04/14/npm-ERR-code-EINTEGRITY/"/>
      <url>/bianchengme/2020/04/14/npm-ERR-code-EINTEGRITY/</url>
      
        <content type="html"><![CDATA[<p>在用npm安装bower <code>sudo npm install -g bower</code> 报错 <code>npm ERR! code EINTEGRITY</code> 产生的原因似乎是node源的问题，下面是我解决问题的过程。</p><ol><li><p>切换为淘宝的源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">npm info underscore</span><br></pre></td></tr></table></figure></li><li><p>清理缓存</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm cache verify</span><br><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure><ol start="3"><li>更新npm</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm</span><br></pre></td></tr></table></figure><ol start="4"><li>再次尝试安装看是否有效。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS 面试题简要汇总</title>
      <link href="/bianchengme/2020/04/12/iOS-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AE%80%E8%A6%81%E6%B1%87%E6%80%BB/"/>
      <url>/bianchengme/2020/04/12/iOS-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AE%80%E8%A6%81%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="常见面试题的概要汇总"><a href="#常见面试题的概要汇总" class="headerlink" title="常见面试题的概要汇总"></a>常见面试题的概要汇总</h2><h3 id="代理为什么要用weak-delegate-和-DataSource-区别，block和delegate区别？"><a href="#代理为什么要用weak-delegate-和-DataSource-区别，block和delegate区别？" class="headerlink" title="代理为什么要用weak, delegate 和 DataSource 区别，block和delegate区别？"></a>代理为什么要用weak, delegate 和 DataSource 区别，block和delegate区别？</h3><ul><li>防止循环引用；</li><li>delegate主要是操作,dataSource主要是提供数据;</li><li>block方便引用上下文，代码更容易理解，轻量级，容易造成循环引用；delegate架构设计更清晰，用weak修饰不容易造成循环引用，没有block轻量级；</li></ul><h3 id="属性的实质是什么？包括哪几个部分？属性默认的关键字都有哪些？-dynamic关键字和-synthesize关键字是用来做什么的？"><a href="#属性的实质是什么？包括哪几个部分？属性默认的关键字都有哪些？-dynamic关键字和-synthesize关键字是用来做什么的？" class="headerlink" title="属性的实质是什么？包括哪几个部分？属性默认的关键字都有哪些？@dynamic关键字和@synthesize关键字是用来做什么的？"></a>属性的实质是什么？包括哪几个部分？属性默认的关键字都有哪些？@dynamic关键字和@synthesize关键字是用来做什么的？</h3><ul><li>属性本质是@property = ivar + get + set,即会自动生成get/set方法；</li><li>默认关键字有atomic\nonatomic@synthesize@dynamic\getter=getterName\setter=setterName\readwrite\readonly\assign\retian\copy\strong\weak等;</li><li>@dynamic,动态实现属性访问方法，需要再NSObject中实现 <code>+(BOOL)resolveInstanceMethod(SEL) sel</code> 方法中指定动态实现的函数或者方法，或者手动实现方法；</li><li>@Synthesize 自动实现get、set方法；</li></ul><h3 id="NSString为什么要用copy，如果用strong会有什么问题？"><a href="#NSString为什么要用copy，如果用strong会有什么问题？" class="headerlink" title="NSString为什么要用copy，如果用strong会有什么问题？"></a>NSString为什么要用copy，如果用strong会有什么问题？</h3><ul><li>NSString指向NSMUtableString时，如果用copy，则是深copy，strong 则是指向同一个对象，有可变的隐患；</li><li>不可变字符串则是一样效果；copy在这种情况下是浅copy；</li></ul><h3 id="copy、mutablecopy什么时候是深copy、浅copy，可变对象copy后有什么影响？"><a href="#copy、mutablecopy什么时候是深copy、浅copy，可变对象copy后有什么影响？" class="headerlink" title="copy、mutablecopy什么时候是深copy、浅copy，可变对象copy后有什么影响？"></a>copy、mutablecopy什么时候是深copy、浅copy，可变对象copy后有什么影响？</h3><ul><li>copy不可变对象浅copy，引用计数+1，copy可变对象深copy；</li><li>mutablecopy全部是深copy；</li><li>mutable对象copy后变不可变对象,所以NSMutableString不可用copy修饰；</li><li>不可变对象mutablecopy后变为可变对象；</li><li>对数组深copy，数组中的对应依然是浅copy;可通过<code>initWithArray:copyItems:</code>或者归档解档实现(对多层嵌套依然有效)；</li></ul><h3 id="自定义对象如果实现copy、mutablecopy？"><a href="#自定义对象如果实现copy、mutablecopy？" class="headerlink" title="自定义对象如果实现copy、mutablecopy？"></a>自定义对象如果实现copy、mutablecopy？</h3><ul><li>实现nscopying和NSMutableCopying协议；</li></ul><h3 id="IBOutLet修饰的UIView也适用weak；"><a href="#IBOutLet修饰的UIView也适用weak；" class="headerlink" title="IBOutLet修饰的UIView也适用weak；"></a>IBOutLet修饰的UIView也适用weak；</h3><ul><li>因为视图view已经对子视图有强引用了；</li></ul><h3 id="nonatomic-atomic区别；atomic是绝对的线程安全吗，如果不是如何实现；"><a href="#nonatomic-atomic区别；atomic是绝对的线程安全吗，如果不是如何实现；" class="headerlink" title="nonatomic atomic区别；atomic是绝对的线程安全吗，如果不是如何实现；"></a>nonatomic atomic区别；atomic是绝对的线程安全吗，如果不是如何实现；</h3><ul><li>atomic 保障了get、set方法的完整性；</li><li>atomic 不是绝对的线程安全，set同时其他线程可以get；如果要线程安全可以使用线程锁；</li></ul><h3 id="UICollectionView如何实现自定义？"><a href="#UICollectionView如何实现自定义？" class="headerlink" title="UICollectionView如何实现自定义？"></a>UICollectionView如何实现自定义？</h3><ul><li>UICollectionViewLayoutAttributes,UICollectionFlowLayout;</li></ul><h3 id="StoryBoard开发界面有什么弊端，如何避免；"><a href="#StoryBoard开发界面有什么弊端，如何避免；" class="headerlink" title="StoryBoard开发界面有什么弊端，如何避免；"></a>StoryBoard开发界面有什么弊端，如何避免；</h3><ul><li>难以维护，比如全局改动一个字体；</li><li>storyBoard过大的话，加载速度慢；</li><li>遇到错误，提示不明显；</li><li>动态修改属性通过代码实现；</li><li>部分可以独立的view 可使用xib；</li></ul><h3 id="进程与线程、同步与异步、并行与并发还有穿行；"><a href="#进程与线程、同步与异步、并行与并发还有穿行；" class="headerlink" title="进程与线程、同步与异步、并行与并发还有穿行；"></a>进程与线程、同步与异步、并行与并发还有穿行；</h3><ul><li>进程是系统内的一个运行的程序，比如一个运行的exe就是一个进程；线程是进程中的一个执行流程；</li><li>同步是顺序执行，执行完成一个在执行下个任务，需要等待，派发任务时需要任务执行完；</li><li>异步是彼此任务独立，在等待某事件的过程中继续做自己的事，不需要等待这些事件完成后再工作，派发任务不会立即执行；</li><li>并发是一个cpu多个任务复用，轮番执行任务，多个任务共享，提高效率；</li><li>并行是多个cpu同时处理多个任务；</li><li>穿行就是任务顺序执行；</li></ul><h2 id="线程间通信；"><a href="#线程间通信；" class="headerlink" title="线程间通信；"></a>线程间通信；</h2><ul><li>NSThread</li><li>GCD</li><li>NSOperation</li></ul><h3 id="GCD中常用函数"><a href="#GCD中常用函数" class="headerlink" title="GCD中常用函数"></a>GCD中常用函数</h3><ul><li>延迟派发dispatch_after()</li><li>一次性执行 dispatch_once()</li><li>栅栏函数 dispatch_barrier_async/dispatch_barrier_sync</li><li>队列组 dispatch_group</li><li>GCD 定时器 并且更加精确</li></ul><h3 id="如何使用队列来避免资源抢夺？"><a href="#如何使用队列来避免资源抢夺？" class="headerlink" title="如何使用队列来避免资源抢夺？"></a>如何使用队列来避免资源抢夺？</h3><ul><li>dispatch_barrier_async,等前面队列完成后再进行操作；</li></ul><h3 id="数据持久化方案"><a href="#数据持久化方案" class="headerlink" title="数据持久化方案"></a>数据持久化方案</h3><ul><li>coreData realm fmdb</li></ul><h3 id="Appdelegate-方法，第一次启动调用方法，从前台到后台调用方法；"><a href="#Appdelegate-方法，第一次启动调用方法，从前台到后台调用方法；" class="headerlink" title="Appdelegate 方法，第一次启动调用方法，从前台到后台调用方法；"></a>Appdelegate 方法，第一次启动调用方法，从前台到后台调用方法；</h3><ul><li>第一次调用的方法是</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br></pre></td></tr></table></figure><ul><li>前台到后台调用方法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)applicationWillResignActive:(UIApplication *)application <span class="comment">//将要进入后台</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationDidEnterBackground:(UIApplication *)application<span class="comment">//已经进入后台</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillEnterForeground:(UIApplication *)application<span class="comment">//将要进入前台</span></span><br><span class="line"> - (<span class="keyword">void</span>)applicationDidBecomeActive:(UIApplication *)application<span class="comment">//已经进入前台</span></span><br><span class="line"> - (<span class="keyword">void</span>)applicationWillTerminate:(UIApplication *)application<span class="comment">//程序结束</span></span><br></pre></td></tr></table></figure><h3 id="NSCache哪些地方优与NSDictionary"><a href="#NSCache哪些地方优与NSDictionary" class="headerlink" title="NSCache哪些地方优与NSDictionary"></a>NSCache哪些地方优与NSDictionary</h3><ul><li>都是类似的key-value存储，不同的是nscache的key不用实现copying协议，value也不用实现coding协议；</li></ul><h3 id="知不知道Designated-Initializer（指定初始化函数）？使用它的时候有什么需要注意的问题？"><a href="#知不知道Designated-Initializer（指定初始化函数）？使用它的时候有什么需要注意的问题？" class="headerlink" title="知不知道Designated Initializer（指定初始化函数）？使用它的时候有什么需要注意的问题？"></a>知不知道Designated Initializer（指定初始化函数）？使用它的时候有什么需要注意的问题？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)initWithNibName:(nullable NSString *)nibNameOrNil bundle:(nullable NSBundle *)nibBundleOrNil NS_DESIGNATED_INITIALIZER;</span><br><span class="line">- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER;</span><br></pre></td></tr></table></figure><h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><ul><li>nslog</li><li>默认是NSObject的实现，内存地址，类名等；</li><li>可以覆盖后输出关键信息，方便调试；</li></ul><h3 id="OC使用哪种机制管理内存"><a href="#OC使用哪种机制管理内存" class="headerlink" title="OC使用哪种机制管理内存"></a>OC使用哪种机制管理内存</h3><ul><li>returnCount机制，每次runloop的时候都要检查对象的returnCount是否小于等于0，则释放；</li><li>对比java的引用机制，通过内存回收机制遍历不可达的回收；</li><li>引用计数效率更高，但是容易出现循环引用；</li></ul><h3 id="block实质，几种block"><a href="#block实质，几种block" class="headerlink" title="block实质，几种block"></a>block实质，几种block</h3><ul><li>block 结构体，有isa指针指向自己的类（global malloc stack），desc结构体描述bock，_frowording指向自己活着堆上自己的地址，截取上下文的变量，函数指针指向block代码块</li><li>block 编译的时候会生成一个函数，第一参数是block结构体指针，执行block相当于执行block里面_frowding里面的函数</li></ul><h3 id="static-inline-是什么？"><a href="#static-inline-是什么？" class="headerlink" title="static inline 是什么？"></a>static inline 是什么？</h3><ul><li>tatic inline内联函数：使用它可以减少函数运行时间，提高程序运行速度。但内联函数里不能写循环，开关语句，而且最好不写过于冗长的函数。</li></ul><h3 id="属性的默认关键字是什么？"><a href="#属性的默认关键字是什么？" class="headerlink" title="属性的默认关键字是什么？"></a>属性的默认关键字是什么？</h3><ul><li>在声明property时，如果不指定关键字，编译器会为property生成默认的关键字。</li><li>对应基本数据类型，默认关键字为atomic，assign，readwrite。</li><li>对应对象类型，默认关键字为atomic，strong，readwrite。</li></ul><h3 id="为什么在默认情况下无法修改被block捕获的变量？-block都做了什么？"><a href="#为什么在默认情况下无法修改被block捕获的变量？-block都做了什么？" class="headerlink" title="为什么在默认情况下无法修改被block捕获的变量？__block都做了什么？"></a>为什么在默认情况下无法修改被block捕获的变量？__block都做了什么？</h3><ul><li>在block中访问的外部变量是复制过去的，写操作不对原变量生效。</li></ul><h3 id="模拟一下循环引用的一个情况？block实现界面反向传值该怎么做？"><a href="#模拟一下循环引用的一个情况？block实现界面反向传值该怎么做？" class="headerlink" title="模拟一下循环引用的一个情况？block实现界面反向传值该怎么做？"></a>模拟一下循环引用的一个情况？block实现界面反向传值该怎么做？</h3><ul><li>两个.h文件互相import了对方造成循环引用。</li><li>B反向往A传值，首先在A中声明Block</li><li>在B中添加属性，@property (nonatomic,copy) MyBlock block;</li><li>在准备接收值的A控制器里实现block，B.block = ^void(NSString *name){_label.text = name;};</li><li>谁要传值就在B那里调用self.block(var);。</li></ul><h3 id="iOS事件传递响应链是什么？"><a href="#iOS事件传递响应链是什么？" class="headerlink" title="iOS事件传递响应链是什么？"></a>iOS事件传递响应链是什么？</h3><p>在我们点击屏幕的时候，iphone OS获取到了用户进行了“单击”这一行为，操作系统把包含这些点击事件的信息包装成UITouch和UIEvent形式的实例，然后找到当前运行的程序，逐级寻找能够响应这个事件的对象，直到没有响应者响应。这一寻找的过程，被称作事件的响应链。不同的响应者以链式方式寻找，AppDelegate-&gt;UIApplication-&gt;UIWindow-&gt;UIViewController-&gt;UIView-&gt;UIButton</p><h3 id="利用kvo数据绑定，在mvvm模式中，数据绑定被用的很广泛，能够动态的根据数据改变刷新UI。"><a href="#利用kvo数据绑定，在mvvm模式中，数据绑定被用的很广泛，能够动态的根据数据改变刷新UI。" class="headerlink" title="利用kvo数据绑定，在mvvm模式中，数据绑定被用的很广泛，能够动态的根据数据改变刷新UI。"></a>利用kvo数据绑定，在mvvm模式中，数据绑定被用的很广泛，能够动态的根据数据改变刷新UI。</h3><h3 id="多线程锁"><a href="#多线程锁" class="headerlink" title="多线程锁"></a>多线程锁</h3><h3 id="strong-weak-assign-的区别"><a href="#strong-weak-assign-的区别" class="headerlink" title="strong weak assign 的区别"></a>strong weak assign 的区别</h3><h3 id="类和结构体的区别"><a href="#类和结构体的区别" class="headerlink" title="类和结构体的区别"></a>类和结构体的区别</h3><h3 id="多线程锁-1"><a href="#多线程锁-1" class="headerlink" title="多线程锁"></a>多线程锁</h3><h3 id="strong-weak-assign-区别"><a href="#strong-weak-assign-区别" class="headerlink" title="strong weak assign 区别"></a>strong weak assign 区别</h3><h3 id="oc-和-swift-混编"><a href="#oc-和-swift-混编" class="headerlink" title="oc 和 swift 混编"></a>oc 和 swift 混编</h3><h3 id="mrc-和-arc-混编"><a href="#mrc-和-arc-混编" class="headerlink" title="mrc 和 arc 混编"></a>mrc 和 arc 混编</h3><h3 id="http-和-tcp-区别"><a href="#http-和-tcp-区别" class="headerlink" title="http 和 tcp 区别"></a>http 和 tcp 区别</h3><h3 id="进程间的通信方式有哪些"><a href="#进程间的通信方式有哪些" class="headerlink" title="进程间的通信方式有哪些"></a>进程间的通信方式有哪些</h3><ol><li>URL Scheme</li><li>Keychain</li><li>UIPasteboard</li><li>UIDocumentInteractionController</li><li>Local socket</li><li>AirDrop</li><li>UIActivityViewController</li><li>App Groups</li></ol><h3 id="oc-对象-是结构体还是联合体"><a href="#oc-对象-是结构体还是联合体" class="headerlink" title="oc 对象 是结构体还是联合体"></a>oc 对象 是结构体还是联合体</h3><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li>不同对象以自己的方式响应相同的消息的能力叫做多态。</li><li>OC中通过继承、select名字、参数等可实现；</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter 0基础快速学习路线</title>
      <link href="/bianchengme/2020/04/08/flutter-0%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/bianchengme/2020/04/08/flutter-0%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="基础学习"><a href="#基础学习" class="headerlink" title="基础学习"></a>基础学习</h2><ul><li><input checked="" disabled="" type="checkbox"> 搭建flutter开发环境，参考<a href="https://flutterchina.club/setup-macos/" target="_blank" rel="noopener">https://flutterchina.club/setup-macos/</a>，安装默认项目到模拟器或者真机；</li><li><input disabled="" type="checkbox"> 通读Dort语法一遍<a href="https://juejin.im/post/5c52a386f265da2de25b5c36" target="_blank" rel="noopener">https://juejin.im/post/5c52a386f265da2de25b5c36</a>,将文章中的语法敲一遍；</li><li><input checked="" disabled="" type="checkbox"> 实现一个简单的HelloWorld页面，目的是熟悉Flutter的项目结构和StatelessWidget组件，通读Flutter的所有UI组件一遍：<a href="https://juejin.im/post/5c18d181f265da611f07a128" target="_blank" rel="noopener">https://juejin.im/post/5c18d181f265da611f07a128</a>，要求记住flutter的常用UI组件的继承关系；</li><li><input disabled="" type="checkbox"> 实现页面跳转、传参、接收返回值，目的是熟悉Navigator组件；</li><li><input disabled="" type="checkbox"> 实现一个淘宝-个人中心页面，暂不要求交互，但是页面的样式要大致实现，主要目的是熟悉基本UI组件，尤其是布局、文本、图片；</li><li><input disabled="" type="checkbox"> 实现一个淘宝-首页，要求包含交互：下拉刷新和上拉加载更多，主要目的是熟悉复杂列表视图、滚动嵌套、手势；</li><li><input disabled="" type="checkbox"> 实现一个简单登录页面的Http请求，服务端自己写，主要目的是熟悉Flutter的输入框、Dart的异步编程(async/await/Future)、网络请求、json解析、响应式编程(StatefulWidget/setState)；</li><li><input disabled="" type="checkbox"> 实现一个简单登录页面的grpc请求，protobuf文件和服务端也自己写，主要目的是熟悉grpc插件的用法；</li><li><input disabled="" type="checkbox"> 实现读取SP的简单页面，不准用第三方插件，自己用MethodChannel实现Flutter调用原生的功能；</li><li><input disabled="" type="checkbox"> 实现Flutter项目接入宿主Android容器，主要目的是熟悉Flutter静态路由和Android原生传参给FlutterView。</li></ul><h2 id="进阶阶段"><a href="#进阶阶段" class="headerlink" title="进阶阶段"></a>进阶阶段</h2><blockquote><p>调研必须有输出，实践性的要有代码产出，理论性的要有wiki产出，没有产出的调研，就是耍流氓。</p></blockquote><ul><li><input disabled="" type="checkbox"> 写一个国际化的demo，实现多语言切换；</li><li><input disabled="" type="checkbox"> 写一个自定义View的Demo，熟悉绘图三剑客：canvas、path、paint；</li><li><input disabled="" type="checkbox"> 写一个网络图片缓存的demo，并了解其实现原理和内存占用；</li><li><input disabled="" type="checkbox"> 阅读源码，了解Flutter的渲染机制，如何从Widget-&gt;Element-&gt;RenderObject；</li><li><input disabled="" type="checkbox"> 了解Dart的异步机制，深入理解async/await/Future的原理。</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter初版</title>
      <link href="/bianchengme/2020/04/03/Flutter%E5%88%9D%E7%89%88/"/>
      <url>/bianchengme/2020/04/03/Flutter%E5%88%9D%E7%89%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Keyboard Maestro Mac 键盘效率工具</title>
      <link href="/bianchengme/2020/04/03/Keyboard-Maestro-Mac-%E9%94%AE%E7%9B%98%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
      <url>/bianchengme/2020/04/03/Keyboard-Maestro-Mac-%E9%94%AE%E7%9B%98%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flutter常见错误汇总</title>
      <link href="/bianchengme/2020/04/02/flutter%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/"/>
      <url>/bianchengme/2020/04/02/flutter%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="iOS真机调试证书错误"><a href="#iOS真机调试证书错误" class="headerlink" title="iOS真机调试证书错误"></a>iOS真机调试证书错误</h2><p><img src="ios_appid.png" alt="证书错误"></p><p>iOS真机调试中需要配置证书，现在苹果允许个人免费账号真机调试，只要要apple id就行。Flutter项目运行到iOS真机上如果没有配置证书或者原始证书配置有问题，就会报错如上图，如何修改呢，需要用到Xcode。</p><p>用Xcode打开项目，检查证书配置是否有问题:</p><p><img src="ios_develop_team.png" alt="配置证书"></p><h2 id="mac-10-15-运行程序提示“软件已损坏或无法验证等错误”"><a href="#mac-10-15-运行程序提示“软件已损坏或无法验证等错误”" class="headerlink" title="mac 10.15 运行程序提示“软件已损坏或无法验证等错误”"></a>mac 10.15 运行程序提示“软件已损坏或无法验证等错误”</h2><p>运行如下命令:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br><span class="line">xattr -r -d com.apple.quarantine ~/development/flutter/bin/cache/artifacts/libimobiledevice/idevice_id</span><br><span class="line">xattr -r -d com.apple.quarantine ~/development/flutter/bin/cache/artifacts/libimobiledevice/idevicename</span><br><span class="line">xattr -r -d com.apple.quarantine ~/development/flutter/bin/cache/artifacts/libimobiledevice/idevicescreenshot</span><br><span class="line">xattr -r -d com.apple.quarantine ~/development/flutter/bin/cache/artifacts/libimobiledevice/idevicesyslog</span><br><span class="line">xattr -r -d com.apple.quarantine ~/development/flutter/bin/cache/artifacts/libimobiledevice/ideviceinfo</span><br><span class="line">xattr -r -d com.apple.quarantine ~/development/flutter/bin/cache/artifacts/usbmuxd/iproxy</span><br></pre></td></tr></table></figure><p>如果还有其它软件还有如此提示可以参考上面命令，另外第一个命令其实修改了软件修改条件，在设置-&gt;安全中可以看到,如果担心安全问题可以修改回去，下次需要再设置。</p><p><img src="mac_security.png" alt="mac设置"></p><h2 id="Android-Studio-运行后无法热加载"><a href="#Android-Studio-运行后无法热加载" class="headerlink" title="Android Studio 运行后无法热加载"></a>Android Studio 运行后无法热加载</h2><p>错误提示如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error connecting to the service protocol: failed to <span class="built_in">connect</span> to http:<span class="comment">//127.0.0.1</span></span><br></pre></td></tr></table></figure><p>一般是设备版本的问题，建议换个设备或者模拟器试试。</p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> BUG </tag>
            
            <tag> iOS真机运行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发之fishhook</title>
      <link href="/bianchengme/2020/03/31/iOS%E5%BC%80%E5%8F%91%E4%B9%8Bfishhook/"/>
      <url>/bianchengme/2020/03/31/iOS%E5%BC%80%E5%8F%91%E4%B9%8Bfishhook/</url>
      
        <content type="html"><![CDATA[<h3 id="HOOK之Method-Swizzle"><a href="#HOOK之Method-Swizzle" class="headerlink" title="HOOK之Method Swizzle"></a>HOOK之Method Swizzle</h3><p><code>method_exchangeImplementations</code>利用OC的Runtime特性，动态改变SEL（方法编号）和IMP（方法实现）的对应关系，达到OC方法调用流程改变的目的。主要用于OC方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/message.h&gt;</span></span></span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line">    Method old = class_getInstanceMethod(class, oldMethod);</span><br><span class="line">    Method news = class_getInstanceMethod(class, newMethod);</span><br><span class="line">    method_exchangeImplementations(old, news);</span><br></pre></td></tr></table></figure><h2 id="HOOK之-fishhook"><a href="#HOOK之-fishhook" class="headerlink" title="HOOK之 fishhook"></a>HOOK之 fishhook</h2><p>Facebook提供的一个动态修改链接mach-O文件的工具。利用MachO文件加载原理，原理是通过修改懒加载和非懒加载两个表的指针达到C函数HOOK的目的,所以不能修改自己定义的函数，只能修改系统库函数。</p><p>####demo</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"fishhook.h"</span></span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    NSLog(@<span class="string">"123"</span>);</span><br><span class="line">    <span class="comment">//定义rebinding结构体</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct rebinding &#123;</span></span><br><span class="line"><span class="comment">  const char *name;//需要HOOK的函数名称,字符串</span></span><br><span class="line"><span class="comment">  void *replacement;//替换到那个新的函数上(函数指针,也就是函数的名称)</span></span><br><span class="line"><span class="comment">  void **replaced;//保存原始函数指针变量的指针(它是一个二级指针!)</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rebinding</span> <span class="title">nslogBind</span>;</span></span><br><span class="line">    <span class="comment">//函数的名称</span></span><br><span class="line">    nslogBind.name = <span class="string">"NSLog"</span>;</span><br><span class="line">    <span class="comment">//新的函数地址</span></span><br><span class="line">    nslogBind.replacement = myNSLog;</span><br><span class="line">    <span class="comment">//保存原始函数地址的变量的指针</span></span><br><span class="line">    nslogBind.replaced = (<span class="keyword">void</span> *)&amp;old_nslog;</span><br><span class="line">    <span class="comment">//定义数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rebinding</span> <span class="title">rebs</span>[] = &#123;</span>nslogBind&#125;;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     arg1 : 存放rebinding结构体的数组</span></span><br><span class="line"><span class="comment">     arg2 : 数组的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    rebind_symbols(rebs, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数指针,用保存原始的函数的地址</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*old_nslog)</span><span class="params">(NSString *format, ...)</span></span>;</span><br><span class="line"><span class="comment">//新的NSLog</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myNSLog</span><span class="params">(NSString *format, ...)</span></span>&#123;</span><br><span class="line">    format = [format stringByAppendingString:@<span class="string">"\n勾上了!"</span>];</span><br><span class="line">    <span class="comment">//再调用原来的</span></span><br><span class="line">    old_nslog(format); </span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    NSLog(@<span class="string">"点击了屏幕!!"</span>);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###原理</p><ul><li>APP运行时，MachO被dyld加载进内存</li><li>ASLR让MachO被加载时内存地址随机分配</li><li>苹果的PIC位置与代码独立技术，让MachO调用系统库函数时，先在MachO表中的_DATA段建立一个指针指向外部库函数，dyld加载MachO时知道外部库函数的调用地址，会动态的把_DATA段的指针指向外部库函数</li><li>fishhook通过nslogBind.name = “NSLog” 就能替换库函数，是因为MachO的符号表里有NSLog等，可以通过符号表找到NSLog字符串</li></ul><p>###使用fishhook基本防护<br>OC的Runtime特性，替换执行的方法，要用到系统方法<code>method_exchangeImplementations</code>、 <code>method_getImplementation</code>、<code>method_setImplementation</code>等，就可以用fishhook动态替换这些系统方法，方式HOOK。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"fishhook.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/message.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">@implementation hookMgr</span><br><span class="line"><span class="comment">//专门HOOK</span></span><br><span class="line">+(<span class="keyword">void</span>)load</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//基本防护 会检测到外部的hook</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rebinding</span>  <span class="title">exchangebinding</span>;</span></span><br><span class="line">   exchangebinding.name = <span class="string">"method_exchangeImplementations"</span>;</span><br><span class="line">   exchangebinding.replacement = myExchange;</span><br><span class="line">   exchangebinding.replaced = (<span class="keyword">void</span> *)&amp;exchangeP;</span><br><span class="line">   </span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">rebinding</span>  <span class="title">getIMPbinding</span>;</span></span><br><span class="line">   getIMPbinding.name = <span class="string">"method_getImplementation"</span>;</span><br><span class="line">   getIMPbinding.replacement = myExchange;</span><br><span class="line">   getIMPbinding.replaced = (<span class="keyword">void</span> *)&amp;getIMP;</span><br><span class="line">   </span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">rebinding</span>  <span class="title">setIMPbinding</span>;</span></span><br><span class="line">   setIMPbinding.name = <span class="string">"method_setImplementation"</span>;</span><br><span class="line">   setIMPbinding.replacement = myExchange;</span><br><span class="line">   setIMPbinding.replaced = (<span class="keyword">void</span> *)&amp;setIMP;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">rebinding</span> <span class="title">rebs</span>[] = &#123;</span>exchangebinding,getIMPbinding,setIMPbinding&#125;;</span><br><span class="line">   </span><br><span class="line">   rebind_symbols(rebs, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保留原来的交换函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*exchangeP)</span><span class="params">(Method _Nonnull m1, Method _Nonnull m2)</span></span>;</span><br><span class="line">IMP _Nonnull (*setIMP)(Method _Nonnull m, IMP _Nonnull imp);</span><br><span class="line">IMP _Nonnull (*getIMP)(Method _Nonnull m);</span><br><span class="line"></span><br><span class="line"><span class="comment">//新的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myExchange</span><span class="params">(Method _Nonnull m1, Method _Nonnull m2)</span></span>&#123;</span><br><span class="line">   NSLog(@<span class="string">"外部hook  不给过"</span>);</span><br><span class="line">   <span class="comment">//这里可以做些让程序崩溃的事情</span></span><br><span class="line">   <span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">//闪退，只要发现你hook我，我就闪退</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发之Runloop</title>
      <link href="/bianchengme/2020/03/31/iOS%E5%BC%80%E5%8F%91%E4%B9%8BRunloop/"/>
      <url>/bianchengme/2020/03/31/iOS%E5%BC%80%E5%8F%91%E4%B9%8BRunloop/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS多线程</title>
      <link href="/bianchengme/2020/03/28/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/bianchengme/2020/03/28/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>在开发工作中，多线程的使用还是很频繁的，不过对多线程的总结以及多线程的原理的探究一直没有做过。</p><p><strong>使用场景</strong></p><p>多线程的使用场景一般都是耗时操作，如API请求、加载网络图片、视频、歌曲等资源，另外还有一些延时操作。抽象的说就是充分发挥多核处理器的优势,并发(同时执行) 执行任务让系统运行的更快、更流畅。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ol><li>进程是一个具有一定独立功能的程序关于某次数据集合的一次运行活动，它是操作系统分配资源的基本单元.</li><li>进程是指在系统中正在运行的一个应用程序，就是一段程序的执行过程,我们可以理解为手机上的一个app.</li><li>每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内，拥有独立运行所需的全部资源</li></ol><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ol><li>程序执行流的最小单元，线程是进程中的一个实体.</li><li>一个进程要想执行任务,必须至少有一条线程.应用程序启动的时候，系统会默认开启一条线程,也就是主线程</li></ol><h3 id="进程和线程的关系"><a href="#进程和线程的关系" class="headerlink" title="进程和线程的关系"></a>进程和线程的关系</h3><ol><li>线程是进程的执行单元，进程的所有任务都在线程中执行</li><li>线程是 CPU 分配资源和调度的最小单位</li><li>一个程序可以对应多个进程(多进程),一个进程中可有多个线程,但至少要有一条线程</li><li>同一个进程内的线程共享进程资源</li></ol><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>同一时间，CPU只能处理1条线程，只有1条线程在执行。多线程并发执行，其实是CPU快速地在多条线程之间调度（切换）。如果CPU调度线程的时间足够快，就造成了多线程并发执行的假象；</p><p><strong>优势</strong></p><ul><li>充分发挥多核处理器的优势，将不同的任务分配给不同的处理器，真正进行“并行运算”状态；</li><li>将耗时、轮询或者并发需求高的任务分配到其它线程执行，并有主线程统一更新界面，会是应用程序更加流畅，用户体验更好；</li><li>当硬件处理器数量的增加，程序运行更快，而无需做任何调整；</li></ul><p><strong>难点</strong></p><ul><li>开启线程需要占用一定的内存空间（默认情况下，主线程占用1M，子线程占用512KB），如果开启大量的线程，会占用大量的内存空间，降低程序的性能</li><li>线程越多，CPU在调度线程上的开销就越大</li><li>程序设计更加复杂：比如线程之间的通信、多线程的数据共享</li></ul><h2 id="任务和队列"><a href="#任务和队列" class="headerlink" title="任务和队列"></a>任务和队列</h2><p>实际开发中直接创建线程使用比较复杂，复杂情况通常通过队列派发任务方式实现多线程任务调度更便捷、高效。</p><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>就是执行操作的意思，也就是在线程中执行的那段代码。在 GCD 中是放在 block 中的。执行任务有两种方式：同步执行（sync）和异步执行（async）</p><ul><li>同步(Sync)：同步添加任务到指定的队列中，在添加的任务执行结束之前，会一直等待，直到队列里面的任务完成之后再继续执行，即会阻塞线程。只能在当前线程中执行任务(是当前线程，不一定是主线程)，不具备开启新线程的能力。</li><li>异步(Async)：线程会立即返回，无需等待就会继续执行下面的任务，不阻塞当前线程。可以在新的线程中执行任务，具备开启新线程的能力(并不一定开启新线程)。如果不是添加到主队列上，异步会在子线程中执行任务</li></ul><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列（Dispatch Queue）：这里的队列指执行任务的等待队列，即用来存放任务的队列。队列是一种特殊的线性表，采用 FIFO（先进先出）的原则，即新任务总是被插入到队列的末尾，而读取任务的时候总是从队列的头部开始读取。每读取一个任务，则从队列中释放一个任务<br>在 GCD 中有两种队列：串行队列和并发队列。两者都符合 FIFO（先进先出）的原则。两者的主要区别是：执行顺序不同，以及开启线程数不同。</p><h4 id="串行队列（Serial-Dispatch-Queue）："><a href="#串行队列（Serial-Dispatch-Queue）：" class="headerlink" title="串行队列（Serial Dispatch Queue）："></a>串行队列（Serial Dispatch Queue）：</h4><p>同一时间内，队列中只能执行一个任务，只有当前的任务执行完成之后，才能执行下一个任务。（只开启一个线程，一个任务执行完毕后，再执行下一个任务）。主队列是主线程上的一个串行队列,是系统自动为我们创建的</p><h4 id="并发队列（Concurrent-Dispatch-Queue）："><a href="#并发队列（Concurrent-Dispatch-Queue）：" class="headerlink" title="并发队列（Concurrent Dispatch Queue）："></a>并发队列（Concurrent Dispatch Queue）：</h4><p>同时允许多个任务并发执行。（可以开启多个线程，并且同时执行任务）。并发队列的并发功能只有在异步（dispatch_async）函数下才有效</p><p><img src="01queues.png" alt="queues"></p><h2 id="iOS-多线程实现"><a href="#iOS-多线程实现" class="headerlink" title="iOS 多线程实现"></a>iOS 多线程实现</h2><p>主要有三种：NSThread、NSoperationQueue、GCD</p><ol><li>NSThread：轻量级别的多线程技术<br>是我们自己手动开辟的子线程，如果使用的是初始化方式就需要我们自己启动，如果使用的是构造器方式它就会自动启动。只要是我们手动开辟的线程，都需要我们自己管理该线程，不只是启动，还有该线程使用完毕后的资源回收</li></ol>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发Objective-C总结</title>
      <link href="/bianchengme/2019/06/05/iOS%E5%BC%80%E5%8F%91Objective-C%E6%80%BB%E7%BB%93/"/>
      <url>/bianchengme/2019/06/05/iOS%E5%BC%80%E5%8F%91Objective-C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Objective-C语言特性：分类、扩展、代理、通知、KVO、KVC、属性"><a href="#Objective-C语言特性：分类、扩展、代理、通知、KVO、KVC、属性" class="headerlink" title="Objective_C语言特性：分类、扩展、代理、通知、KVO、KVC、属性"></a>Objective_C语言特性：分类、扩展、代理、通知、KVO、KVC、属性</h1><p>分类（category）<br>扩展（Extension）<br>代理（Delegate）<br>通知（NSNotification)<br>KVO (Key-value observing)<br>KVC (Key-value coding)<br>属性关键字</p><h2 id="一、分类"><a href="#一、分类" class="headerlink" title="一、分类"></a>一、分类</h2><p><strong>1.分类的作用？</strong><br>声明私有方法，分解体积大的类文件，把framework的私有方法公开（官方不推荐）</p><p><strong>2.分类的特点</strong><br>运行时决议，可以为系统类添加分类 。<br>说得详细些，在运行时时期，将 Category 中的实例方法列表、协议列表、属性列表添加到主类中后（所以Category中的方法在方法列表中的位置是在主类的同名方法之前的），然后会递归调用所有类的 load 方法，这一切都是在main函数之前执行的。</p><p><strong>3.分类可以添加哪些内容？</strong><br>实例方法，类方法，协议，属性（添加getter和setter方法，并没有实例变量，添加实例变量需要用关联对象）</p><p><strong>4.如果工程里有两个分类A和B，两个分类中有一个同名的方法，哪个方法最终生效？</strong><br>取决于分类的编译顺序，最后编译的那个分类的同名方法最终生效，而之前的都会被覆盖掉(这里并不是真正的覆盖，因为其余方法仍然存在，只是访问不到，因为在动态添加类的方法的时候是倒序遍历方法列表的，而最后编译的分类的方法会放在方法列表前面，访问的时候就会先被访问到，同理如果声明了一个和原类方法同名的方法，也会覆盖掉原类的方法)。</p><p><strong>5.如果声明了两个同名的分类会怎样？</strong><br>会报错，所以第三方的分类，一般都带有命名前缀</p><p><strong>6.分类能添加成员变量吗？</strong><br>不能。只能通过关联对象(objc_setAssociatedObject)来模拟实现成员变量，但其实质是关联内容，所有对象的关联内容都放在同一个全局容器哈希表中:AssociationsHashMap,由AssociationsManager统一管理。</p><h2 id="二、扩展"><a href="#二、扩展" class="headerlink" title="二、扩展"></a>二、扩展</h2><p><strong>1.一般用扩展做什么？</strong><br>声明私有属性，声明方法（没什么意义），声明私有成员变量</p><p><strong>2.扩展的特点</strong><br>编译时决议，只能以声明的形式存在，多数情况下寄生在宿主类的.m中，不能为系统类添加扩展。</p><h2 id="三、代理（Delegate）"><a href="#三、代理（Delegate）" class="headerlink" title="三、代理（Delegate）"></a>三、代理（Delegate）</h2><p><img src="01delegate.png" alt="IMG"><br>代理是一种设计模式，以@protocol形式体现，一般是一对一传递。<br>一般以weak关键词以规避循环引用。</p><h2 id="四、通知（NSNotification）"><a href="#四、通知（NSNotification）" class="headerlink" title="四、通知（NSNotification）"></a>四、通知（NSNotification）</h2><p>使用观察者模式来实现的用于跨层传递信息的机制。传递方式是一对多的。</p><p>如果实现通知机制？<br><img src="02notification.png" alt="img"></p><p>##五、KVO (Key-value observing)<br>KVO是观察者模式的另一实现。<br>使用了isa混写(isa-swizzling)来实现KVO</p><p><img src="03kvo.png" alt="IMG"><br>使用setter方法改变值KVO会生效，使用setValue:forKey即KVC改变值KVO也会生效，因为KVC会去调用setter方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (void)setValue:(id)value</span><br><span class="line">&#123;</span><br><span class="line">    [self willChangeValueForKey:@&quot;key&quot;];</span><br><span class="line">    </span><br><span class="line">    [super setValue:value];</span><br><span class="line">    </span><br><span class="line">    [self didChangeValueForKey:@&quot;key&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么通过直接赋值成员变量会触发KVO吗？<br>不会，因为不会调用setter方法，需要加上willChangeValueForKey和didChangeValueForKey方法来手动触发才行</p><h2 id="六、KVC-Key-value-coding"><a href="#六、KVC-Key-value-coding" class="headerlink" title="六、KVC(Key-value coding)"></a>六、KVC(Key-value coding)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-(id)valueForKey:(NSString *)key;</span><br><span class="line">-(void)setValue:(id)value forKey:(NSString *)key;</span><br></pre></td></tr></table></figure><p>KVC就是指iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或者给对象的属性赋值。而不需要调用明确的存取方法。这样就可以在运行时动态地访问和修改对象的属性。而不是在编译时确定，这也是iOS开发中的黑魔法之一。很多高级的iOS开发技巧都是基于KVC实现的.  </p><p><strong>当调用setValue：属性值 forKey：@”name“的代码时，，底层的执行机制如下：</strong></p><ul><li>程序优先调用set<Key>:属性值方法，代码通过setter方法完成设置。注意，这里的<key>是指成员变量名，首字母大小写要符合KVC的命名规则，下同</li><li>如果没有找到setName：方法，KVC机制会检查+ (BOOL)accessInstanceVariablesDirectly方法有没有返回YES，默认该方法会返回YES，如果你重写了该方法让其返回NO的话，那么在这一步KVC会执行setValue：forUndefinedKey：方法，不过一般开发者不会这么做。所以KVC机制会搜索该类里面有没有名为<key>成员变量，无论该变量是在类接口处定义，还是在类实现处定义，也无论用了什么样的访问修饰符，只在存在以<key>命名的变量，KVC都可以对该成员变量赋值。</li><li>如果该类即没有set<key>：方法，也没有_<key>成员变量，KVC机制会搜索_is<Key>的成员变量。</li><li>和上面一样，如果该类即没有set<Key>：方法，也没有_<key>和_is<Key>成员变量，KVC机制再会继续搜索<key>和is<Key>的成员变量。再给它们赋值。</li><li>如果上面列出的方法或者成员变量都不存在，系统将会执行该对象的setValue：forUndefinedKey：方法，默认是抛出异常。    </li></ul><p>即如果没有找到Set<Key>方法的话，会按照_key，_iskey，key，iskey的顺序搜索成员并进行赋值操作。<br>如果开发者想让这个类禁用KVC，那么重写+ (BOOL)accessInstanceVariablesDirectly方法让其返回NO即可，这样的话如果KVC没有找到set<Key>:属性名时，会直接用setValue：forUndefinedKey：方法。</p><p><strong><em>当调用valueForKey：@”name“的代码时，KVC对key的搜索方式不同于setValue：属性值 forKey：@”name“，其搜索方式如下：</em></strong></p><ul><li>首先按get<Key>,<key>,is<Key>的顺序方法查找getter方法，找到的话会直接调用。如果是BOOL或者Int等值类型， 会将其包装成一个NSNumber对象。</li><li>如果上面的getter没有找到，KVC则会查找countOf<Key>,objectIn<Key>AtIndex或<Key>AtIndexes格式的方法。如果countOf<Key>方法和另外两个方法中的一个被找到，那么就会返回一个可以响应NSArray所有方法的代理集合(它是NSKeyValueArray，是NSArray的子类)，调用这个代理集合的方法，或者说给这个代理集合发送属于NSArray的方法，就会以countOf<Key>,objectIn<Key>AtIndex或<Key>AtIndexes这几个方法组合的形式调用。还有一个可选的get<Key>:range:方法。所以你想重新定义KVC的一些功能，你可以添加这些方法，需要注意的是你的方法名要符合KVC的标准命名方法，包括方法签名。</li><li>如果上面的方法没有找到，那么会同时查找countOf<Key>，enumeratorOf<Key>,memberOf<Key>格式的方法。如果这三个方法都找到，那么就返回一个可以响应NSSet所的方法的代理集合，和上面一样，给这个代理集合发NSSet的消息，就会以countOf<Key>，enumeratorOf<Key>,memberOf<Key>组合的形式调用。</li><li>如果还没有找到，再检查类方法+ (BOOL)accessInstanceVariablesDirectly,如果返回YES(默认行为)，那么和先前的设值一样，会按_<key>,_is<Key>,<key>,is<Key>的顺序搜索成员变量名，这里不推荐这么做，因为这样直接访问实例变量破坏了封装性，使代码更脆弱。如果重写了类方法+ (BOOL)accessInstanceVariablesDirectly返回NO的话，那么会直接调用valueForUndefinedKey:方法，默认是抛出异常。</li></ul><h2 id="七、属性关键字"><a href="#七、属性关键字" class="headerlink" title="七、属性关键字"></a>七、属性关键字</h2><ol><li>读写权限：readonly,readwrite(默认)</li><li>原子性: atomic(默认)，nonatomic。atomic读写线程安全，但效率低，而且不是绝对的安全，比如如果修饰的是数组，那么对数组的读写是安全的，但如果是操作数组进行添加移除其中对象的还，就不保证安全了。</li><li>引用计数：<ul><li>retain/strong</li><li>assign：修饰基本数据类型，修饰对象类型时，不改变其引用计数，会产生悬垂指针，修饰的对象在被释放后，assign指针仍然指向原对象内存地址，如果使用assign指针继续访问原对象的话，就可能会导致内存泄漏或程序异常</li><li>weak：不改变被修饰对象的引用计数，所指对象在被释放后，weak指针会自动置为nil</li><li>copy：分为深拷贝和浅拷贝</li><li>浅拷贝：对内存地址的复制，让目标对象指针和原对象指向同一片内存空间会增加引用计数</li><li>深拷贝：对对象内容的复制，开辟新的内存空间</li></ul></li></ol><p><img src="04copy.png" alt="img"><br>可变对象的copy和mutableCopy都是深拷贝<br>不可变对象的copy是浅拷贝，mutableCopy是深拷贝<br>copy方法返回的都是不可变对象<br>    - @property (nonatomic, copy) NSMutableArray * array;这样写有什么影响？<br>    因为copy方法返回的都是不可变对象，所以array对象实际上是不可变的，如果对其进行可变操作如添加移除对象，则会造成程序crash</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发Swift总结</title>
      <link href="/bianchengme/2019/05/27/iOS%E5%BC%80%E5%8F%91Swift%E6%80%BB%E7%BB%93/"/>
      <url>/bianchengme/2019/05/27/iOS%E5%BC%80%E5%8F%91Swift%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="Safe-amp-Fast"><a href="#Safe-amp-Fast" class="headerlink" title="Safe &amp; Fast"></a>Safe &amp; Fast</h2><h3 id="1、能用let，尽量别用var。"><a href="#1、能用let，尽量别用var。" class="headerlink" title="1、能用let，尽量别用var。"></a>1、能用let，尽量别用var。</h3><p><del>~ 把代码中的var都改成let，只保留编译不能通过的。 ~</del></p><p>Object-C的Foundation层，都是继承<code>NSObject</code>实现的，平时都在操作指针，所以要区分Mutable和imutable，比如NSString和NSMutableString。<br>Swift使用let和var关键字用于用于区分是否可变。可变会更容易出错，所以尽可能使用比可变设计，等到需要改变再改成var。</p><h3 id="2-尽量不用“-”"><a href="#2-尽量不用“-”" class="headerlink" title="2.尽量不用“!”"></a>2.尽量不用“!”</h3><p>“!”遇到nil时，会crash(包括 as!进行强制转换)。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发中使用Block总结</title>
      <link href="/bianchengme/2019/04/06/iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BD%BF%E7%94%A8Block%E6%80%BB%E7%BB%93/"/>
      <url>/bianchengme/2019/04/06/iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BD%BF%E7%94%A8Block%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>###Block的本质</p><ul><li>将 “函数” 及 “执行其上下文” 封装起来的 “对象”</li><li>block的调用就是函数的调用</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> (^add)(<span class="keyword">int</span> a,<span class="keyword">int</span> b) = ^(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;;</span><br><span class="line">    NSLog(@<span class="string">"%d"</span>,add(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 “clang -rewrite-objc main.m”查看编译之后的部分内容</p><p><img src="01.png" alt="block1"></p><p>__block_impl 结构体中发现有 isa 指针，所以说block是Objective-C对象</p><p>###block捕获变量特性</p><p>在block中使用外部变量时，block会捕获其变量，具体规则如下</p><ul><li>局部变量为基本数据类型：捕获其值</li><li>局部变量为对象类型：连同所有权修饰符一起捕获</li><li>局部变量为静态的：以指针的形式捕获</li><li>全局变量：不捕获</li><li>全局静态变量：不捕获</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> testGlobalVar = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> testGlobalStaticVar = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> testVar = <span class="number">0</span>;</span><br><span class="line">    __strong id obj = [[NSObject alloc]init];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> testStaticVar = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span>(^test)(<span class="keyword">void</span>) = ^()&#123;</span><br><span class="line">        NSLog(@<span class="string">"局部变量为基本数据类型%d"</span>,testVar);</span><br><span class="line">        NSLog(@<span class="string">"局部变量为对象类型%@"</span>,obj);</span><br><span class="line">        NSLog(@<span class="string">"局部变量为静态的%d"</span>,testStaticVar);</span><br><span class="line">        NSLog(@<span class="string">"全局变量%d"</span>,testGlobalVar);</span><br><span class="line">        NSLog(@<span class="string">"全局静态变量%d"</span>,testGlobalStaticVar);</span><br><span class="line">    &#125;;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后看到效果</p><p><img src="02.png" alt="02"></p><p>将上述代码编译后，我们再看<strong>main_block_impl_0结构体中这几个变量在其中的类型，就可以更好理解block的捕获特性，</strong>strong为默认修饰符，所有编译后无效果。</p><p>由于捕获的特性，当我们在block中使用对象类型时，需要注意循环引用</p><p>__block</p><p>使用场景：在blcok内部对捕获的值进行赋值</p><ul><li>局部变量为基本数据类型、对象类型，需要__block</li><li>静态局部变量、全局变量、全局静态变量，不需要__block，因为静态局部变量不捕获其指针，全局变量、全局静态变量不捕获</li></ul><p><img src="04.png" alt="04"><br><img src="05.png" alt="05"></p><p>如图，编译后的文件，我们发现，局部数据类型变量a、局部对象类型obj竟然变成了结构体实例</p><p><strong>Block_byref_a_0结构体实例的成员变量</strong>forwarding持有指向该实例自身的指针</p><p>###Block内存管理</p><table><thead><tr><th>类</th><th>对应对象的存储域</th></tr></thead><tbody><tr><td>_NSConcreteStackBlock</td><td>栈</td></tr><tr><td>_NSConcreteGlobalBlock</td><td>数据区域(.data区)</td></tr><tr><td>_NSConcreteMallocBlock</td><td>堆</td></tr></tbody></table><p>通过几个栗子来分析内存管理：</p><p>栗子1：block不捕获任何外部变量，分配在全局区</p><p><img src="06.png" alt="06"></p><p>栗子2：block捕获局部变量，分配在堆区<br><img src="07.png" alt="07"><br>栗子3：block捕获局部静态变量，分配在全局区<br><img src="08.png" alt="08"><br>栗子4：block捕获全局变量，分配在全局区<br><img src="09.png" alt="09"><br>栗子5：block捕获全局静态变量，分配在全局区<br><img src="10.png" alt="10"><br>5个栗子，blcok不是分配在堆区，就是分配在全局区，什么时候分配在栈区呢？</p><p><img src="11.png" alt="11"><br>截取官方文档的一个图，可以发现，当发送copy消息的时候，会将block分配在堆区，但是我们并没有发任何copy消息呀，why？因为系统已经偷偷给我们发送了copy消息<br>怎么不让系统帮我们呢？<br>栗子6：__weak 修饰block<br><img src="12.png" alt="12"></p><p>用好类型别名<br>为常用的 block 类型创建 typedef<br>用 typedef 重新定义block类型，可以使 block 变量用起来更加简单</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(^Add)</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    Add add = ^(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;;</span><br><span class="line">    NSLog(@<span class="string">"%d"</span>,add(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发UI总结</title>
      <link href="/bianchengme/2019/03/29/iOS%E5%BC%80%E5%8F%91UI%E6%80%BB%E7%BB%93/"/>
      <url>/bianchengme/2019/03/29/iOS%E5%BC%80%E5%8F%91UI%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="UI相关的几个要点"><a href="#UI相关的几个要点" class="headerlink" title="UI相关的几个要点"></a>UI相关的几个要点</h1><ul><li>UIView &amp; CALayer</li><li>事件传递和视图响应链</li><li>图像显示原理</li><li>UI卡顿掉帧原理</li><li>滑动优化方案</li><li>离屏渲染</li></ul><h2 id="UIView-amp-CALayer"><a href="#UIView-amp-CALayer" class="headerlink" title="UIView &amp; CALayer"></a>UIView &amp; CALayer</h2><p>UIView不用介绍，CALayer类在概念上和UIView类似，每个 UIView 内部都有一个 CALayer 在背后提供内容的绘制和显示，并且 UIView 的尺寸样式都由内部的 Layer 所提供。两者都有树状层级结构，layer 内部有 SubLayers，View 内部有 SubViews。但是 Layer 比 View 多了个AnchorPoint。UIView可以通过CALayer可以实现 <strong>阴影，圆角，带颜色的边框、3D变换、非矩形规范、透明遮照、多级非线性动画</strong>等。</p><p>他们的区别是：</p><ul><li>与UIView最大的不同就是CALyer不处理用户的交互,不清楚具体的响应链；</li><li>二者并无继承关系，CALyer是UIView显示内容的内部实现；</li><li>UIView是对CALayer的一个封装，并提供了一些显示控制和响应链的功能；</li></ul><p>这样的设计体现了单一职责原则：UIView为CALayer提供内容，以及负责处理触摸等事件，参与响应链；CALayer负责显示内容contents。</p><p>##事件传递 &amp; 视图响应链</p><p>两个UIView方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;空间是否响事件测试</span><br><span class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event;</span><br><span class="line">&#x2F;&#x2F;判断点位位置是否在区域内</span><br><span class="line">- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event;</span><br></pre></td></tr></table></figure><p>事件传递顺序</p><p><img src="02event.png" alt="png"></p><p>通过代码体现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 此方法就是寻找最为合适的响应的控件</span><br><span class="line">   override func hitTest(_ point: CGPoint, with event: UIEvent?) -&gt; UIView? &#123;</span><br><span class="line">    </span><br><span class="line">       super.hitTest(point, with: event);</span><br><span class="line">       </span><br><span class="line">       &#x2F;&#x2F; 1 UIView不接收触摸事件的三种情况：       </span><br><span class="line">       if self.isUserInteractionEnabled &#x3D;&#x3D; false || self.alpha &lt;&#x3D; 0.1 || self.isHidden &#x3D;&#x3D; true &#123;</span><br><span class="line">           return nil;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       &#x2F;&#x2F;  2 判断当前的点是否在此控件上面</span><br><span class="line">       if self.point(inside: point, with: event) &#x3D;&#x3D; false &#123;</span><br><span class="line">           return nil;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       &#x2F;&#x2F; 3 以上条件都满足 去遍历自己的子空间</span><br><span class="line">       for view in self.subviews &#123;</span><br><span class="line">           </span><br><span class="line">           &#x2F;&#x2F; 转为目标控件的点</span><br><span class="line">           let current_point &#x3D; self.convert(point, to: view);</span><br><span class="line">           &#x2F;&#x2F; 让子视图再去遍历 如果有的话 进行返回操作 没有的话 不要紧 返回nil就好了</span><br><span class="line">           if view.hitTest(current_point, with: event) !&#x3D; nil &#123;</span><br><span class="line">               return view;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       &#x2F;&#x2F; 4 如果以上都没有找到 那就返回自己</span><br><span class="line">       return self;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>调用逻辑<br><img src="03action.png" alt="png"></p><h2 id="图像显示原理"><a href="#图像显示原理" class="headerlink" title="图像显示原理"></a>图像显示原理</h2><p>cpu和GPU关系<br><img src="04cpu.png" alt="png"></p><p>1.CPU:输出位图<br>2.GPU :图层渲染，纹理合成<br>3.把结果放到帧缓冲区(frame buffer)中<br>4.再由视频控制器根据vsync信号在指定时间之前去提取帧缓冲区的屏幕显示内容<br>5.显示到屏幕上</p><p>cpu和gpu的显示中的分工<br><img src="05gpu.png" alt="png"></p><p>CPU工作<br>1.Layout: UI布局，文本计算<br>2.Display: 绘制<br>3.Prepare: 图片解码<br>4.Commit：提交位图</p><p>GPU渲染管线(OpenGL)<br>顶点着色，图元装配，光栅化，片段着色，片段处理</p><p>##UI卡顿掉帧的原因<br><img src="06kadun.png" alt="png"></p><p>iOS设备的硬件时钟会发出Vsync（垂直同步信号），然后App的CPU会去计算屏幕要显示的内容，之后将计算好的内容提交到GPU去渲染。随后，GPU将渲染结果提交到帧缓冲区，等到下一个VSync到来时将缓冲区的帧显示到屏幕上。也就是说，一帧的显示是由CPU和GPU共同决定的。</p><p>一般来说，页面滑动流畅是60fps，也就是1s有60帧更新，即每隔16.7ms就要产生一帧画面，而如果CPU和GPU加起来的处理时间超过了16.7ms，就会造成掉帧甚至卡顿。</p><p>##滑动优化方案<br>CPU：把以下操作放在子线程中<br>1.对象创建、调整、销毁<br>2.预排版（布局计算、文本计算、缓存高度等等）<br>3.预渲染（文本等异步绘制，图片解码等）</p><p>GPU:<br>纹理渲染，视图混合</p><p>一般遇到性能问题时，考虑以下问题：<br>是否受到CPU或者GPU的限制？<br>是否有不必要的CPU渲染？<br>是否有太多的离屏渲染操作？<br>是否有太多的图层混合操作？<br>是否有奇怪的图片格式或者尺寸？<br>是否涉及到昂贵的view或者效果？<br>view的层次结构是否合理？  </p><h2 id="UI绘制原理"><a href="#UI绘制原理" class="headerlink" title="UI绘制原理"></a>UI绘制原理</h2><p><img src="07display.png" alt="png"></p><p>异步绘制：<br><strong>[self.layer.delegate displayLayer: ]</strong><br>代理负责生成对应的bitmap,<br>设置该bitmap作为该layer.contents属性的值</p><p><img src="08yibuhuizhi.png" alt="png"></p><h2 id="离屏渲染"><a href="#离屏渲染" class="headerlink" title="离屏渲染"></a>离屏渲染</h2><p>On-Screen Rendering:当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行<br>Off-Screen Rendering:离屏渲染，分为CPU离屏渲染和GPU离屏渲染两种形式。GPU离屏渲染指的是GPU在当前屏幕缓冲区外新开辟一个缓冲区进行渲染操作<br>应当尽量避免的则是GPU离屏渲染</p><p>GPU离屏渲染何时会触发呢？<br>圆角（当和maskToBounds一起使用时）、图层蒙版、阴影，设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layer.shouldRasterize ＝ YES</span><br></pre></td></tr></table></figure><p><em>为什么要避免GPU离屏渲染？</em></p><p>GPU需要做额外的渲染操作。通常GPU在做渲染的时候是很快的，但是涉及到offscreen-render的时候情况就可能有些不同，因为需要额外开辟一个新的缓冲区进行渲染，然后绘制到当前屏幕的过程需要做onscreen跟offscreen上下文之间的切换，这个过程的消耗会比较昂贵，涉及到OpenGL的pipeline跟barrier，而且offscreen-render在每一帧都会涉及到，因此处理不当肯定会对性能产生一定的影响。另外由于离屏渲染会增加GPU的工作量，可能会导致CPU+GPU的处理时间超出16.7ms，导致掉帧卡顿。所以可以的话应尽量减少offscreen-render的图层</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发中RunTime总结</title>
      <link href="/bianchengme/2019/03/29/iOS%E5%BC%80%E5%8F%91%E4%B8%ADRunTime%E6%80%BB%E7%BB%93/"/>
      <url>/bianchengme/2019/03/29/iOS%E5%BC%80%E5%8F%91%E4%B8%ADRunTime%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>#runtime相关</p><ul><li>数据结构：NSObject、objc_object、objc_class、isa、class_data_bits_t、cache_t、method_t</li><li>对象、类对象、元类对象</li><li>消息传递、消息转发</li></ul><h3 id="一、数据结构：NSObject、objc-object、objc-class、isa、class-data-bits-t、cache-t、method-t"><a href="#一、数据结构：NSObject、objc-object、objc-class、isa、class-data-bits-t、cache-t、method-t" class="headerlink" title="一、数据结构：NSObject、objc_object、objc_class、isa、class_data_bits_t、cache_t、method_t"></a>一、数据结构：NSObject、objc_object、objc_class、isa、class_data_bits_t、cache_t、method_t</h3><p><img src="object_struct.png" alt="img"></p><ul><li>NSObject<br>在OC中，基本上所有的类的基类，都是NSObject。因此要深入了解OC中的类的结构，就要从NSObject这个类说起。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@interface NSObject &lt;NSObject&gt; &#123;</span><br><span class="line">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NSObject仅有一个实例变量Class isa：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; An opaque type that represents an Objective-C class.</span><br><span class="line">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure><ul><li>Class实质上是指向objc_class的指针。而objc_class的定义：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct objc_class : objc_object &#123;</span><br><span class="line">    &#x2F;&#x2F; Class ISA;</span><br><span class="line">    Class superclass;</span><br><span class="line">    cache_t cache;             &#x2F;&#x2F; formerly cache pointer and vtable</span><br><span class="line">    class_data_bits_t bits;    &#x2F;&#x2F; class_rw_t * plus custom rr&#x2F;alloc flags</span><br><span class="line"></span><br><span class="line">    class_rw_t *data() &#123; </span><br><span class="line">        return bits.data();</span><br><span class="line">    &#125;</span><br><span class="line">    void setData(class_rw_t *newData) &#123;</span><br><span class="line">        bits.setData(newData);</span><br><span class="line">    &#125;</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，objc_class继承自objc_object；在objc_class中，有三个数据成员：superclass 、cache、bits。</p><ul><li><p>Class superclass ：同样是Class类型，表明当前类的父类。</p></li><li><p>cache_t cache ：用于快速查找方法执行函数，可增量扩展的哈希表结构，是局部性原理的最佳运用。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct cache_t &#123;</span><br><span class="line">    struct bucket_t *_buckets;&#x2F;&#x2F;一个散列表，用来方法缓存，bucket_t类型，包含key以及方法实现IMP</span><br><span class="line">    mask_t _mask;&#x2F;&#x2F;分配用来缓存bucket的总数</span><br><span class="line">    mask_t _occupied;&#x2F;&#x2F;表明目前实际占用的缓存bucket的个数</span><br><span class="line">｝</span><br><span class="line">struct bucket_t &#123;</span><br><span class="line">    private:</span><br><span class="line">    cache_key_t _key;</span><br><span class="line">    IMP _imp;</span><br><span class="line"> ｝</span><br></pre></td></tr></table></figure><p>runtime当要调用一个方法时，先不去Class的方法列表中查找，而是先去找cache_t cache 。当系统调用过一个方法后，会将其实现IMP和key存放到cache中，因为理论上一个方法调用过后，被再次调用的概率很大。</p><ul><li>class_data_bits_t bits：这是Class的核心，其本质是一个可以被Mask的指针类型。根据不同的Mask，可以取出不同的值。可以看做对class_rw_t的封装。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">struct class_data_bits_t &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Values are the FAST_ flags above.</span><br><span class="line">    uintptr_t bits;</span><br><span class="line"> </span><br><span class="line">    public:</span><br><span class="line">    class_rw_t* data() &#123;</span><br><span class="line">        return (class_rw_t *)(bits &amp; FAST_DATA_MASK);</span><br><span class="line">    &#125;</span><br><span class="line">    void setData(class_rw_t *newData)</span><br><span class="line">    &#123;</span><br><span class="line">        assert(!data()  ||  (newData-&gt;flags &amp; (RW_REALIZING | RW_FUTURE)));</span><br><span class="line">        &#x2F;&#x2F; Set during realization or construction only. No locking needed.</span><br><span class="line">        &#x2F;&#x2F; Use a store-release fence because there may be concurrent</span><br><span class="line">        &#x2F;&#x2F; readers of data and data&#39;s contents.</span><br><span class="line">        uintptr_t newBits &#x3D; (bits &amp; ~FAST_DATA_MASK) | (uintptr_t)newData;</span><br><span class="line">        atomic_thread_fence(memory_order_release);</span><br><span class="line">        bits &#x3D; newBits;</span><br><span class="line">    &#125;</span><br><span class="line">    。。。</span><br></pre></td></tr></table></figure><p>class_data_bits_t bits 仅含有一个成员uintptr_t bits， 可以理解为一个‘复合指针’。什么意思呢，就是bits不仅包含了指针，同时包含了Class的各种异或flag，来说明Class的属性。把这些信息复合在一起，仅用一个uint指针bits来表示。当需要取出这些信息时，需要用对应的以FAST_ 前缀开头的flag掩码对bits做按位与操作。</p><p>例如，我们需要取出Classs的核心信息class_rw_t, 则需要调用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class_rw_t* data() &#123;</span><br><span class="line">        return (class_rw_t *)(bits &amp; FAST_DATA_MASK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>class_rw_t：Class的核心结构</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct class_rw_t &#123;</span><br><span class="line">     uint32_t flags;</span><br><span class="line">     uint32_t version;</span><br><span class="line"></span><br><span class="line">     const class_ro_t *ro;</span><br><span class="line"></span><br><span class="line">     method_array_t methods;</span><br><span class="line">     property_array_t properties;</span><br><span class="line">     protocol_array_t protocols;</span><br><span class="line"></span><br><span class="line">     Class firstSubclass;</span><br><span class="line">     Class nextSiblingClass;</span><br><span class="line"></span><br><span class="line">     char *demangledName;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p>Objc的类的属性、方法、以及遵循的协议都放在class_rw_t中，class_rw_t代表了类相关的读写信息，是对class_ro_t的封装，而class_ro_t代表了类的只读信息，存储了 编译器决定了的属性、方法和遵守协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">struct class_ro_t &#123;</span><br><span class="line">    uint32_t flags;</span><br><span class="line">    uint32_t instanceStart;</span><br><span class="line">    uint32_t instanceSize;</span><br><span class="line">    #ifdef __LP64__</span><br><span class="line">    uint32_t reserved;</span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">    const uint8_t * ivarLayout;</span><br><span class="line">    </span><br><span class="line">    const char * name;</span><br><span class="line">    method_list_t * baseMethodList;</span><br><span class="line">    protocol_list_t * baseProtocols;</span><br><span class="line">    const ivar_list_t * ivars;</span><br><span class="line"></span><br><span class="line">    const uint8_t * weakIvarLayout;</span><br><span class="line">    property_list_t *baseProperties;</span><br><span class="line"></span><br><span class="line">    method_list_t *baseMethods() const &#123;</span><br><span class="line">        return baseMethodList;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ul><li>objc_object（id）</li></ul><p>OC的底层实现是runtime，在runtime这一层，对象被定义为objc_object 结构体，类被定义为了objc_class 结构体。而objc_class 继承于objc_object， 因此，类可以看做是一类特殊的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct objc_object &#123;</span><br><span class="line">private:</span><br><span class="line">    isa_t isa;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ISA() assumes this is NOT a tagged pointer object</span><br><span class="line">    Class ISA();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; getIsa() allows this to be a tagged pointer object</span><br><span class="line">    Class getIsa();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 省略其余方法</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>objc_object的定义很简单，仅包含一个isa_t类型 isa,有关于isa操作相关，弱引用相关，关联对象相关，内存关联相关。</p><ul><li>isa指针，共用体isa_t</li></ul><p>isa关于对象，其指向类对象。<br>关于类对象，其指向元类对象。<br>实例-(isa)-&gt;class-(isa)-&gt;MetaClass    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">union isa_t </span><br><span class="line">&#123;</span><br><span class="line">    isa_t() &#123; &#125;</span><br><span class="line">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    Class cls;</span><br><span class="line">    uintptr_t bits;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 省略其余</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="02isa.png" alt="img"></p><ul><li>method_t</li></ul><p>函数四要素：名称、返回值、参数、函数体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct method_t &#123;</span><br><span class="line">  SEL name;           &#x2F;&#x2F;名称</span><br><span class="line">  const char *types;&#x2F;&#x2F;返回值和参数</span><br><span class="line">  IMP imp;              &#x2F;&#x2F;函数体</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h3 id="二、对象、类对象、元类对象"><a href="#二、对象、类对象、元类对象" class="headerlink" title="二、对象、类对象、元类对象"></a>二、对象、类对象、元类对象</h3><ul><li>类对象存储实例方法列表等信息；</li><li>元类对象存储类方法列表等信息；</li></ul><p><img src="03class.png" alt="img"></p><p>superClass是一层层集成的，到最后NSObject的superClass是nil。而NSObject的isa指向根元类，这个根元类的isa指向他自己，而他的superClass是NSObject，也就是最后形成一个环。</p><h3 id="三、消息传递"><a href="#三、消息传递" class="headerlink" title="三、消息传递"></a>三、消息传递</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void objc_msgSend(void &#x2F;* id self, SEL op, ... *&#x2F; )</span><br><span class="line"></span><br><span class="line">void objc_msgSendSuper(void &#x2F;* struct objc_super *super, SEL op, ... *&#x2F; )</span><br><span class="line"></span><br><span class="line">struct objc_super &#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Specifies an instance of a class.</span><br><span class="line">    __unsafe_unretained _Nonnull id receiver;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; Specifies the particular superclass of the instance to message. </span><br><span class="line">#if !defined(__cplusplus)  &amp;&amp;  !__OBJC2__</span><br><span class="line">    &#x2F;* For compatibility with old objc-runtime.h header *&#x2F;</span><br><span class="line">    __unsafe_unretained _Nonnull Class class;</span><br><span class="line">#else</span><br><span class="line">    __unsafe_unretained _Nonnull Class super_class;</span><br><span class="line">#endif</span><br><span class="line">    &#x2F;* super_class is the first class to search *&#x2F;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>消息传递的流程：缓存查找–&gt;当前类查找–&gt;父类逐级查找</p><ul><li><p>调用方法之前，先去查找缓存，看看缓存中是否有对应选择器的方法实现，如果有，就去调用函数，完成消息传递（缓存查找：给定值SEL,目标是查找对应bucket_t中的IMP，哈希查找）</p></li><li><p>如果缓存中没有，会根据当前实例的isa指针查找当前类对象的方法列表，看看是否有同样名称的方法 ，如果找到，就去调用函数，完成消息传递（当前类中查找：对于已排序好的方法列表，采用二分查找，对于没有排序好的列表，采用一般遍历）</p></li><li><p>如果当前类对象的方法列表没有，就会逐级父类方法列表中查找，如果找到，就去调用函数，完成消息传递（父类逐级查找：先判断父类是否为nil，为nil则结束，否则就继续进行缓存查找–&gt;当前类查找–&gt;父类逐级查找的流程）</p></li><li><p>如果一直查到根类依然没有查找到，则进入到消息转发流程中，完成消息传递</p></li></ul><h3 id="四、消息转发"><a href="#四、消息转发" class="headerlink" title="四、消息转发"></a>四、消息转发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel;&#x2F;&#x2F;为对象方法进行决议</span><br><span class="line">+ (BOOL)resolveClassMethod:(SEL)sel;&#x2F;&#x2F;为类方法进行决议</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector;&#x2F;&#x2F;方法转发目标</span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector;</span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation;</span><br></pre></td></tr></table></figure><p><img src="04message.png" alt="img"></p><p>那么最后消息未能处理的时候，还会调用到</p><ul><li><p>(void)doesNotRecognizeSelector:(SEL)aSelector这个方法，我们也可以在这个方法中做处理，避免掉crash，但是只建议在线上环境的时候做处理，实际开发过程中还要把异常抛出来</p></li><li><p>方法交换(Method-Swizzling)</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  + (void)load</span><br><span class="line">&#123;</span><br><span class="line">    Method test &#x3D; class_getInstanceMethod(self, @selector(test));</span><br><span class="line"></span><br><span class="line">    Method otherTest &#x3D; class_getInstanceMethod(self, @selector(otherTest));</span><br><span class="line"></span><br><span class="line">    method_exchangeImplementations(test, otherTest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用场景：替换系统的方法，比如viewDidLoad，viewWillAppear以及一些响应方法，来进行统计信息</p><ul><li>动态添加方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class_addMethod(self, sel, testImp, &quot;v@:&quot;);</span><br><span class="line"></span><br><span class="line">void testImp (void)</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;testImp&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@dynamic 动态方法解析</li></ul><p>动态运行时语言将函数决议推迟到运行时<br>编译时语言在编译期进行函数决议</p><ul><li>[obj foo]和objc_msgSend()函数之间有什么关系？</li></ul><p>objc_msgSend()是[obj foo]的具体实现。在runtime中，objc_msgSend()是一个c函数，[obj foo]会被翻译成这样的形式objc_msgSend(obj, foo)。</p><ul><li>runtime是如何通过selector找到对应的IMP地址的？</li></ul><p>缓存查找–&gt;当前类查找–&gt;父类逐级查找</p><ul><li>能否向编译后的类中增加实例变量？</li></ul><p>不能。 编译后，该类已经完成了实例变量的布局，不能再增加实例变量。<br>但可以向动态添加的类中增加实例变量。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> RunTime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发中内存管理总结</title>
      <link href="/bianchengme/2019/03/29/iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93/"/>
      <url>/bianchengme/2019/03/29/iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS网络编程</title>
      <link href="/bianchengme/2019/03/15/iOS%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/bianchengme/2019/03/15/iOS%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS常见算法汇总</title>
      <link href="/bianchengme/2019/03/05/iOS%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/"/>
      <url>/bianchengme/2019/03/05/iOS%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="算法相关"><a href="#算法相关" class="headerlink" title="算法相关"></a>算法相关</h1><ul><li>字符串反转</li><li>链表反转</li><li>有序数组合并</li><li>Hash算法</li><li>查找两个子视图的共同父视图</li><li>求无序数组当中的中位数</li></ul><p><a href="https://github.com/shanyutou/ALGforC" target="_blank" rel="noopener">github地址</a></p><h2 id="1-字符串反转"><a href="#1-字符串反转" class="headerlink" title="1.字符串反转"></a>1.字符串反转</h2><p>给定字符串 “Hello,world”实现将其反转。输出“dlrow,olleh”。</p><p>思路：字符串数组中从开始收尾交换，一直到中间元素，实现数组反转；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch[] = <span class="string">"hello,world"</span>;</span><br><span class="line"><span class="keyword">char</span> *<span class="built_in">begin</span> = ch;</span><br><span class="line"><span class="keyword">char</span> *<span class="built_in">end</span> = ch + <span class="built_in">strlen</span>(ch) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">begin</span> &lt; <span class="built_in">end</span>) &#123;</span><br><span class="line">    <span class="keyword">char</span> temp = *<span class="built_in">begin</span>;</span><br><span class="line">    *(<span class="built_in">begin</span>++) = *<span class="built_in">end</span>;</span><br><span class="line">    *(<span class="built_in">end</span>--) = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"reverseString:%s\n"</span>, ch);</span><br></pre></td></tr></table></figure><h2 id="2-链表反转"><a href="#2-链表反转" class="headerlink" title="2.链表反转"></a>2.链表反转</h2><p>反转前1-&gt;2-&gt;3-&gt;4-&gt;NULL<br>反转后4-&gt;3-&gt;2-&gt;1-&gt;NULL</p><p>思路：因为链表是从头到尾遍历，想要反转，最方便的就是构造链表从尾部到头部的顺序构造。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  定义一个链表  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    NSInteger data;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)listReverse</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">p</span> = [<span class="title">self</span> <span class="title">constructList</span>];</span></span><br><span class="line">    </span><br><span class="line">    [self printList:p];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//反转后的链表头部</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">newH</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="comment">//头插法</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//记录下一个结点</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">temp</span> = <span class="title">p</span>-&gt;<span class="title">next</span>;</span></span><br><span class="line">        <span class="comment">//当前结点的next指向新链表的头部</span></span><br><span class="line">        p-&gt;next = newH;</span><br><span class="line">        <span class="comment">//更改新链表头部为当前结点</span></span><br><span class="line">        newH = p;</span><br><span class="line">        <span class="comment">//移动p到下一个结点</span></span><br><span class="line">        p = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [self printList:newH];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 打印链表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param head 给定链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)printList:(struct Node *)head</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">temp</span> = <span class="title">head</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"list is : "</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%zd "</span>,temp-&gt;data);</span><br><span class="line">        </span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**  构造链表  */</span></span><br><span class="line">- (struct Node *)constructList</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//头结点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">head</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="comment">//尾结点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">cur</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (NSInteger i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">node</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">Node</span>));</span></span><br><span class="line">        </span><br><span class="line">        node-&gt;data = i;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//头结点为空，新结点即为头结点</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            head = node;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//当前结点的next为尾结点</span></span><br><span class="line">            cur-&gt;next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置当前结点为新结点</span></span><br><span class="line">        cur = node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-有序数组合并"><a href="#3-有序数组合并" class="headerlink" title="3.有序数组合并"></a>3.有序数组合并</h2><p>将有序数组 和 合并为</p><p>思路：两个数组一起遍历，选择合适的（比较小的）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)orderListMerge</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> aLen = <span class="number">5</span>,bLen = <span class="number">9</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> b[] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    [self printList:a length:aLen];</span><br><span class="line">    </span><br><span class="line">    [self printList:b length:bLen];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> result[<span class="number">14</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>,q = <span class="number">0</span>,i = <span class="number">0</span>;<span class="comment">//p和q分别为a和b的下标，i为合并结果数组的下标</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//任一数组没有达到s边界则进行遍历</span></span><br><span class="line">    <span class="keyword">while</span> (p &lt; aLen &amp;&amp; q &lt; bLen) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果a数组对应位置的值小于b数组对应位置的值,则存储a数组的值，并移动a数组的下标与合并结果数组的下标</span></span><br><span class="line">        <span class="keyword">if</span> (a[p] &lt; b[q]) result[i++] = a[p++];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//否则存储b数组的值，并移动b数组的下标与合并结果数组的下标</span></span><br><span class="line">        <span class="keyword">else</span> result[i++] = b[q++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果a数组有剩余，将a数组剩余部分拼接到合并结果数组的后面</span></span><br><span class="line">    <span class="keyword">while</span> (++p &lt; aLen) &#123;</span><br><span class="line">        </span><br><span class="line">        result[i++] = a[p];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果b数组有剩余，将b数组剩余部分拼接到合并结果数组的后面</span></span><br><span class="line">    <span class="keyword">while</span> (q &lt; bLen) &#123;</span><br><span class="line">        </span><br><span class="line">        result[i++] = b[q++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [self printList:result length:aLen + bLen];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)printList:(<span class="keyword">int</span> [])<span class="built_in">list</span> length:(<span class="keyword">int</span>)length</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,<span class="built_in">list</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-HASH算法"><a href="#4-HASH算法" class="headerlink" title="4.HASH算法"></a>4.HASH算法</h2><ul><li><p>哈希表</p></li><li><p>在一个字符串中找到第一个只出现一次的字符。如输入“fsfsbcd”,输出”b”;</p></li></ul><p>思路：字符（char）是一个长度为8的数据类型，因此总共有256中可能。每个字母根据其ASC||码值作为组数下标对应数组中的一个数字。数组中存储每次字符出现的次数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)hashTest</span><br><span class="line">&#123;</span><br><span class="line">    NSString * testString = @<span class="string">"hhaabccdeef"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> testCh[<span class="number">100</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memcpy</span>(testCh, [testString cStringUsingEncoding:NSUTF8StringEncoding], [testString length]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">list</span>[<span class="number">256</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">list</span>[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> *p = testCh;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> result = <span class="string">'\0'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (*p != result) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">list</span>[*(p++)]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    p = testCh;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (*p != result) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">list</span>[*p] == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            result = *p;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"result:%c"</span>,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-查找两个子视图的共同父视图"><a href="#5-查找两个子视图的共同父视图" class="headerlink" title="5.查找两个子视图的共同父视图"></a>5.查找两个子视图的共同父视图</h2><p>思路:分别记录两个子视图的所有父视图并保存到数组中，然后倒序寻找,直至找到第一个不一样的父视图。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)findCommonSuperViews:(UIView *)view1 view2:(UIView *)view2</span><br><span class="line">&#123;</span><br><span class="line">    NSArray * superViews1 = [self findSuperViews:view1];</span><br><span class="line">    </span><br><span class="line">    NSArray * superViews2 = [self findSuperViews:view2];</span><br><span class="line">    </span><br><span class="line">    NSMutableArray * resultArray = [NSMutableArray <span class="built_in">array</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; MIN(superViews1.count, superViews2.count)) &#123;</span><br><span class="line">        </span><br><span class="line">        UIView *super1 = superViews1[superViews1.count - i - <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        UIView *super2 = superViews2[superViews2.count - i - <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (super1 == super2) &#123;</span><br><span class="line">            </span><br><span class="line">            [resultArray addObject:super1];</span><br><span class="line">            </span><br><span class="line">            i++;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSLog(@<span class="string">"resultArray:%@"</span>,resultArray);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">- (NSArray &lt;UIView *&gt;*)findSuperViews:(UIView *)view</span><br><span class="line">&#123;</span><br><span class="line">    UIView * temp = view.superview;</span><br><span class="line">    </span><br><span class="line">    NSMutableArray * result = [NSMutableArray <span class="built_in">array</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">        </span><br><span class="line">        [result addObject:temp];</span><br><span class="line">        </span><br><span class="line">        temp = temp.superview;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-求无序数组中的中位数"><a href="#6-求无序数组中的中位数" class="headerlink" title="6.求无序数组中的中位数"></a>6.求无序数组中的中位数</h2><p>中位数：当数组个数n为奇数时，为(n + 1)/2，即是最中间那个数字；当n为偶数时，为(n/2 + (n/2 + 1))/2,即是中间两个数字的平均数。</p><p>思路:</p><p>1.排序算法+中位数<br>首先用冒泡排序、快速排序、堆排序、希尔排序等排序算法将所给数组排序，然后取出其中位数即可。<br>2.利用快排思想</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UI 为什么必须要在主线程更新</title>
      <link href="/bianchengme/2019/03/01/UI-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9C%A8%E4%B8%BB%E7%BA%BF%E7%A8%8B%E6%9B%B4%E6%96%B0/"/>
      <url>/bianchengme/2019/03/01/UI-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9C%A8%E4%B8%BB%E7%BA%BF%E7%A8%8B%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>在iOS开发中，一直知道不能再子线程中更新UI，但是被面试官问到为什么不能再子线程中更新UI,却不知道了尴尬，这就是学习不探究原理的的毛病，要治。</p><p>UIKit 官方文档中有重点提示： </p><p><strong>Important</strong></p><p>Use UIKit classes only from your app’s main thread or main dispatch queue, unless otherwise indicated. This restriction particularly applies to classes derived from UIResponder or that involve manipulating your app’s user interface in any way.</p><p>意思就是只能在主线程或者主队列中使用UIKit类，特别适用于派生自UIPResponder的类，或者涉及到以任何方式操纵应用程序的用户界面。</p><p>我们探究背后的原因是什么？</p><p>UIKit并不是一个线程安全的类，UI操作涉及到渲染访问各种View对象的属性，如果异步操作下会存在读写问题，而为其加锁则会耗费大量资源并拖慢运行速度。另一方面因为整个程序的起点UIApplication是在主线程进行初始化，所有的用户事件都是在主线程上进行传递（如点击、拖动），所以view只能在主线程上才能对事件进行响应。而在渲染方面由于图像的渲染需要以60帧的刷新率在屏幕上同时更新，在非主线程异步化的情况下无法确定这个处理过程能够实现同步更新。</p><p><strong>UIKit非线程安全</strong></p><p>在UIKit中，很多类中大部分的属性都被修饰为nonatomic，这意味着它们不能在多线程的环境下工作，而对于UIKit这样一个庞大的框架，将其所有属性都设计为线程安全是不现实的，这可不仅仅是简单的将nonatomic改成atomic或者是加锁解锁的操作，还涉及到很多的方面：</p><p>假设能够异步设置view的属性，那我们究竟是希望这些改动能够同时生效，还是按照各自runloop的进度去改变这个view的属性呢？</p><p>假设UITableView在其他线程去移除了一个cell，而在另一个线程却对这个cell所在的index进行一些操作，这时候可能就会引发crash。</p><p>如果在后台线程移除了一个view，这个时候runloop周期还没有完结，用户在主线程点击了这个“将要”消失的view，那么究竟该不该响应事件？在哪条线程进行响应？</p><p>仔细思考，似乎能够多线程处理UI并没有给我们开发带来更多的便利，假如你代入了这些情景进行思考，你很容易得出一个结论： “我在一个串行队列对这些事件进行处理就可以了。” 苹果也是这样想的，所以UIKit的所有操作都要放到主线程串行执行。</p><p>在Thread-Safe Class Design一文提到：</p><p>It’s a conscious design decision from Apple’s side to not have UIKit be thread-safe. Making it thread-safe wouldn’t buy you much in terms of performance; it would in fact make many things slower. And the fact that UIKit is tied to the main thread makes it very easy to write concurrent programs and use UIKit. All you have to do is make sure that calls into UIKit are always made on the main thread.</p><p>大意为把UIKit设计成线程安全并不会带来太多的便利，也不会提升太多的性能表现，甚至会因为加锁解锁而耗费大量的时间。事实上并发编程也没有因为UIKit是线程不安全而变得困难，我们所需要做的只是要确保UI操作在主线程进行就可以了。</p><p><strong>Runloop 与绘图循环</strong></p><p>道理我们都懂，那这个究竟跟我们不能在后台线程操作UI有什么关系呢？</p><p>UIApplication在主线程所初始化的Runloop我们称为Main Runloop，它负责处理app存活期间的大部分事件，如用户交互等，它一直处于不断处理事件和休眠的循环之中，以确保能尽快的将用户事件传递给GPU进行渲染，使用户行为能够得到响应，画面之所以能够得到不断刷新也是因为Main Runloop在驱动着。</p><p>而每一个view的变化的修改并不是立刻变化，相反的会在当前run loop的结束的时候统一进行重绘，这样设计的目的是为了能够在一个runloop里面处理好所有需要变化的view，包括resize、hide、reposition等等，所有view的改变都能在同一时间生效，这样能够更高效的处理绘制，这个机制被称为<strong>绘图循环（View Drawing Cycle)</strong>。</p><h2 id="理解iOS的渲染流程"><a href="#理解iOS的渲染流程" class="headerlink" title="理解iOS的渲染流程"></a>理解iOS的渲染流程</h2><h3 id="渲染系统框架"><a href="#渲染系统框架" class="headerlink" title="渲染系统框架"></a>渲染系统框架</h3><p><img src="uikit_stack.png" alt="uikit_stack.png"></p><ul><li>UIKit: 包含各种控件，负责对用户操作事件的响应，本身并不提供渲染的能力</li><li>Core Animation: 负责所有视图的绘制、显示与动画效果</li><li>OpenGL ES: 提供2D与3D渲染服务</li><li>Core Graphics: 提供2D渲染服务</li><li>Graphics Hardware: 指GPU</li></ul><p>所以在iOS中，所有视图的现实与动画本质上是由 Core Animation 负责，而不是UIKit。</p><h3 id="Core-Animation-Pipeline-流水线"><a href="#Core-Animation-Pipeline-流水线" class="headerlink" title="Core Animation Pipeline 流水线"></a>Core Animation Pipeline 流水线</h3><p><img src="core_animation_pipeline.png" alt="uikit_stack.png"></p><p>Core Animation的绘制是通过Core Animation Pipeline实现，它以流水线的形式进行渲染，具体分为四个步骤：</p><ul><li>Commit Transaction:</li></ul><p>可以细分为</p><pre><code>- Layout: 构建视图布局如addSubview等操作- Display: 重载drawRect:进行时图绘制，该步骤使用CPU与内存- Prepare: 主要处理图像的解码与格式转换等操作- Commit: 将Layer递归打包并发送到Render Server</code></pre><ul><li><p>Render Server:</p><p>  负责渲染工作，会解析上一步Commit Transaction中提交的信息并反序列化成渲染树（render tree)，随后根据layer的各种属性生成绘制指令，并在下一次VSync信号到来时调用OpenGL进行渲染。</p></li><li><p>GPU:</p><p>  GPU会等待显示器的VSync信号发出后才进行OpenGL渲染管线，将3D几何数据转化成2D的像素图像和光栅处理，随后进行新的一帧的渲染，并将其输出到缓冲区。</p></li><li><p>Dispaly:</p><p>  从缓冲区中取出画面，并输出到屏幕上。</p></li></ul><h3 id="知识补充：iOS的VSync与双缓冲机制"><a href="#知识补充：iOS的VSync与双缓冲机制" class="headerlink" title="知识补充：iOS的VSync与双缓冲机制"></a>知识补充：iOS的VSync与双缓冲机制</h3><h4 id="VSync"><a href="#VSync" class="headerlink" title="VSync:"></a>VSync:</h4><p>VSync（vertical sync）是指垂直同步，在玩游戏的时候在设置的时候应该会看见过这个选项，这个机制能够让显卡和显示器保持在一个相同的刷新率从而避免画面撕裂。在iOS中，屏幕具有60Hz的刷新率，这意味着它每秒需要显示60张不同的图片（帧），但GPU并没有一个确定的刷新率，在某些时候GPU可能被要求更强力的数据输出来确保渲染能力，这时候他们可能比屏幕刷新率（60Hz）更快，就会导致屏幕不能完整的渲染所有GPU给他的数据，因为它不够快，屏幕的上一帧还没渲染完，下一帧就已经到来了，这就导致画面的撕裂。</p><p>这个时候我们就要引入VSync了，简单来说它就是让显卡保持他的输出速率不高于屏幕的刷新率，启用了VSync后，GPU不再会给你可怜的60Hz屏幕每秒发送100帧了，它会增加每一帧的发送间隔，确保显示器能够有充足的时间去处理每一帧。</p><h4 id="双缓冲机制"><a href="#双缓冲机制" class="headerlink" title="双缓冲机制"></a>双缓冲机制</h4><p>双缓冲机制是用于避免或减少画面闪烁的问题，在单缓冲的情况下，GPU输出了一帧画面，缓冲区就需要马上获取这个画面，并交给显示屏去显示，而这段时间GPU输出的画面就全都丢失了，因为没有缓冲区去承载这些画面，就会造成画面的闪烁。</p><p>而在双缓冲机制下有一个Back Frame Buffer和一个Front Frame Buffer，在GPU绘制完成后，它会将图像先保存到Back Frame Buffer中，操作完毕后，会调用一个交换函数，让绘制完成的Back Frame Buffer上的图像交换到Front Frame Buffer上。由于双缓冲利用了更多显存与CPU消耗时间，从而避免了画面的闪烁。</p><p>相信大家都会遇到过应用卡顿，卡顿的原因就是因为两帧的刷新时间间隔大于60帧每秒（约16.67ms），导致用户感觉点击或者滑动时，界面没有及时的响应。</p><p>前面提到Core Animation Pipeline是以流水线的形式工作的，在理想的状况下我们希望它能够在1/60s内完成图层树的准备工作并提交给渲染进程，而渲染进程在下一次VSync信号到来的时候提交给GPU进行渲染，并在1/60s内完成渲染，这样就不会产生任何的卡顿。</p><p>但是由于我们使用了我们的魔法UIKit，所以我们在许多后台线程进行了UI操作，在runloop的结尾准备进行渲染的时候，不同线程提交了不同的渲染信息，于是我们就拥有了更多的绘制事务，这个时候Core Animation Pipeline会不断将信息提交，让GPU进行渲染，由于绘制事件的不同步导致了GPU渲染的不同步，可能在上一帧是需要渲染一个label消失的画面，下一帧却又需要渲染这个label改变了文字，最终导致的是界面的不同步。</p><p>另一方面，在VSync和双缓冲机制我们可以看出渲染其实是一个十分消耗系统资源的操作（占用显存与CPU），所以可能会因为大量的事务和线程之间频繁的上下文切换导致了GPU无法处理，反而影响了性能，从而导致在1/60s中无法完成图层树的提交，导致了严重的卡顿。</p><h4 id="Texture-or-ComponentKit-实现支持异步更新UI框架"><a href="#Texture-or-ComponentKit-实现支持异步更新UI框架" class="headerlink" title="Texture or ComponentKit 实现支持异步更新UI框架"></a>Texture or ComponentKit 实现支持异步更新UI框架</h4><ul><li><p>AsyncDisplayKit（现命名为Texture） 是Facebook开源的一个用于保持iOS界面流畅的框架。</p></li><li><p>ComponentKit是Facebook开源的一个基于React思想的iOS原生UI开发框架。它通过函数式和声明的方式构建UI。</p></li></ul><p>让我们撤销掉我们对UIKit施展的各种魔法，回到这个UI只能在主线程进行操作的世界吧。这两个框架其实并不是真正的在后台线程操作UI，而是用了更巧妙的方法将一些耗时的操作异步执行，从而绕开了UIKit只能在主线程操作的限制。</p><p>比如Texture创建了各类Node，在node中包含了UIView，而Node本身是线程安全的，所以允许在后台线程对Node进行修改，随后在第一次主线程访问View的时候它才会在内部生成对应的View，当node的属性发生改变的时候，他也不会马上进行修改，而是在适当的时机一次性的在主线程为内部的View进行设置。（有点类似于绘图循环）</p><p>而ComponentKit则是通过创建Component来描述UI，它也是一个线程安全的类。可以将Component认为是一个刻板，而UIView是刻板下的一张纸，渲染则是喷墨的过程。当我们生成了一个Component的时候，就等于生成了一个View的模版，在进行渲染的时候只要按照模版进行绘制就可以了。复杂的界面可以通过各种简单的Component来组成。（类似于Flutter的widget）</p><h4 id="子线程中如何通知主线程（队列）更新UI方法，记录一下"><a href="#子线程中如何通知主线程（队列）更新UI方法，记录一下" class="headerlink" title="子线程中如何通知主线程（队列）更新UI方法，记录一下"></a>子线程中如何通知主线程（队列）更新UI方法，记录一下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;方法一</span><br><span class="line">[self performSelectorOnMainThread:@selector(updateImage:) withObject:data waitUntilDone:YES];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方法二</span><br><span class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;更新UI的代码，不用主线程中调用</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方法三</span><br><span class="line">[[NSOperationQueue mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;线程2：%@&quot;,[NSThread currentThread]);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把Mac上好用的操作搬到Windows</title>
      <link href="/bianchengme/2019/02/26/%E6%8A%8AMac%E4%B8%8A%E5%A5%BD%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E6%90%AC%E5%88%B0Windows/"/>
      <url>/bianchengme/2019/02/26/%E6%8A%8AMac%E4%B8%8A%E5%A5%BD%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E6%90%AC%E5%88%B0Windows/</url>
      
        <content type="html"><![CDATA[<p>Mac电脑上有几个笔记喜欢的操作，换到Windows上没有很不习惯：有空格预览、方向快捷键、Alfred软件等。</p><p>Windows没有这些功能，但是Windows上有丰富的第三方软件可以实现上面的功能甚至能更丰富。</p><ul><li>QuickLook 点击空格快速预览文件；</li><li>AutoHotKey 无所不能的快捷键；</li><li>EveryThing 强大的文件搜索功能；</li><li>Wox 开源软件类似Alfred,可以安装插件；</li><li>Listary 类似Wox,收费软件用户体验更好，可以和Wox结合起来用；</li><li>Snipaste 挺方便的截屏工具；</li><li>Zeal 类似Dash的免费API工具，虽然比不上Dash好用；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/bianchengme/2018/03/30/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/bianchengme/2018/03/30/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>用Markdown写文章是程序员的最爱，那什么是Markdown？</p><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯和亚伦·斯沃茨。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML文档”。 ——维基百科</p><p>Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。</p><p>你可以使用vim工具直接编辑md文件，也可以用记事本打开md文件编辑你的文章，也可以Markdown的编辑器编写，有很多在线的编辑器，还有不少客户端的编辑器，我是Mac系统，用的一个叫 Mou 的编辑器，还比较好使。Windows系统下，你可以自己找一下，应该也会有很好用的编辑器。</p><p>先简单介绍一下，Markdown的语法，具体怎么用，我相信大家一看例文就马上明白了。</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*斜体* 或者 _斜体_</span><br></pre></td></tr></table></figure><p>效果</p><p><em>斜体</em></p><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**粗体**  或者   __粗体__</span><br></pre></td></tr></table></figure><p>效果</p><p><em>**粗体</em></p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>可以在标题内容前输入特定数量的’#’来实现对应级别的HTML样式的标题。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>效果</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>一级和二级标题还有一种写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; </span><br><span class="line">二级标题</span><br><span class="line">--------------------</span><br></pre></td></tr></table></figure><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>行尾输入两个或以上的空格，然后回车。或者行尾加上&lt;br&gt;。</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p> 引用只需要在被引用的内容段落开头加上右尖括号&gt;即可。你可以选择只在开头加一个。也可以在每行前面都加一个，效果是一样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 这一整段的内容都会作为一个HTML的引用元素。</span><br><span class="line">引用元素是会自动优化排版的（reflowable，可回流）。</span><br><span class="line">你可以任意地将引用的内容包含进来，然后所有这些都会</span><br><span class="line">被解析成为单独一个引用元素。</span><br></pre></td></tr></table></figure><p>效果</p><blockquote><p>这一整段的内容都会作为一个HTML的引用元素。<br>引用元素是会自动优化排版的（reflowable，可回流）。<br>你可以任意地将引用的内容包含进来，然后所有这些都会<br>被解析成为单独一个引用元素。</p></blockquote><p> 引用可以嵌套。如果要在一个引用里插入一个引用，可以用两个&gt;开头。依此类推，根据嵌套层次加相应数量的符号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 这是一个引用。这是第一行</span><br><span class="line">这是第二行。</span><br><span class="line">&gt;&gt; 这是一个嵌套的引用。这是第一行。</span><br><span class="line">这是第二行</span><br><span class="line">&gt; </span><br><span class="line">&gt; 外层引用的第三行。前面需要一个视觉上的空行表示内层嵌套的结束，空行前面的&gt;可以有可以没有。</span><br></pre></td></tr></table></figure><p>效果</p><blockquote><p>这是一个引用。这是第一行<br> 这是第二行。</p><blockquote><p>这是一个嵌套的引用。这是第一行。<br> 这是第二行</p></blockquote><p>外层引用的第三行。前面需要一个视觉上的空行表示内层嵌套的结束，空行前面的&gt;可以有可以没有。</p></blockquote><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接可以在行内插入：</p><p> <a href="链接地址">链接文字</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Markdown](http:&#x2F;&#x2F;zh.wikipedia.com&#x2F;wiki&#x2F;Markdown)</span><br></pre></td></tr></table></figure><p>效果</p><p><a href="http://zh.wikipedia.com/wiki/Markdown" target="_blank" rel="noopener">Markdown</a></p><h3 id="水平分区线"><a href="#水平分区线" class="headerlink" title="水平分区线"></a>水平分区线</h3><p> 要生成水平分区线，可以在单独一行里输入3个或以上的短横线、星号或者下划线实现。短横线和星号之间可以输入任意空格。以下每一行都产生一条水平分区线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line">***</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure><p>效果</p><hr><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Foo](http:&#x2F;&#x2F;i.weather.com.cn&#x2F;images&#x2F;cn&#x2F;life&#x2F;2017&#x2F;04&#x2F;11&#x2F;11141533DF572FBBA092E37E6E843C656C318272.jpg)</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="http://i.weather.com.cn/images/cn/life/2017/04/11/11141533DF572FBBA092E37E6E843C656C318272.jpg" alt="Foo"></p><p>列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">无序列表</span><br><span class="line"> 使用 *，+，- 表示无序列表。</span><br><span class="line"></span><br><span class="line"> + 无序列表项 一</span><br><span class="line">    - 子无序列表 一</span><br><span class="line">    - 子无序列表 二</span><br><span class="line">        * 子无序列表 三</span><br><span class="line"> + 无序列表项 二</span><br><span class="line"> + 无序列表项 三</span><br><span class="line">有序列表</span><br><span class="line"> 使用数字和点表示有序列表。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 1. 有序列表项 一</span><br><span class="line">    1. 子有序列表项 一</span><br><span class="line">    2. 子有序列表项 二</span><br><span class="line"> 2. 有序列表项 二</span><br><span class="line"> 3. 有序列表项 三</span><br></pre></td></tr></table></figure><p>效果</p><p>无序列表</p><p>使用 *，+，- 表示无序列表。</p><ul><li>无序列表项 一<ul><li>子无序列表 一</li><li>子无序列表 二<ul><li>子无序列表 三</li></ul></li></ul></li><li>无序列表项 二</li><li>无序列表项 三</li></ul><p>有序列表</p><p>使用数字和点表示有序列表。</p><ol><li>有序列表项 一<ol><li>子有序列表项 一</li><li>子有序列表项 二</li></ol></li><li>有序列表项 二</li><li>有序列表项 三</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>行内代码快：代码用`包括<br>效果</p><p> <code>代码</code></p><p>代码块及代码高亮：<br> 在4个`后加上语言类型，高亮显示代码</p><p> (4个`)(语言类型)</p><p> 代码</p><p> (4个`)</p><h2 id="Markdown语法进阶"><a href="#Markdown语法进阶" class="headerlink" title="Markdown语法进阶"></a>Markdown语法进阶</h2><h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><p>Markdown中的转义字符为\，可以转义的有：</p><p>\ 反斜杠<br>` 反引号<br>* 星号<br>_ 下划线<br>{} 大括号<br>[] 中括号<br>() 小括号<br># 井号<br>+ 加号<br>- 减号<br>. 英文句号<br>! 感叹号  </p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>使用 ~~ 包括一段话表示删除线。</p><p> <del>这是一段错误的文本。</del></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><h4 id="单元格和表头"><a href="#单元格和表头" class="headerlink" title="单元格和表头"></a>单元格和表头</h4><p> 使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name | age</span><br><span class="line">---- | ---</span><br><span class="line">LearnShare | 12</span><br><span class="line">Mike |  32</span><br></pre></td></tr></table></figure><p>效果  </p><table><thead><tr><th>name</th><th>age</th></tr></thead><tbody><tr><td>LearnShare</td><td>12</td></tr><tr><td>Mike</td><td>32</td></tr></tbody></table><h4 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h4><p>在表头下方的分隔线标记中加入 :，即可标记下方单元格内容的对齐方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:--- 代表左对齐  </span><br><span class="line">:--: 代表居中对齐  </span><br><span class="line">---: 代表右对齐</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">left</th><th align="center">center</th><th align="right">right</th></tr></thead><tbody><tr><td align="left">aaaa</td><td align="center">bbbbbb</td><td align="right">ccccc</td></tr><tr><td align="left">a</td><td align="center">b</td><td align="right">c</td></tr></tbody></table><h4 id="插入其他内容"><a href="#插入其他内容" class="headerlink" title="插入其他内容"></a>插入其他内容</h4><p> 表格中可以插入其他 Markdown 中的行内标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|     name     |             URL                |</span><br><span class="line">| ------------ | ------------------------------- |</span><br><span class="line">| _Google_     | ![Google](https:&#x2F;&#x2F;www.google.com&#x2F;images&#x2F;branding&#x2F;googlelogo&#x2F;1x&#x2F;googlelogo_color_272x92dp.png)     |</span><br><span class="line">| __YouTube__   | [YouTube](https:&#x2F;&#x2F;www.youtube.com&#x2F;) |</span><br></pre></td></tr></table></figure><p>效果   </p><table><thead><tr><th>name</th><th>URL</th></tr></thead><tbody><tr><td><em>Google</em></td><td><img src="https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png" alt="Google"></td></tr><tr><td><strong>YouTube</strong></td><td><a href="https://www.youtube.com/" target="_blank" rel="noopener">YouTube</a></td></tr></tbody></table><h3 id="Html-标签"><a href="#Html-标签" class="headerlink" title="Html 标签"></a>Html 标签</h3><p> 支持在 Markdown 语法中嵌套 Html 标签</p><h3 id="选框"><a href="#选框" class="headerlink" title="选框"></a>选框</h3><p>使用带有 - [ ] 或 - [x] （未完成或已完成）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 未选</span><br><span class="line">- [x] 选中</span><br></pre></td></tr></table></figure><p>效果</p><ul><li><input disabled="" type="checkbox"> 未选</li><li><input checked="" disabled="" type="checkbox"> 选中</li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
